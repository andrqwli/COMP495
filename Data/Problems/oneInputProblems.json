{
    "count": 122,
    "problems": [
        {
            "_id": {
                "$oid": "53e6dcac85bf71071c8c1708"
            },
            "createdAt": {
                "$date": "2014-08-10T02:45:00.655Z"
            },
            "folder": "53cef2444fae0fbd7f731233",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Tires on 767 cars",
            "num": 1,
            "onSubmit": "// I/O pairs for functional behavior\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [3068] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness  \n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (!style.isJOTFC) { fail.s(\"use a single output, nothing else\"); }\n  if (!style.hasOTAOBE) { fail.s(\"write one call to alert using the number expression requested\"); }\n\n  // finalize and award points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n    ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick> <b> Write a program that prints the number of tires on 767 cars.  For this exercise let's assume that all cars have 4 tires.</b></font>\n</p>\n<p>\nTo arrive at this result, we will have to create an expression that starts with the number of cars and multiples it by the \nnumber of tires on each car.\n</p>",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-02-07T12:53:51.571Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/expr.tirescars.mp4"
        },
        {
            "_id": {
                "$oid": "53e6dd0585bf71071c8c1709"
            },
            "createdAt": {
                "$date": "2014-08-10T02:46:29.209Z"
            },
            "folder": "53cef2444fae0fbd7f731233",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Board length",
            "num": 3,
            "onSubmit": "// I/O pairs to define functional behavior\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [1.4285714285714286] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (!style.isJOTFC) { fail.s(\"use a single output, nothing else\"); }\n  if (!style.hasOTAOBE) { fail.s(\"write one call to alert using the number expression requested\"); }\n\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n     ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick><b>Write a program that prints the length (in feet) of each part of a 10 foot board that is sawn into 7 equal parts ( 10 divided by 7 ).</b>\n</font></p>\n<p>\nAs we have been doing, we must write an expression that will evaluate to the result we need, and we will put that\nexpression inside the parentheses of an alert statement to get it evaluated and printed out.  In this problem, the \nexpression involves number data.\n</p>",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-02-07T12:53:51.574Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/expr.board.mp4"
        },
        {
            "_id": {
                "$oid": "53e6dda185bf71071c8c170a"
            },
            "createdAt": {
                "$date": "2014-08-10T02:49:05.764Z"
            },
            "folder": "53cef2444fae0fbd7f731233",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Space craft",
            "num": 2,
            "onSubmit": "// I/O points for functional correctness\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [\"space-craft\"] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff=true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (!style.isJOTFC) { fail.s(\"use a single output, nothing else\"); }\n  if (!style.hasOTAOBE) { fail.s(\"write one call to alert using the string expression requested\"); }\n\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n      ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick> <b> Write a program that prints the words \"space\" and \"craft\" with a hyphen between. </b></font>\n</p>\n<p> Use string concatenation to do this.  Concatenation of strings is done with the + operator.\nAs before, we will create an expression to put inside the the parentheses of an alert statement\nto get it evaluated and printed.\nThe expression will concatenate the 3 strings together.\n</p>\n",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-02-07T12:53:51.573Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/expr.spacecraft.mp4"
        },
        {
            "_id": {
                "$oid": "53e6de2085bf71071c8c170b"
            },
            "createdAt": {
                "$date": "2014-08-10T02:51:12.983Z"
            },
            "folder": "53cef2444fae0fbd7f731233",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Quadratic equation",
            "num": 7,
            "onSubmit": "// I/O pairs define functional behavior\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [5, -10] ];\n\n// callbacks\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output, make sure the roots are in correct order\"); ff = true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  //if (!style.isJTTFC) { fail.s(\"use two output statements, nothing else\"); }\n  if (!style.hasTTAOBE) { fail.s(\"write two calls to alert, each using an arithmetic expression to calculate the solution\"); }\n\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n      ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick><b>Write a program that prints out the roots of the quadratic equation  for the specific case of a:2, b:10, and c:-100. Do this with two separate alert statements, each printing a single number. </b></font>\n</p>\n<p>\nRoots of the quadratic equations are computed with these expressions:\n<pre><font size=+1>\n -b  +/-  square root of ( b^2 - 4ac )  \n---------------------------------------------\n                      2a  \n</font></pre>\nthe +/- means do one computation with  + and then another with  -.\nSquare roots can be computed with the Math.sqrt function.  This complicated expression will show you the value of using parentheses to make your intentions unambiguous. \n</p>\n<p>\nAlert the \"+\" root first, then alert the \"-\" root with a separate alert statement.\n</p>\n",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-02-07T12:53:51.581Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/expr.quadratic.mp4"
        },
        {
            "_id": {
                "$oid": "53e6e5d485bf71071c8c170d"
            },
            "createdAt": {
                "$date": "2014-08-10T03:24:04.213Z"
            },
            "folder": "53cef2574fae0fbd7f731234",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Prof name",
            "num": 3,
            "onSubmit": "// I/O pairs\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [\"Stotts\"] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n  // if (ff) { fail.s(\"no style points since functional failed\"); }\n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (style.nDV == 0) { fail.s(\"you must declare and use one variable;\", (1/4) ); }\n    else if (style.nDV > 1) { fail.s(\"must declare only one variable;\", (1/4) ); }\n    if (style.nUDV > 0) { fail.s(\"you used undeclared variable(s): declare all variables;\", (1/4) ); }\n    if (style.nUUDV > 0) { fail.s(\"you declared variable(s) that were not used: use what you declare;\", (1/4) ); }\n    if (!style.hasOTAOV) { fail.s(\"write one call to alert, using a variable as parameter;\", (1/4) ); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n      ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick>\n<b>Write a program that creates a variable \"profName\".  Then assign my name to it, and print out the value of the variable.  </b>\n</font>For reference, my name is spelled Stotts .\n</p>\n<p>\nThis program will be very similar to the previous one.\nThe difference is we are here storing string data into the variable (rather than number data).\nAny type of data can be stored in a JavaScript variable.  You can, for example, store a number into a variable and\nthen later in the program execution store a string or a boolean into the same variable. \n</p>\n",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-01-14T13:00:05.39Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/var.profname.mp4"
        },
        {
            "_id": {
                "$oid": "53e6e79885bf71071c8c170e"
            },
            "createdAt": {
                "$date": "2014-08-10T03:31:36.812Z"
            },
            "folder": "53cef2574fae0fbd7f731234",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Age in months",
            "num": 4,
            "onSubmit": "// I/O pairs\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [348] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n  // if (ff) { fail.s(\"no style points since functional failed\"); }\n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (style.nDV == 0) { fail.s(\"you must declare and use one variable;\", (1/4) ); }\n    else if (style.nDV > 1) { fail.s(\"must declare only one variable;\", (1/4) ); }\n    if (style.nUDV > 0) { fail.s(\"you used undeclared variable(s): declare all variables;\", (1/4) ); }\n    if (style.nUUDV > 0) { fail.s(\"you declared variable(s) that were not used: use what you declare;\", (1/4) ); }\n    if (!style.hasOTAOBE) { fail.s(\"one call to alert, with an expression parameter containing a variable;\", (1/4) ); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n      ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick><b>\nWrite this program by modifying your previous program. Using the variable \"profAge\" you made earlier, print out how many months old I am.  \nAll we need to see is the number of months. \n</b></font>\n</p>\n<p>\nThis program will show that more complicated expressions can contain variable names as well at constant data values. In your program, you will create an expression in your alert statement where you multiply by 12 the value stored in variable profAge. To evaluate the expression, JavaScript will retrieve the \ndata stored in \"profAge\" first, then combine that data with the 12 using the multiplication operator. \n</p>\n<p>\nRemember that you can reload your previous program by clicking on the previous problem, and clicking the \"Reload Last\" dark blue button above the editor window.\n</p>",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-01-14T13:00:12.125Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/var.agemonths.mp4"
        },
        {
            "_id": {
                "$oid": "53e6e81c85bf71071c8c170f"
            },
            "createdAt": {
                "$date": "2014-08-10T03:33:48.94Z"
            },
            "folder": "53cef2574fae0fbd7f731234",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Statement of age",
            "num": 5,
            "onSubmit": "// I/O points \nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [\"My prof is 348 months old.\"] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n  // if (ff) { fail.s(\"no style points since functional failed\"); }\n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (style.nDV == 0) { fail.s(\"you must declare and use a variable;\", (1/4) ); }\n    else if (style.nDV > 2) { fail.s(\"must declare no more than two variables;\", (1/4) ); }\n    if (style.nUDV > 0) { fail.s(\"you used undeclared variable(s): declare all variables;\", (1/4) ); }\n    if (style.nUUDV > 0) { fail.s(\"you declared variable(s) that were not used: use what you declare;\", (1/4) ); }\n    if (!style.hasOTAOBE) { fail.s(\"one call to alert, with a string expression parameter containing a variable;\", (1/4) ); }\n  }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n      ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick>\n<b>Build this program by modifying the previous one. Use the variable \"profAge\" , and the computation of my age in months, and this time add an\nexplanatory message to the output along with the number.\n</b>\n</font>\n\n</p>\n<p>The format for the output is this: \n<pre>\n  My prof is 348 months old.\n</pre>\nNote the blanks before and after the 348, and the period at the end.  You will also produce the printed sentence by using the variable profAge and multiplying it in the alert.  In other words, you will compute 348 (as in the previous problem) in order to have that value appear in output.",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-01-14T13:00:17.524Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/var.stateage.mp4"
        },
        {
            "_id": {
                "$oid": "53e6e8ce85bf71071c8c1710"
            },
            "createdAt": {
                "$date": "2014-08-10T03:36:46.356Z"
            },
            "folder": "53cef2574fae0fbd7f731234",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Area of a circle",
            "num": 7,
            "onSubmit": "// I/O points\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [\"Area of a circle with radius 5.25 units is 86.590074375 units squared\"] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n  // if (ff) { fail.s(\"no style points since functional failed\"); }\n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (style.nDV != 3) { fail.s(\"you need only three variables;\", (1/4) ); }\n    if (style.nUDV > 0) { fail.s(\"you used undeclared variable(s): declare all variables;\", (1/4) ); }\n    if (style.nUUDV > 0) { fail.s(\"you declared variable(s) that were not used: use what you declare;\", (1/4) ); }\n    if (!style.hasOTAOBE) { fail.s(\"one call to alert, with a string expression parameter containing a variable;\", (1/4) ); }\n  }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);    ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick>\n<b>Write a program that will compute the area of a circle with radius 5.25 units. Print out the result in the format show below.\n</b>\n</font>\n</p>\n<p>\nIn your program, first create a variable \"pi\" and assign to it the value of pi to 5 decimal places (3.14159). Create another variable named \"radius\" and assign to it the value 5.25. Now using variables \"pi\" and \"radius\" compute the area of a circle and assign that to a new variable \"area\" ( area is pi * radius * radius ). \n<p>\nIn this program, we learn how to mix variables with strings using concatenation to make readable and explanatory output.\nYou must print out the value \"area\" embedded in a message explaining it. \nThe final output will look this way: \n<pre>\n  Area of a circle with radius 5.25 units is 86.590074375 units squared\n</pre>\nwith no period at the end.  The numbers in the output must be computed by expressions using the variables.\n</p>\n",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-01-14T13:00:28.164Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/var.areacirc.mp4"
        },
        {
            "_id": {
                "$oid": "53e6e98d85bf71071c8c1711"
            },
            "createdAt": {
                "$date": "2014-08-10T03:39:57.671Z"
            },
            "folder": "53cef2574fae0fbd7f731234",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "<b>DIY</b>: Circumference of a circle",
            "num": 8,
            "onSubmit": "// I/O points\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [\"A circle with radius 5.25 units has a circumference that is 32.986695 units.\"] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n  // if (ff) { fail.s(\"no style points since functional failed\"); }\n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (style.nDV != 3) { fail.s(\"you need to declare 3 and only 3 variables;\", (1/4) ); }\n    if (style.nUDV != 0) { fail.s(\"you used undeclared variable(s): declare all variables;\", (1/4) ); }\n    if (style.nUUDV != 0) { fail.s(\"you declared variable(s) that were not used: use what you declare;\", (1/4) ); }\n    if (!style.hasOTAOBE) { fail.s(\"use one alert, with a string expression parameter using a variable;\", (1/4) ); }\n  }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);    ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick>\n<b>Write a program that will compute the circumference of a circle with radius 5.25 units. Print out the result in the format show below.\n</b>\n</font>\n</p>\n<p>\nThe formula for circumference is pi * radius * 2 . For pi use 3.14159.  You can build this program by modifying the Area of a circle program.\n</p> \n<p>\nThe output should look like this: \n<pre>\n  A circle with radius 5.25 units has a circumference that is 32.986695 units.\n</pre>\n",
            "type": "diy",
            "updatedAt": {
                "$date": "2018-01-14T13:00:34.133Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": ""
        },
        {
            "_id": {
                "$oid": "53e6ea1485bf71071c8c1712"
            },
            "createdAt": {
                "$date": "2014-08-10T03:42:12.911Z"
            },
            "folder": "53cef2574fae0fbd7f731234",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Quadratic equation 2",
            "num": 6,
            "onSubmit": "// I/O pairs\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [5, -10] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }\n  // if (ff) { fail.s(\"no style points since functional failed\"); }\n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (style.nDV < 5) { fail.s(\"you must use at least 5 variables;\", (1/10) ); }\n    if (style.nUDV != 0) { fail.s(\"you used undeclared variable(s): declare all variables;\", (1/10) ); }\n    if (style.nUUDV != 0) { fail.s(\"you declared variable(s) that were not used: use what you declare;\", (1/10) ); }\n    if (!style.hasTTAOV) { fail.s(\"need two alerts, each with a variable as parameter;\", (7/10) ); }\n  }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);      ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick><b>Write a program that prints out the roots of the quadratic equation  for the specific case of a:2, b:10, and c:-100. Do this with two separate alert statements, each printing a single number. </b></font>\n</p>\n<p>\nLet's revisit the quadratic equation, but this time use variables to make the code easier to write and to understand.\nStart with the program you wrote for the Quadratic equation problem in the Expressions module.\n</p>\n<p>\nDeclare variables \"a\", \"b\", and \"c\". Give a the value 2, b the value 10, and c the value -100. Compute the two roots of the quadratic equation but use the variable names a, b, and c in the expressions. Assign one root to a variable \"root1\"; assign the other root to the variable \"root2\". Print out the two root variables using two separate alert statements.  Print the \"+\" root first, and then print the \"-\" root.  \n</p>\n<p>\nFor reference, the roots of the quadratic equations are  -b +/- square root of ( b^2 - 4ac )  all over 2a , and you can use Math.sqrt() to compute the square root.",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-01-14T13:00:22.99Z"
            },
            "value": {
                "correct": "2",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/var.quadratic2.mp4"
        },
        {
            "_id": {
                "$oid": "53f26d9e41b3137f5880318c"
            },
            "createdAt": {
                "$date": "2014-08-18T21:18:22.625Z"
            },
            "folder": "53cef2444fae0fbd7f731233",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "<b>DIY</b>: Wheels",
            "num": 9,
            "onSubmit": "//I/O pairs to define functional behavior\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [314] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (!style.isJOTFC) { fail.s(\"use a single alert, nothing else\"); }\n  if (!style.hasOTAOBE) { fail.s(\"write one call to alert, using a number expression\"); }\n\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick><b>\nA parking lot has 53 cars in it (each with 4 wheels) and 17 trucks (each with 6 wheels).  Write a program that prints out the total number of wheels in that parking lot.  \n</b></font>\n</p>\n<p>\nUse a single alert statement with an expression to produce the correct number by multiplying and adding appropriately.\n</p>",
            "type": "diy",
            "updatedAt": {
                "$date": "2018-02-07T12:53:51.584Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": ""
        },
        {
            "_id": {
                "$oid": "53f26f5041b3137f5880318d"
            },
            "createdAt": {
                "$date": "2014-08-18T21:25:36.788Z"
            },
            "folder": "53cef2444fae0fbd7f731233",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "<b>DIY</b>: Cake",
            "num": 10,
            "onSubmit": "// I/O pairs to define functional behavior\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [1.6153846153846154] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (!style.isJOTFC) { fail.s(\"use a single output, nothing else\"); }\n  if (!style.hasOTAOBE) { fail.s(\"write one call to alert, using a number expression\"); }\n\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick><b>\nA chocolate cake weighs 7 pounds.  It is cut into 13 equal pieces.  Write a program that will print out the weight (in pounds) of 3 pieces of cake.\n</b></font>\n</p>\n<p>\nUse a single alert statement to do this, and use an expression to compute the correct number by diving and multiplying appropriately.\n</p>",
            "type": "diy",
            "updatedAt": {
                "$date": "2018-02-07T12:53:51.585Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": ""
        },
        {
            "_id": {
                "$oid": "53f29adc41b3137f58803190"
            },
            "createdAt": {
                "$date": "2014-08-19T00:31:24.303Z"
            },
            "folder": "53cef2444fae0fbd7f731233",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "<b>DIY</b>: Pythagoras",
            "num": 12,
            "onSubmit": "// I/O pairs to define functional behavior\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [7.615773105863909] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (style.nTLFC != 1) { fail.s(\"use a single output, nothing else\"); }\n  if (!style.hasOTAOBE) { fail.s(\"write one call to alert, using a number expression\"); }\n\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick><b>\nWrite a program that will print out the length of the hypotenuse of a right triangle with side lengths 3 and 7.  \n</b></font>\n<br/>Use a single alert statement and write an expression that computes the correct number by multiplying, adding, and square rooting appropriately.  \n</p>\n<p>\nThe Pythagorean theorem is used (among other things) to compute the length of the hypotenuse of a right triangle, given the lengths of its two shorter sides.  The equation is \n<font size=+1>\n<pre>\n   a^2 + b^2 = h^2 \n\n      where h is the hypotenuse.  If we do a little algebra, we get \n\n   h = square root of ( a^2 + b^2 )\n</pre>\n</font>\n</p>\n<p>\nLike we did in the Quadratic equation program, use Math.sqrt ( ) to find the square root.\n</p>",
            "type": "diy",
            "updatedAt": {
                "$date": "2018-02-07T12:53:51.587Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": ""
        },
        {
            "_id": {
                "$oid": "53f2b77d41b3137f58803198"
            },
            "createdAt": {
                "$date": "2014-08-19T02:33:33.261Z"
            },
            "folder": "53cef2574fae0fbd7f731234",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "<b>DIY</b>: Gallons and  ounces",
            "num": 10,
            "onSubmit": "// I/O points\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [\"In 3.14 gallons there are 401.92 ounces\"] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n  // if (ff) { fail.s(\"no style points since functional failed\"); }\n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (style.nDV > 4) { fail.s(\"no need to declare more than 4 variables;\", (1/4) ); }\n    if (style.nUDV != 0) { fail.s(\"you used undeclared variable(s): declare all variables;\", (1/4) ); }\n    if (style.nUUDV != 0) { fail.s(\"you declared variable(s) that were not used: use what you declare;\", (1/4) ); }\n    if ( !( style.hasOTAOV || style.hasOTAOBE ) ) { \n      fail.s(\"use one alert, with a string expression parameter containing variables;\", (1/4) ); \n    }\n  }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick><b>\nWrite a program that computes the number of ounces in 3.14 gallons.\n</b>\n</font>\n</p>\n<p>\nTo get the result, we will produce an expression and save the evaluated value in a variable; we will use the facts that a gallon has 4 quarts, a quart has 32 ounces.   \nPrint out the results in a phrase (string) like this:\n<pre>\nIn 3.14 gallons there are 401.92 ounces\n</pre> \n(with no period at the end, and no blanks before the first \"In\" and no blanks after the ending \"ces\"). You will use string concatenation ( + ) to glue all the text strings and number expressions together inside an alert statement.\n</p>\n",
            "type": "diy",
            "updatedAt": {
                "$date": "2018-01-14T13:00:56.145Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": ""
        },
        {
            "_id": {
                "$oid": "53f2bbb541b3137f5880319a"
            },
            "createdAt": {
                "$date": "2014-08-19T02:51:33.394Z"
            },
            "folder": "53cef2444fae0fbd7f731233",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "<b>DIY</b>: Easy as 1,2,3",
            "num": 8,
            "onSubmit": "// I/O pairs to define functional behavior\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [\"one,two,three\"] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (!style.isJOTFC) { fail.s(\"use a single output, nothing else\"); }\n  if (!style.hasOTAOBE) { fail.s(\"write one call to alert, using a string concatenation expression\"); }\n\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n\n        ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick><b>\nWrite a program that takes the string \"one\" the string \"two\" and the string \"three\" and prints out all of them concatenated with commas between. \n</b></font>\n</p>\n<p>\nUse the \"+\" string operator to do this. The result will be the string \"one,two,three\" .\n</p>",
            "type": "diy",
            "updatedAt": {
                "$date": "2018-02-07T12:53:51.583Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": ""
        },
        {
            "_id": {
                "$oid": "53f8a514c2dd4a6c1786a0ad"
            },
            "createdAt": {
                "$date": "2014-08-23T14:28:36.194Z"
            },
            "folder": "53f8a24cc2dd4a6c1786a0ac",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Overview",
            "num": 0,
            "onSubmit": "var soln_inputs = [ [] ];\nvar soln_outputs = [ [true, false ] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { truVec[i] || fail.f(\"failed functional correctness\"); }\n  }\n  // check for all fn format\n  if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n  if (style.nDV > 0) {fail.s(\"no need to declared and use variables\"); }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);      ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick>\n<b>Comparisons\n</b></font>\n</p> \n<p>\nNow we return to study Boolean data in more detail.\nOne of the main uses for Boolean (true, false) data is to answer questions like \"is the value in this variable larger than the value stored in this other variable?\".\nIf we can get answers to questions like this we can make decisions that affect the control flow of our programs, and the final outcomes of them.\n</p>\n<p>\nWe ask questions like this using comparison operators (less than, equal to, greater than, etc.).  An expression using comparison operators\nwill \"answer\" the question by producing a boolean result (true, or false).\n</p>\n<p>\nTo complete this problem, type in this JavaScript program:\n<br/><b>\n&nbsp&nbsp&nbsp alert( 100 < 200 );\n<br/>\n&nbsp&nbsp&nbsp alert( 100 === 200 );\n</b><br/>\nThere are several ways you can interpret a boolean expression.  Consider the first expression here... 100 < 200.  We are in some sense stating \n\"100 is less than 200\" and asking \"is this true? or is it false?\".  Or, you may prefer to think of it as asking a question and wanting a YES or NO\nanswer: \"is 100 less than 200\" ?  Here, we expect YES (or true).\n</p>\n<p>\nSo we expect the first expression to evaluate to true, since 100 is less than 200.\nWe expect the second expression to evaluate to false, since it is not the case that 100 is the same numerical value as 200.\n</p>\n<p>\n</b>Remember to use the myMain function format for style points.<b>\n</p>",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-01-24T15:47:21.081Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/compare.overview.mp4"
        },
        {
            "_id": {
                "$oid": "53faa4ab6a97a90071d00af6"
            },
            "createdAt": {
                "$date": "2014-08-25T02:51:23.321Z"
            },
            "folder": "53cef2574fae0fbd7f731234",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "<b>DIY</b>: Pythagoras 2",
            "num": 9,
            "onSubmit": "// I/O points\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [7.615773105863909] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n  // if (ff) { fail.s(\"no style points since functional failed\"); }\n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (style.nDV != 3) { fail.s(\"you need to declare 3 and only 3 variables;\", (1/10) ); }\n    if (style.nUDV != 0) { fail.s(\"you used undeclared variable(s): declare all variables;\", (1/5) ); }\n    if (style.nUUDV != 0) { fail.s(\"you declared variable(s) that were not used: use what you declare;\", (1/10) ); }\n    if (!style.hasOTAOV) { fail.s(\"use one alert, with a variable as parameter;\", (3/5) ); }\n  }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick><b>\nWrite a program that will print out the length of the hypotenuse of a right triangle with side lengths 3 and 7.  \n</b></font>\n</p>\nIn this problem we revisit the Pythagorean theorem: a^2 + b^2 = h^2.  As before we need to compute the square root of the sum of the squares of the shorter sides of an right triangle.  This time we will declare three variables a, b, and c.  Assign the value 3 to a; assign the value 7 to b.  Then write an expression using variables a and b that will produce the length of the hypotenuse and assign that value to h.  Print out the value of h (just the number). \n</p>\n<p>\nWe need a single alert statement, and that statement will simply print the value of the variable h after you have computed and stored into h the\nproper result.\n</p>",
            "type": "diy",
            "updatedAt": {
                "$date": "2018-01-14T13:00:50.39Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": ""
        },
        {
            "_id": {
                "$oid": "5408b8188c3b19243be5d262"
            },
            "createdAt": {
                "$date": "2014-09-04T19:06:00.388Z"
            },
            "folder": "53cef2744fae0fbd7f731236",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Overview",
            "num": 0,
            "onSubmit": "var soln_inputs = [ [] ];\nvar soln_outputs = [ [\"the loop body runs\",\"the loop body runs\", \"the loop body runs\" ] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nAFL != 1) { fail.s(\"use one for loop\"); }\n    if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);      ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick>\n<b>Repetition: Loops\n</b></font>\n</p> \n<p>Loops give us major problem solving power.  Without them programs would be useful for solving only small problems, like we have been doing.  Loops allow us to write a finite number of statements but to have them executed many many (possibly infinite) times, by repeating at run-time rather than at write-time.  \n</p>\n<p>\nA \"for loop\" is designed to be used when we know we need to repeat a block of statements a specific number of times.  We call this <b>definite looping</b>; we know <i>when we write the code</i> how many times to repeat.\nWe designate the code block to repeat, and we specify a variable to count the repetitions (called the <b>loop index</b>); we give that variable a starting value (often 0); we write a boolean comparison expression to answer the question \"do we repeat again?\", and we write an expression telling how to change the value of the index at the end of each repetition (often increment by 1).\n<br/>\nTo complete this problem, type in this JavaScript program (in proper myMain format):\n<pre>\n  for ( var i=0;  i<3;  i++ ) { \n    alert(\"the loop body runs\"); \n  }\n</pre>\n</p>\n<p>\nHow many times will the alert statement get executed? \n</p>",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-01-24T15:48:41.084Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/forloop.overview.mp4"
        },
        {
            "_id": {
                "$oid": "5408c8203f84d4d07b6d0962"
            },
            "createdAt": {
                "$date": "2014-09-04T20:14:24.557Z"
            },
            "folder": "53cef2744fae0fbd7f731236",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Accumulator: Sum of nums",
            "num": 4,
            "onSubmit": "// define I/O function points\nvar soln_inputs = [ [] ];\nvar soln_outputs = [ [4950] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    if (style.nAFL != 1) { fail.s(\"use one for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);      ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick>\n<b>Write a program that will print out the sum of the integers from 1 to 99, including 1 and 99. \n</b></font>\n</p> \n<p>\nWe will use a for loop to do this.\nYou will also need an \"accumulator\", a variable that has its value bumped up each time you go through the loop body.\nSince we are summing, the accumulator will be initialized to 0 (the additive identity) outside the loop.  With a counter, the variable is bumped by some\nfixed amount (often 1).  With an accumulator, the variable is bumped up by perhaps different amounts each time it is increased.\nThink of an accumulator as a bucket.  We will accumulate a final value by adding into the bucket parts of the final amount, many times.\n</p>\n<p>\n<b>Lesson here:</b> the loop index is a variable that can be used inside the loop body; it is often used to generate a sequence of numbers, or to count how many times the loop body has run.\n</p>\n<p>\n<b>Style:</b> Use one for loop and no other loops.\n</p>",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-01-24T15:49:08.443Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/forloop.accumsum.mp4"
        },
        {
            "_id": {
                "$oid": "5408e1ca8975017b032db923"
            },
            "createdAt": {
                "$date": "2014-09-04T22:03:54.24Z"
            },
            "folder": "53cef2744fae0fbd7f731236",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Sequence of numbers",
            "num": 1,
            "onSubmit": "// define I/O function points\nvar soln_inputs = [ [] ];\nvar soln_outputs = [ [1,2,3,4,5] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    if (style.nAFL != 1) { fail.s(\"use one for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick>\n<b>Write a program that will print out the first 5 positive integers (one per alert).  \n</b></font>\n</p> \n<p>\nTo do this we set up a for loop and use the loop index as a variable that will contain the numbers in this sequence successively as we repeat the loop body.  \nThis means one good use for a for loop is to generate a sequence of numbers.\n</p>\n<p>\nStart the loop index at 1, end it when we have done the 5th body execution; we bump up the value of the loop index by 1 each time we loop.\nInside the loop body we simply alert the value of the loop index variable.  Since we start the index at 1, the first time the body executes we will get the 1 in the number sequence.  Since we increment the index by one, we will get a 2 the next time we do the loop body... and then 3, ... and so on.\n<br/><br/>\nThe lesson we want to learn in this program is: the loop index (the loop control variable) is a variable like any other in your program,\nand it's value can be accessed inside the loop body.  This is a very helpful feature for solving problems.\n<br/><br/>\n<b>Style:</b> Use one for loop and no other loops.",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-01-24T15:48:46.244Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/forloop.seqnum.mp4"
        },
        {
            "_id": {
                "$oid": "540e5d21cd837ce46e7d8963"
            },
            "createdAt": {
                "$date": "2014-09-09T01:51:29.218Z"
            },
            "folder": "53cef2744fae0fbd7f731236",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Sum of odds",
            "num": 5,
            "onSubmit": "var soln_inputs = [ [] ];\nvar soln_outputs = [ [10340] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    if (style.nAFL != 1) { fail.s(\"use one for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);         ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick>\n<b>Compute and print out the sum of all the odd integers from 17 to 204.\n</b></font>\n</p> \n<p>\nUse only one for loop and no other loops.\n</p>\n<p>\nThe lesson in this program is that the for loop index variable does not always have to be incremented by 1.\nIf we want to increment it by 2, or 5, or 10, or whatever we can specify that in the loop control information.\nTo generate odd numbers, then, we could start the loop index at 1, and increment it by 2 each time the loop \nbody executes.  This would create the sequence of values 1, 3, 5, 7, 9, etc. in the loop index variable.\n</p>",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-01-24T15:49:16.263Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/forloop.sumodds.mp4"
        },
        {
            "_id": {
                "$oid": "540e5dcacd837ce46e7d8966"
            },
            "createdAt": {
                "$date": "2014-09-09T01:54:18.588Z"
            },
            "folder": "53cef2744fae0fbd7f731236",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Product of evens",
            "num": 6,
            "onSubmit": "var soln_inputs = [ [] ];\nvar soln_outputs = [ [5160960] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    if (style.nAFL != 1) { fail.s(\"use one for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);         ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick>\n<b>Compute and print out the product of all the even integers from 4 to 16.\n</b></font>\n</p> \n<p>\nUse one for loop and no other loops.\n</p>\n<p>\nThe lesson we are learning in this program is that an accumulator can accumulate by multiplication also.\nThe previous accumulator was being increased by addition, so we started it with the value of 0.\nIn this program, since we will be accumulating by multiplying we will initialize the accumulator variable to 1 (the multiplicative identity for numbers).\n</p>",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-01-24T15:49:21.599Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/forloop.prodevens.mp4"
        },
        {
            "_id": {
                "$oid": "540e6754cd837ce46e7d899d"
            },
            "createdAt": {
                "$date": "2014-09-09T02:35:00.692Z"
            },
            "folder": "53cef2744fae0fbd7f731236",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "<b>DIY</b>: Loop index as counter",
            "num": 8,
            "onSubmit": "var soln_inputs = [ [5 ] ];\nvar soln_outputs = [ [\"body: 0\",\"body: 1\", \"body: 2\", \"body: 3\", \"body: 4\"] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    if (style.nAFL != 1) { fail.s(\"use one for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);         ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick>\n<b>Write a program that will prompt the user for a positive integer, and then produce output that looks like this:\n<pre>\nbody: 0\nbody: 1\nbody: 2\n . . .\nbody: N-1\n</pre>\nwhere N is the number the user gave.\n</b></font>\n</p> \n<p>\nFor example, if the user gives number 4 as input, then the program produces 4 lines of output, with the lines numbered 0 through 3.\n</p>\n<p>\nIt's no secret you will do this with a for loop. Each time the body executes it will print out (alert) the message \"body:  \" followed by the appropriate\ninteger.  You should use the loop index variable as your body execution counter. The main issue is to get the start/stop/increment loop parameters set up \nto count properly.\n</p>\n<p>\n<b>Style:</b> Use one for loop, and no other loops.\n",
            "type": "diy",
            "updatedAt": {
                "$date": "2018-01-24T15:49:33.731Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": ""
        },
        {
            "_id": {
                "$oid": "540e7eefcd837ce46e7d89d9"
            },
            "createdAt": {
                "$date": "2014-09-09T04:15:43.12Z"
            },
            "folder": "53cef2744fae0fbd7f731236",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "<b>DIY</b>: Truncated square roots",
            "num": 10,
            "onSubmit": "var soln_inputs = [ [] ];\nvar soln_outputs = [ [9.949, 10, 10.049, 10.099, 10.148, 10.198] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    if (style.nAFL != 1) { fail.s(\"use one for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);         ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick>\n<b>Write a program that will print the square root of each integer between 99 and 104 (inclusive). Print the square roots truncated to 3 decimal places.\n</b></font>\n</p> \n<p>\nUse one for loop and no other loops.  Output should be only numbers (no string data explaining the numbers).  Print one square root per alert statement, so your output will be \n6 numbers, one per alert.\n</p>",
            "type": "diy",
            "updatedAt": {
                "$date": "2018-01-24T15:49:47.983Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": ""
        },
        {
            "_id": {
                "$oid": "540e8250cd837ce46e7d89e0"
            },
            "createdAt": {
                "$date": "2014-09-09T04:30:08.673Z"
            },
            "folder": "53cef2744fae0fbd7f731236",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "<b>DIY</b>: Powers of 2",
            "num": 11,
            "onSubmit": "var soln_inputs = [ [] ];\nvar soln_outputs = [ [2,4,8,16,32,64,128,256,512,1024] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    if (style.nAFL != 1) { fail.s(\"use one for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);         ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick>\n<b>Write a program that will print the first 10 powers of 2, starting with 2^1.\n</b></font>\n</p> \n<p>\nDo not use the Math.pow function.  Instead, use the\nloop index tp count body executions (you will do 10 of those), and use an accumulator to build the powers you need at each step.\nWe can start the accumulator at 2 (2^1).  After printing the value in the accumulator in the loop body, we double the value stored in \nthe accumulator (we multiply it's value by 2).  When we are done, the accumulator will have accumulated the value 2^10, but along the way\nin each loop iteration it will have accumulated 2^1, 2^2, 2^3, ... 2^i  (for the ith iteration), etc.\n</p>\n<p>\nAnother way to do this is use the loop index as an accumulator, but this is a bit more obscure.\nStart the loop index at 2, and then when it is time to increment the index, instead of the common i++ (increment by 1) we\ncan double the loop index ( i *= 2 ).  The \nlesson here is that the loop index does not have to be incremented by 1... it can be changed in any way you need it to be.\nSo loop index starts at 2 (and gets printed).  It then becomes 2*2, and then (2*2)*2... and so forth.\nDoing the problem this way, the loop has to end when it goes past 2^10.\n</p>\n<p>\nBy the way, 2^10 is 1024.  This is the value we means in \"computer speak\" when we say 1K.  The K means roughly 1000,\nbut really is 2 to the 10th power.  We do everything in binary (base 2).\n</p>\n<p>\n<b>Output:</b> Your output should be numbers only, no string data explaining the numbers.  You will have 10 numbers, one per alert.\n</p>\n<p>\n<b>Style:</b> Use one for loop and no other loops.",
            "type": "diy",
            "updatedAt": {
                "$date": "2018-01-24T15:50:01.748Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": ""
        },
        {
            "_id": {
                "$oid": "541646a76ba011bd0533f7c0"
            },
            "createdAt": {
                "$date": "2014-09-15T01:53:43.976Z"
            },
            "folder": "53cef2c54fae0fbd7f731238",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Overview",
            "num": 0,
            "onSubmit": "var soln_inputs = [ [] ];\nvar soln_outputs = [ [1,4,9,16,25,\"while loop is done\"] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF != 1) { fail.s(\"use one while loop\"); }\n    if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                  ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick>\n<b>Repetition: While Loops\n</b></font>\n</p> \n<p>\nA second type of loop statement in JavaScript is the <b>while</b> loop.  \nA while loop is less rigidly structured than a for loop; \nin a while loop we have to manually set up and maintain any loop index variables, counters, etc. we might need as part of the code in the loop body.\nWe use while loops primarily for what we call <b>indefinite looping</b>, where we do\nnot know (when we write the code) how many times the loop body will need to execute.  \n</p>\n<p>\nIt should be noted that these loop forms (for, while) are notational conveniences.  We use for loops <i>primarily</i> for definite looping,\nand we use while loops <i>primarily</i> for indefinite looping; the syntax of each is set up to help create these patterns easily.  \nHowever, computationally they are equivalent in their capabilities.\nAnything we can do with a <i>for</i> loop, we can do with a <i>while</i> loop as well, and <i>vice versa</i>.\nThis means we can do definite loops with <i>while</i> ( but a <i>for</i> loop would be more convenient ). We can also do indefinite looping with a for loop (but\na while would be easier).  It is a bit more common to use a while loop for definite looping than it is to use a for loop for indefinite.\nWe will see this in the problems in this folder.\n</p>\n<p>\nAs with <i>for</i> loops we will write a boolean comparison expression to answer the question \"should we execute the loop body another time?\" ; this expression will usually examine the variables being used in the loop body.\n</p>\n<p>\nTo complete this problem, type in this JavaScript program (remember to use the myMain function format for style points):\n<pre>\n  var x = 1; // loop index varible\n  while ( x <= 5 ) { \n    alert ( x*x ) ; \n    x = x + 1 ;  // increment the loop index\n  }\n  alert(\"while loop is done\");\n</pre>\n\nThis is a definite loop; it is set up to execute the loop body 5 times. Note that the loop index variable (x) we had to set up and \nincrement ourselves.  We started x at 1, and stopped when it became larger than 5. In a <i>for</i> loop, this bookkeeping is done automatically for us.\nFor this while loop, we print the square of the index variable each time we execute the loop body.  Thus, the output is a sequence of \nthe squares of the first 5 positive integers.\n</p>",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-02-07T13:02:50.131Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/while.overview.mp4"
        },
        {
            "_id": {
                "$oid": "54179cfcf4c3c15867b3c1ff"
            },
            "createdAt": {
                "$date": "2014-09-16T02:14:20.52Z"
            },
            "folder": "54179a21f4c3c15867b3c1fe",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Overview",
            "num": 0,
            "onSubmit": "var soln_inputs = [ [] ];\nvar soln_outputs = [ [10] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 0) { fail.s(\"use no for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                            ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick>\n<b>More about Functions\n</b></font>\n</p> \n<p>\nWe now revisit the abstraction called a function.  We have been writing and using a simple function ( myMain ) for a week or two now.  We have also been using functions that come with JavaScript (Math.sqrt, Math.floor, etc.) since nearly the beginning.  We will now learn more about how to write and use function like Math.sqrt() where we pass in some information and get a result back.  \nWe wrote one back in module on simple functions (it cubed its parameter and returned it).  Now we will practice more.\n</p>\n<p>\nWe will call the functions we write here simple <i>utility functions</i>.  They will be handy for asking (and answering) small but useful questions like \"is this number an integer\" or \"is this number odd\" in our programs as we progress.\n</p>\n<p>\nWe write a simple utility function in a way very similar to how we are writing <i>myMain</i>.  However, since we are passing information\nin (like we do when we call Math.sqrt(4) for example) for the function to use while computing a result, we will have to specify a\n<i>parameter</i>.  Also, since the point of a utility function is to get some result back, we will need to add a <i>return</i> \nstatement to the body of the function when we define it.\n</p>\n<p>\nTo complete this problem, type in and execute this code:\n<pre>\n\"use strict\";\n\nfunction myMain ( ) {\n   var x = 5;\n   var dubx = double(x);\n   alert(dubx);\n}\n\nfunction double ( num ) {\n   var val = num*2;\n   return val;\n}\n\nmyMain();\n</pre>\nNote that to do these programs with our own functions, we will need to write the myMain( ) function as we have been, and we will also write\nanother function (or several more).  These extra functions will be called by the code in the body of myMain.\n</p>",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-02-13T15:52:16.769Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/utility.overview.mp4"
        },
        {
            "_id": {
                "$oid": "5417b56bf4c3c15867b3c201"
            },
            "createdAt": {
                "$date": "2014-09-16T03:58:35.313Z"
            },
            "folder": "54179a21f4c3c15867b3c1fe",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Function isEven ( n )",
            "num": 2,
            "onSubmit": "var soln_inputs = [ [4,3,-6,-17,0] ];\nvar soln_outputs = [ [16,\"nope\",36,\"nope\"] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { truVec[i] || fail.f(\"failed functional correctness\"); }\n  }\n  // check for all fn format\n  if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                            ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick>\n<b>Write a function called \"isEven\" that will be passed a number as parameter. \nIf that number is an even integer the function will return true; otherwise the function returns false.\n</b></font>\n</p> \n<p>\nThis function is similar in structure and in use to \"isInt\" that we just wrote.  We can also use the mod operator to determine even; remember that\nis a number is even, it is divisible by 2 with no remainder.\n</p>\n<p>\nOnce you have written and tested isEven, write a myMain function to exercise your isEven function.\nIn myMain write a loop that will ask the user for a number (don't worry about validating\nthe input, just assume the user gives a number).\nPrint the square of the number if it is even.\nIf it is not even, print \"nope\" and go to the next input.  Stop looping when the user gives 0 as input.  Make sure that when the user does give a 0, the program stops without printing the square of that 0... in other words, do not\ntreat that 0 as an even number before stopping.\n</p>\n<p>\n<b>Style:</b>Use one while loop, and no for loops.  \n</p>\n<p>\nFood for thought... how would you do this with a for loop?  It seems better to use a while, since we dont know how many\ntimes we need to loop before the user gives a 0.\n</p>\n<p>\nMore food for thought... if isEven(n) tells me \"false\" meaning n is not even, is it odd?\n</p>",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-02-13T15:52:29.005Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/utility.isEven.mp4"
        },
        {
            "_id": {
                "$oid": "5418aea75326921e25fef90f"
            },
            "createdAt": {
                "$date": "2014-09-16T21:41:59.484Z"
            },
            "folder": "53cef2c54fae0fbd7f731238",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "<B>DIY</b>: Sum until 1000",
            "num": 6,
            "onSubmit": "var soln_inputs = [ [] ];\nvar soln_outputs = [ [45, 1035] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF != 1) { fail.s(\"use one while loop\"); }\n    if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick>\n<b>Write a program that will add up consecutive integers starting at 1 and print out the integer that causes the sum to go over 1000 when it is added in.  \nThen print out the sum in a second alert statement.\n</b></font>\n</p> \n<p>\nIn this program, we are not stopping after a set number of repetitions (like in a for loop) and we are not stopping when the user signals to end.\nRather, we will end the loop when some condition on the program data becomes true.  In this case, we will watch an accumulator variable (the sum)\nto see when it's value exceeds some limit (1000).\n</p>\n<p>\nFor example, let's say we wanted to do this problem using 12 rather than 1000 as our sum to watch for.\nWe are going to sum up 1, 2, 3, 4, 5, 6, 7, etc. until our sum becomes larger than 12. \n<pre>\nWe start with 1, add it in and get sum of 1 (not larger than 12)\nthen add 2 to get sum of 3 (not larger than 12)\nthen add in 3 to get sum of 6 (not larger than 12)\nthen add in 4 to get sum of 10 (not larger than 12)\nthen add in 5 to get sum of 15 (... IS larger than 12 so stop summing / looping) \n\nthen print 5 (the number that when added in made the sum go over 12) \nthen print 15 (the sum when we stopped).\n</pre>\n</p>\n<p>\nYou must do this with a while loop.  \nYou can end the loop with whatever method you prefer.\nYou will need to set up a counter variable to use for generating the sequence of integers that you are summing.\nYou will need an accumulator variable for the sum.\n</p>\n<p>\n<b>Style:</b> Use a while loop.  Use no for loops.  There is no user input, so we won't need data validation.\n</p>",
            "type": "diy",
            "updatedAt": {
                "$date": "2018-02-06T15:22:13.597Z"
            },
            "value": {
                "correct": "2",
                "style": "1"
            },
            "vidURL": ""
        },
        {
            "_id": {
                "$oid": "5418bb005326921e25fef930"
            },
            "createdAt": {
                "$date": "2014-09-16T22:34:40.855Z"
            },
            "folder": "53cef2c54fae0fbd7f731238",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "<b>DIY:</b> Fizz Buzz",
            "num": 8,
            "onSubmit": "var soln_inputs = [ [] ];\nvar soln_outputs = [ [1,2,\"fizz\",4,\"buzz\",\"fizz\",7,8,\"fizz\",\"buzz\",\n                      11,\"fizz\",13,14,\"fizzbuzz\",16,17,\"fizz\",19,\"buzz\"] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF != 1) { fail.s(\"use one while loop\"); }\n    if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick>\n<b>Write a program that will print out the integers from 1 to 20, with these exceptions: if the number is a multiple of 3 print \"fizz\" instead of the number, if the number is a multiple of 5 print \"buzz\" instead of the number, if the number is a multiple of both 3 and 5 print \"fizzbuzz\" instead of the number.\n</p>\n</b></font>\n</p> \n<p>\nUse a while loop for this program, and do NOT use the \"break out\" form of ending the loop.  Do it with a loop index variable and\nand condition that tests it for the stopping value. You will also be using the mod (%) operator to determine if a number is a multiple  of 3 and/or 5.  Don't forget to increment the index variable you are using to control the loop (or you will get an infinite loop).\n</p>\n<p>\nWe could (and most likely would) do this with a for loop (since there is a definite number of repetitions), but we want to \npractice while loops. So here you will do a definite loop with the while syntax.  \n</p>\n<p>\n<b>Style:</b> Use a while loop.  Use no for loops. Do not use the \"break\" out form of while loop. You will also need some form of\nconditional statement inside the loop; a cascade might be a good thing to look at (not a switch).\n</p>\n",
            "type": "diy",
            "updatedAt": {
                "$date": "2018-02-06T15:22:44.29Z"
            },
            "value": {
                "correct": "2",
                "style": "1"
            },
            "vidURL": ""
        },
        {
            "_id": {
                "$oid": "54289167c8b4714e17ed8caf"
            },
            "createdAt": {
                "$date": "2014-09-28T22:53:27.367Z"
            },
            "folder": "5428968fc8b4714e17ed8cc7",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Overview",
            "num": 0,
            "onSubmit": "var soln_inputs = [ [\"unc\"] ];\nvar soln_outputs = [ [\"unc: OK\"]  ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                       ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick>\n<b>Overview: Encapsulating validation\n</b></font>\n</p> \n<p>\nWe will now put our new knowledge of simple functions to work making input validation look cleaner in our programs.\nThe idea is that instead of asking 2 or 3 individual questions (like is this an integer? is this odd? etc.) in our main program\nwhen the user gives input, we will put the questions together in the body of a new function named something like \"validate\".\nWe will pass the input from the user into the validate function as a parameter; the function will return a message indicating\nwhat went wrong (or something like \"ok\" if all went right).\n</p>\n<p>\nTo complete this overview write the following program and run it:\n<pre>\n\"use strict\";\nfunction myMain() {\n   var inp = prompt(\"input?\");\n   var result = validate(inp);\n   alert(result);\n}\n\nfunction validate ( userInput ) {\n   var retVal = userInput + \": OK\" ;\n   return retVal;\n}\n\nmyMain();\n</pre>\nNow this program is simply declaring all inputs to be OK, but it shows the basic structure we will need.\n</p>",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-02-19T13:44:23.899Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/validate2.overview.mp4"
        },
        {
            "_id": {
                "$oid": "542b74383d0530c93309a382"
            },
            "createdAt": {
                "$date": "2014-10-01T03:25:44.143Z"
            },
            "folder": "542b73843d0530c93309a381",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Overview",
            "num": 0,
            "onSubmit": "var soln_inputs = [ [] ];\nvar soln_outputs = [ [5, 5] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  //if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  //else {\n    //if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    //if (style.nWLF != 2) { fail.s(\"use 2 while loops\"); }\n    //if (style.nFLAP > 0) { fail.s(\"use no for loop\"); }\n  //}\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                        ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick>\n<b>Scope\n</b></font>\n</p> \n<p>\n\"Scope\" is the term we use for the parts of a program in which a particular declared variable is visible (useable).  \"Scope rules\" are the decision procedures \nthat allow us to determine what storage location in memory is denoted when we see a variable name in our code.  \nIn other words, when you see a variable used in an expression,  you can decide which \"var\" declaration is being used. \n</p>\n<p>\nIt is possible, for example, to have several lines that look like \"<b>var x ;</b>\" in your code.   \nWhen we see something like  \"<b>x = 5 ;</b>\" we need to know which of the several \"<b>var x ;</b>\" lines is the variable being referenced in the expression.\nIn JavaScript we have two main scopes: <b>global</b>, and <b>local</b>. \n</p>\n<p>\n<b>Global scope</b> is the collection of variables and names (function names) declared outside of all function definitions.\n<br/>\nWe can have code statements at the global level, and\nwe can have variable declarations at the global level. A global variable can be seen and used inside any function, as well\nas in code at the global level.\n</p>\n<p>\n<b>Local scope</b> is the collection of variables and names declared inside a function definition (this includes the parameters).\n<br/>\nA local variable can be seen and used by any code that is inside the function it is declared in, but it is invisible (undefined) \nin code that is global, or inside other function declarations.\n</p>\n<p>\nWe are not going to use global code in most of our programs.  For these in this section, where we are specifically learning about\nglobal vs. local, we will write and use some.\n</p>\n<p>\nTo complete this overview, type in and run this program:\n<pre>\n\"use strict\"; \n\nvar gx = 5; // global var declaration\n\nfunction myMain() {\n  alert( gx ); // use of global var from inside local function scope\n}\n\nalert(gx);  // use of global var from global scope\nmyMain();\n</pre>\nHere the variable \"gx\" is in the global scope (we say \"gx is a global variable\") because it is declared not inside any function.\nSince it is global, we can use it inside any function.  Hence, we can print our its value from inside of myMain.  We can also print its value\nat the global level.  \n</p>\n<p>\nNote also that the name \"myMain\" is also a global name; this is why the call to myMain is outside any function as well.\nThat call is a global code statement.  For most of our programs, that is the only global executable statement we will have.\nIn this code, we have two global executable statements: the alert, and then the call to myMain.\n</p>",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-02-13T15:56:06.185Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/scope.overview.mp4"
        },
        {
            "_id": {
                "$oid": "54321c8d5132c62a2a2c5ba9"
            },
            "createdAt": {
                "$date": "2014-10-06T04:37:33.763Z"
            },
            "folder": "542b73843d0530c93309a381",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Local vs. local",
            "num": 3,
            "onSubmit": "var soln_inputs = [ [] ];\nvar soln_outputs = [ [10] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  //if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  //else {\n    //if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    //if (style.nWLF != 2) { fail.s(\"use 2 while loops\"); }\n    //if (style.nFLAP > 0) { fail.s(\"use no for loop\"); }\n  //}\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                           ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick>\n<b>Write a program that shows how locals in one function are not seen in another function.\n</b></font>\n</p>\n<p>\nThe local variables in one function cannot be seen or used in another function.  Scope rules says resolving a name\nlooks locally in the function where the name is used, and then globally.  Use of a name in one function cannot refer to storage\ncreated inside another function.\n</p>\n<p>\nWhen we need to communicate values from one function to another , we do it  with parameter passing (and the return statement).\n</p>\n<p>\nIn this program we will create in myMain a variable \"num\" and put 5 into it.\nWe will declare a variable \"num\" at the global lever and put 10 into it.\nThen write a function \"helper\" that takes no arguments; helper will print the value of \"num\" and return.\nCall helper in myMain.  When it runs you will see that in function helper, the \"num\" in myMain is not seen.\nRather, helper see the global \"num\".\n",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-02-13T16:06:33.607Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/scope.localVsLocal.mp4"
        },
        {
            "_id": {
                "$oid": "543463ce5132c62a2a2c5edc"
            },
            "createdAt": {
                "$date": "2014-10-07T22:06:06.563Z"
            },
            "folder": "53cef3104fae0fbd7f73123d",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Overview",
            "num": 0,
            "onSubmit": "var soln_inputs = [ [] ];\nvar soln_outputs = [ [5,\"hello\"] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                 ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick>\n<b>Basic Objects: Structured data\n</b></font>\n</p> \n<p>\nObjects are collections of data with \"tags\" to identify the components.\nYou can think of an object as a container full of named data items.  The components of an object are called its \"fields\" or \"properties\".\nLater we will see that objects can contain functions as well as data, but for now we will think of them as a wrapper around a\ncollection of named data items.  Although the data items in an object are called \"fields\" or \"properties\" we can also think of them\nas variables.  They will behave like variables... we will be able to store data into them, and retrieve data from them, and use them in\nexpressions.\n</p>\n<p>\nWe will start with object literals.  An object literal is a way of specifying an object value directly, like a constant... like 5 is a number literal or\n\"go heels\" is a string literal.\n</p>\n<p>\nTo complete this problem type in and run this code:\n<pre>\n\"use strict\";\n\nfunction myMain() {\n   alert( {a:5, b:\"hello\"}.a );\n   alert( {a:5, b:\"hello\"}.b );\n}\n\nmyMain();\n</pre>\nHere, the object literal (value) is  {a:5, b:\"hello\"} which contains two fields, tagged \"a\" and \"b\".  The \"dot notation\" is used to select a field.\nThus,  {a:5, b:\"hello\"}.a says to select the value of the field tagged \"a\" from the object, and the alert will print 5.\n</p>\n<p>\nNow type in the following code:\n<pre>\n\"use strict\";\n\nfunction myMain() {\n  var obj = {a:5, b:\"hello\"};\n  alert( obj.a );\n  alert( obj.b );\n}\n\nmyMain();\n</pre>\nIf you run this (or submit it for score) you will see that it does the same thing as the first form.  In this second form, we create a variable and store the object\nliteral into it (same as doing \"var x = 5;\" with a number literal).  We now see that the dot notation, to select a field from an object, can be used after a variable name also.\nThis second form is by far the more heavily used way to create and access objects.\n</p>\n<p>\nEven though we saw that objects do have literal values (like the {a:5, b:\"hello\"} ) there is a difference between a literal object and a literal number data value.  A number literal does not\nhave parts, or components; it is unstructured ... it has only one part.  In contrast, objects have parts -- they are constructed from components (the fields) and they are organized.\nThey are what we call <b>structured data</b>.  We will see that you can used an object as an abstract collection (by referring to the variable containing the object) or you can\nuse a piece of an object... you can access portions of the structure.  This is what the dot notation does.\n</p>",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-02-19T13:24:38.61Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/basicobjs.overview.mp4"
        },
        {
            "_id": {
                "$oid": "544471b016e2d09e7a7e0db4"
            },
            "createdAt": {
                "$date": "2014-10-20T02:21:36.404Z"
            },
            "folder": "53cef3104fae0fbd7f73123d",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Construct person object",
            "num": 4,
            "onSubmit": "var soln_inputs = [ [1234,\"smith\",32,15.75, 2345,\"jones\",17.5,10, 3456,\"miller\",25.60,40] ];\nvar soln_outputs = [ [504,175,1024] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nTFD < 2) { fail.s(\"must have at least 2 top level function definitions\"); }\n    if (style.nWLF != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                         ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick>\n<b>Write a program that will created 3 objects to represent 3 different people (employees) and use those objects to compute \ntotal pay for each person.\n</b></font>\n</p> \n<p>\nIn this program we will see how a function can be used to create and return (manufacture) an object.  A function that manufactures\nobjects is called a \"constructor\".\n</p>\n<p>\nWrite a program that has two functions: myMain (with no arguments) and makePersonObject (with no arguments). In function makePersonObject you will first create an empty object and then query the user for 4 pieces of information: an id number, a name, number of hours worked (allow non-integer) and hourly pay rate (as a positive real number) in that order. No need to validate the user input. The user input values go into 4 fields in the object (with tags id, name, hours, payrate). When it is filled, makePersonObject will return the object. \n</p>\n<p>\nIn myMain call the makePersonObject function 3 times, and each time put the returned object into a new different variable.\nWhen that is done, print out the total pay for each person (using a separate alert statement for each person). Do this by accessing the hours fields and payrate fields and doing the math. \n</p>",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-02-19T13:25:16.143Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/basicobjs.constructor.mp4"
        },
        {
            "_id": {
                "$oid": "54449cfe16e2d09e7a7e0dcc"
            },
            "createdAt": {
                "$date": "2014-10-20T05:26:22.322Z"
            },
            "folder": "53cef2e94fae0fbd7f73123b",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Average of randoms",
            "num": 3,
            "onSubmit": "var soln_inputs = [ [] ];\nvar soln_outputs = [ [50] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 1) { fail.s(\"use one for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                         ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick>\n<b>Write a program to generate 1,000,000 random numbers between 0 and 100 (include 0, exclude 100) and compute the average.  \nPrint the average rounded to the nearest integer.\n</b></font>\n</p> \n<p>\nWe want to make sure the random numbers are floating point values (in other words, don't convert the output from the scaled Math.random to\ninteger).  We are not converting to integer until after the average is taken.\nNote that we are <b>rounding</b> the final average for output (not truncating).\n</p>\n<b>For thought:</b> given the uniform distribution, what do you think the average should be for a big pile of random numbers between 0 and 100?\n\n</p>",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-03-01T21:04:54.877Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/rannum.ranavg.mp4"
        },
        {
            "_id": {
                "$oid": "5444a49216e2d09e7a7e0dcf"
            },
            "createdAt": {
                "$date": "2014-10-20T05:58:42.52Z"
            },
            "folder": "53cef2e94fae0fbd7f73123b",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Overview",
            "num": 0,
            "onSubmit": "var soln_inputs = [ [] ];\nvar soln_outputs = [ [0.1] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                         ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick>\n<b>Overview: Random numbers\n</b></font>\n</p> \n<P>\nRandom numbers are important mathematically for many problem solutions.  Statistical modeling depends on them to simulate the\nunpredictable behavior seen in physical systems that we study by writing computer programs -- we call such programs \"simulations\".  Programming languages contain the capability to generate\nrandom numbers when a program is executing.  In JavaScript, we use the function Math.random() to do this.\n</p>\n<p>\nMath.random will generate and return a single random number between 0 and 1.  It might return 0, but it will never return 1.\nRemember your interval notation from algebra? We write [0-1) for the range of the Math.random function, meaning it\nproduces a number x where 0 <= x < 1 .\n<p>\n<p>\nMath.random will return a different number every time it is called, but the value will always be in that range.  The numbers will be distributed uniformly (evenly) over that range, meaning the probability of getting any particular number with in the [0-1) range is the same as the probability or getting any other particular number.  \n</p>\n<p>\nIf you run a program that calls Math.random() many times, and graph the output with something like a bar chart, it will be flat (showing the uniformity)... it will NOT follow some other distribution shape such as a bell curve.\nIf you need a distribution other than uniform, you end up writing a program that uses Math.random but biases the output numbers as you need.\n</p>\n<p>\nType the following code into the Bricks editor window and execute it:\n<pre>\n\"use strict\";\n\nfunction myMain() {\n  var ranNum = Math.random();\n  alert(ranNum);\n}\n\nmyMain();\n</pre>\nRun this code several times locally to see how Math.random behaves.  Then submit it for score.",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-03-01T21:04:39.099Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/rannum.overview.mp4"
        },
        {
            "_id": {
                "$oid": "5444a6ca16e2d09e7a7e0dd1"
            },
            "createdAt": {
                "$date": "2014-10-20T06:08:10.706Z"
            },
            "folder": "53cef2e94fae0fbd7f73123b",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Alter upper end of range",
            "num": 1,
            "onSubmit": "var soln_inputs = [ [] ];\nvar soln_outputs = [ [5.0] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                         ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick>\n<b>Write a program that will generate a single random number between 0 and 50 (but never quite being 50) and print it.\n</b></font>\n</p> \n<p>\nMath.random produces numbers in the range [0,1).  Here we need numbers in an expanded range [0,50), with the lower end still \nat 0. We want the distribution to remain uniform.  So to do this, we can simply generate a random number and multiply\nit by a factor that will expand the range upward.  The obvious factor (in this case) is 50.  All numbers generated \nby Math.random are then used as a percentage, telling how far into the range [0,50) to go to get the\nfinal random output.\n</p>\n<p>\nLet's reason about the range that results after this scaling.  Since Math.random might generate a 0, and since 0*50 is zero, the scaling might also generate 0 (as we wish).  Since Math.random with almost (but not quite) generate a 1, the scaling will generate (almost 1)*50, or almost but not quite 50 (as we wish).\n</p>\n<p>\nOne last comment... mathematically, we are talking about numbers with precision after the decimal point here (floating point, or real number values).  We are not trying to generate random integers in this program.  We will do that in later programs.\n</p>\n",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-03-01T21:04:44.523Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/rannum.alterupper.mp4"
        },
        {
            "_id": {
                "$oid": "5444a94b16e2d09e7a7e0dd3"
            },
            "createdAt": {
                "$date": "2014-10-20T06:18:51.516Z"
            },
            "folder": "53cef2e94fae0fbd7f73123b",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Random integers (and range change)",
            "num": 2,
            "onSubmit": "var soln_inputs = [ [] ];\nvar soln_outputs = [ [10,9] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                           ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick>\n<b>Write a program that will generate a single random integer between 0 and 100 (including both) and print it. \nThen generate a single random integer between 5 and 25 (including both) and print it.\n</b></font>\n</p> \nThis problem illustrates two new capabilities: generating random <b>integers</b>, and <b>moving the lower range up from 0</b>. \n</p>\n<p>\nFor integers, we will use Math.floor to take a random real number and make it integer. Note the twist here... the integer range is [0,100], meaning we want to include the upper end (100). Since Math.random will never generate exactly 1, if we scale the range by multiplying by 100, we will never quite get 100 and then Math.floor will back that down to the integer 99. So if we want 100 as possible output, we must scale to (almost) 101 and let Math.floor truncate to 100.\n</p>\n<p>\nFor the second output, we note that we need to shift the range up 5 from 0. The high end of the range we want is 25, so if we generate a number between 0 and 20, then add 5 we get a range of 5 to 25. So we can scale the range by multiplying the output of Math.random, and we can shift the range by adding to the result of Math.random (or the result of Math.floor(scaled random).\n</p>\n",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-03-01T21:04:49.927Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/rannum.ranint.mp4"
        },
        {
            "_id": {
                "$oid": "54470ca816e2d09e7a7e10c8"
            },
            "createdAt": {
                "$date": "2014-10-22T01:47:20.708Z"
            },
            "folder": "53cef2e24fae0fbd7f73123a",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "For loops for systematic access",
            "num": 2,
            "onSubmit": "var soln_inputs = [ [ ]  ];\nvar soln_outputs = [ [2,3,5,7,11,13,17,19,23,29] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 1) { fail.s(\"use one for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                   ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick>\n<b>Write a program that will go through an array item-by-item, from the beginning, and print each element.\n</b></font>\n</p> \n<p>\nWe will create an array containing the first 10 prime numbers (with 2 being the first prime).\nDo this with a variable declaration and a <i>array literal</i> to initialize that variable.\n</p>\n<p>\nNeeding to access every element in an array, systemaically, is a very common and heavily used programming pattern.  We use a for loop to dom it, as we know the size of the array (we know\nexactly how many elements we need to access).  Inside the for loop body, we handle one element, and we use the loop index variable to designate which array slot number\nwe are dealing with each iteration.\n</p>\n<p>\nTo print the array elements, use a for loop that runs from 0 up to (but not including) the length\nof the array.  This means if the array length is 10, then the for loop runs from 0 to 9.\nHowever, we will use the length expression in loop control -- rather than the literal 9, or 10 -- since that is more general.\nThen in the loop body, we use the loop index variable as the expression in the subscript square brackets to get the value stored in the array slot.\n</p>",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-03-01T21:03:58.036Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/arrays.sysaccess.mp4"
        },
        {
            "_id": {
                "$oid": "5447120816e2d09e7a7e10cf"
            },
            "createdAt": {
                "$date": "2014-10-22T02:10:16.032Z"
            },
            "folder": "53cef2e24fae0fbd7f73123a",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Overview",
            "num": 0,
            "onSubmit": "var soln_inputs = [ [ ]  ];\nvar soln_outputs = [ [4, 7, \"smith\", -4.25, true, true, true, -29.75, -4.25, -4.25, 7 ] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                   ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick>\n<b>Arrays: Organizing data\n</b></font>\n</p> \n<p>\nArrays are structured data, meaning a way to organize a collection of data so that the components\nmay be systematically accessed.\nIt also is an abstraction, meaning we can deal with the entire data collection as a unit (as well as access\nthe individual elements in the collection).\n</p>\n<p>\nWe can think of an array as a numbered collection of storage slots.  The numbers begin with 0, and go upwards by 1.  An array has a name, like a simple\nvariable, and is declared like a variable.  But unlike a simple variable, to store or retrieve a data value we must specify the slot number (called the \"index\").\nWith an array, we must keep separate the difference between the slot number and the data value stored in that slot.  Slot numbers are always integer (type number);\nthe data stored in the array slot itself can be any type (including an object, or even another array as we will see).\n</p>\n<p>\n<a target=\"blank\" href=\"http://www.unc.edu/~stotts/comp110/pix/arrayCar.jpeg\">\nHere is an array of cars</a> over at the Carolina Inn.  In slot 2 is a silver Volvo.  In slot 3 is a white Cadillac.  It's not difficult with physical cars to see the difference \nbetween the integer 2 (slot number) and a Volvo (\"data\" stored in the slot). There will be a bit more confusion when we want to store number data in array slots that\nare numbered. .\n</p>\n<p>\nWe can also think of an array as a row of mail boxes.  Each box has a number (address), and contents (the mail). We will have syntax in JavaScript to\nspecify the address, and different syntax to open the box at an address and put in (take out) the mail.  To open and use a mailbox (array slot) we\nput square brackets after the array variable name (like \" arr[ ... ] \" ).  To specify an address (slot number) we put an expression that evaluates to an integer\ninside the square brackets (like \" arr[ 5 ] \" or \" arr[ x+3 ] \" ).\n</p>\n<p>\nType in and execute this code (it is global code, that's ok here):\n<pre>\n\"use strict\";\n\nfunction myMain() {\n   var data = [ 7, \"smith\", -4.25, true ];\n   alert(data.length);  \n   alert(data[0]);\n   alert(data[1]);\n   alert(data[2]);\n   alert(data[3]);\n   alert(data[10-7]);\n   alert( data[10 - data[0] ] ) ;\n   alert(data[0] * data[2]);\n   alert(data[Math.sqrt(4)]);\n   var x = 2;\n   alert(data[x]);\n   var arr = data;  // copies the entire array as a whole\n   alert(arr[0]);\n}\n\nmyMain();\n</pre>\nTo know how many items are in an array, use the \"length\" property.  For the variable \"data\" above the \nexpression \"data.length\" tells how many items are stored in that array (in this case, 4 elements).\n</p>\n<p>\nTo access an array element we use an expression inside \"[\" \"]\" square brackets.\nThe expression must evaluate to a non-negative integer.\nIn this example we use mostly integer literals; in future programs we will use variable names, as well\nas more complex expressions like 2*x +1, etc.\n</p>\n<p>\nAlso, arrays subscripts (slots numbers) always begin with 0.  \nThis creates a bit of confusion until you are used to it, since\nthe first element in the array is at slot 0.  An array with 2 items in it will use subscripts 0 and 1.  Just\npay attention when you write code and think carefully about the expressions you use for subscripts.\nIn the example above, we see that arr has 4 elements and uses slot numbers 0 through 3.\n</p>",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-03-01T21:03:46.096Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/arrays.overview.mp4"
        },
        {
            "_id": {
                "$oid": "5447224916e2d09e7a7e10d7"
            },
            "createdAt": {
                "$date": "2014-10-22T03:19:37.342Z"
            },
            "folder": "53cef2e24fae0fbd7f73123a",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Average of primes",
            "num": 4,
            "onSubmit": "var soln_inputs = [ [ ]  ];\nvar soln_outputs = [ [12.9] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 1) { fail.s(\"use one for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                   ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick>\n<b>Write a program that will print out the average of the first 10 primes (with 2 as first prime).\n</b></font>\n</p> \n<p>\nWe are going to use an array to do this.  As in an earlier problem, we will first\ncreate an array that contains the first 10 primes.\nThen we will systematically access every element in the array, from slot 0 to the last,\nand sum up all the values stored in the array.  This will be the same as an accumulator pattern we\nhave used many times before.\n</p>\n<p>\nOnce we have the sum, and the for loop ends, we compute the average by dividing the sum by the number of\nelements we summed up.  We will use the length of the array to divide (i.e.: we do not simply divide by the constant 10).\n</p>",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-03-01T21:04:09.248Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/arrays.avgprimes.mp4"
        },
        {
            "_id": {
                "$oid": "5447254516e2d09e7a7e10db"
            },
            "createdAt": {
                "$date": "2014-10-22T03:32:21.042Z"
            },
            "folder": "53cef2e24fae0fbd7f73123a",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Even numbers",
            "num": 3,
            "onSubmit": "var soln_inputs = [ [ ]  ];\nvar soln_outputs = [ [0, 2, 12, 398, 1996] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 1) { fail.s(\"use one for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                   ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick>\n<b>Write a program that will put the first 1000 positive even numbers into an array, from smallest to largest (let's assume 0 is even\nand start with that). Print out selected elements when done.\n</b></font>\n</p> \n<p>\nWe saw that we can load up an array dynamically with input values given by the user.\nIn this program, we are going to compute values and store them one-by-one into successive array slots. \nWe will use a for loop to do the work, since we know we need to create and store 1000 data values.\nWe will use the loop index variable to tell us what slot number to store the even number into, and\nthe loop index variable will start at 0 and increment by 1 each iteration.\n</p>\n<p>\nWe will need a counter of some sort to generate the even numbers in order, and inside the body of the\nfor loop we will assign the current even number to the current array slot.  We will then compute the next even\nnumber.\n</p>\n<p>\nWhen done, print the first, second, seventh, 200th, and next-to-last elements\nfrom the array, one per alert statement.\n</p>",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-03-01T21:04:03.124Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/arrays.evens.mp4"
        },
        {
            "_id": {
                "$oid": "5447dc1264a365934bc46760"
            },
            "createdAt": {
                "$date": "2014-10-22T16:32:18.477Z"
            },
            "folder": "5447dac264a365934bc4675d",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "<b>DIY:</b> Random array 2",
            "num": 1,
            "onSubmit": "var soln_inputs = [ [] ];\nvar soln_outputs = [ [5,15] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL > 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP > 1) { fail.s(\"use no more than 1 for loops\"); }\n    //if (style.nAFD != 1) { fail.s(\"need at least 2 functions declared\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                  ",
            "phase": 1,
            "testMode": false,
            "text": "Write a program that creates an array and puts into it 7 integers randomly generated between 1 and 20 (make sure you can get 1 and 20 both). Use Math.random() to do this, but you will have to manipulate the random numbers it produces to get integers between 1 and 20. \n<br/><br/>\nPrint out the second element and the 6th element (separate alerts).",
            "type": "diy",
            "updatedAt": {
                "$date": "2018-03-27T15:35:32.06Z"
            },
            "value": {
                "correct": "2",
                "style": "1"
            },
            "vidURL": ""
        },
        {
            "_id": {
                "$oid": "54498fea8afe161613542b7e"
            },
            "createdAt": {
                "$date": "2014-10-23T23:31:54.601Z"
            },
            "folder": "53cef3104fae0fbd7f73123d",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "<b>DIY:</b> Construct athlete objects",
            "num": 7,
            "onSubmit": "var soln_inputs = [ [\"smith\",\"basketball\",3,10,13.5,\"guard\", \n                     \"jones\", \"soccer\", 4, 8, 0.5, \"wing\",\n                     \"miller\",\"football\", 2, 10, 3.2, \"end\"]\n                  ];\nvar soln_outputs = [ [\"smith: 135 total points scored in basketball\", \n                      \"jones: 4 total points scored in soccer\",\n                      \"miller: 32 total points scored in football\"] \n                   ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);       ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick>\n<b>Write a program that will call an object constructor to make 3 instances of the athlete object from the last program.\n</b></font>\n</p> \n<p>\nIn this program we will see how a function can be used to create and return (manufacture) an object.  A function that manufactures\nobjects is called a \"constructor\".\n</p>\n<p>\nWrite a program that has two functions: myMain (with no arguments) and makeAthleteObject (with no arguments). In function makeAthleteObject you will first create an object from user input as in the previous problem.  No need to validate the user input.  When the fields of the new object are filled, makeAthleteObject \nwill return the object back to myMain.\n</p>\n<p>\nIn myMain call the makeAthleteObject function 3 times, and each time put the returned object into a new different variable.\nWhen that is done, print out the total score for each athlete using the format we used before (see below). Use a separate alert statement for each object. \nPrint each person in the order they were created by the user.\n</p>\n<p>\nMake the output look like this:\n<pre>\nsmith: 45 total points scored in football\n</pre>\n</p>\n<p>\n<b>Style:</b>\nUse myMain format.  Note that the code from myMain in the last assignment (code that makes the object and gets information from the\nuser for the object fields) can be used as much of the body for the makeAthleteObject function in this program.  The myMain in\nthis program will call makeAthleteObject 3 times and save the objects sent back in 3 different variables.\nYou could do this by a for loop that runs 3 times; then in the loop body the object returned from the constructor call \nis immediately used to compute the points output.  However doing it with a loop will not preserve the 3 objects (representing\n3 different athletes).  \n</p>",
            "type": "diy",
            "updatedAt": {
                "$date": "2018-02-19T13:25:41.187Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": ""
        },
        {
            "_id": {
                "$oid": "544a3ed88afe161613542b90"
            },
            "createdAt": {
                "$date": "2014-10-24T11:58:16.473Z"
            },
            "folder": "53cef2e24fae0fbd7f73123a",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "<b>DIY:</b> Array fizzbuzz",
            "num": 6,
            "onSubmit": "var soln_inputs = [ [ ]  ];\nvar soln_outputs = [ [\"fizz\", \"buzz\", 17, \"fizzbuzz\"] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 1) { fail.s(\"use one for loop\"); }\n    if (style.nDA < 1) { fail.s(\"declare and use an array\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                              ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick>\n<b>Arrays: Organizing data\n</b></font>\n</p> \n<p>\nWrite a program to do the FizzBuzz problem (a former brick).  It is in the while loop section, but this time use a for loop to compute it.\nAlso this time, instead of printing out the numbers and \"fizz\" etc., put the values into an array.  Make an array of 31 items (slots 0 to 30).\nLet's also just put 0 into slot 0 so we dont have to worry about if 0 is a multiple of 3 or 5.  \nThen go from slot 1 on up and put either the number into the array location (if it is not a multiple\nof 3 or 5), or put the appropriate \"fizz\", \"buzz\", or \"fizzbuzz\" into the array location.\n</p>\n<p>\nWhen done, print out the 4th, 11th, 18th, and last elements (each with a separate alert).\n</p>\n",
            "type": "diy",
            "updatedAt": {
                "$date": "2018-03-01T21:04:19.559Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": ""
        },
        {
            "_id": {
                "$oid": "544a421c8afe161613542b93"
            },
            "createdAt": {
                "$date": "2014-10-24T12:12:12.242Z"
            },
            "folder": "53cef2e24fae0fbd7f73123a",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "<b>DIY:</b> Lookup table",
            "num": 5,
            "onSubmit": "var soln_inputs = [ [ ] ];\nvar soln_outputs = [ [4.75682846, 21.8271672516, 137.1085570693, 177.6945533698] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 1) { fail.s(\"use one for loop\"); }\n    if (style.nDA < 1) { fail.s(\"declare an array\"); }\n    //if (style.nAU < 1) { fail.s(\"use an array\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                              ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick>\n<b>Write a program to create an array that has 1001 slots (index 0 to 1000) .  In each array slot store the value of a function (defined following)\ncomputed on the number that is the slot number. Using your completed array, print (in separate alerts)\nthe value in slot 8, the value in slot 61, the value in slot 707, and the value in slot 999.\n</b></font>\n</p> \n<p>\nThis program is similar to the VID brick we did called \"Even numbers\".\nHere we want to be able to store values for 0 to 1000, so the array has to contain 1001 elements (slots 0 to 1000).\nAs we go systematically through the array from slot 0 to slot 1000, for each slot i we compute the function and then store that result\ninto the array at slot i.\n</p>\n<p>\n<b>The function:</b> For each slot number n, compute n cubed, then take the 4th root of that, and then truncate the result to 10 decimal places.\nFor example, in array slot 5, we will store this:\n<pre>\ntrunc10 ( Math.pow( 5*5*5, 0.25 ) )     which is 3.343701524\n</pre>\nwhere trunc10 is a function you write that truncates a number to 10 decimal places. Math.pow ( num, 0.25 ) takes the 4th root (raises num to the 1/4th power), \nand the 4th root is also the same as taking the square root twice in succession.\n</p>\n<p>\nThis kind of data structure, and usage, is often called a <b>lookup table</b>.  The specific function we are computing here\n(4th root of a number cubed) is not particularly difficult, but some functions can be complicated to compute (expensive in time \nor memory used) so when we know we will need to compute those values a lot, it can be more efficient to compute a range of them\nin advance and same the values in an array, where they can be looked up very quickly (more quickly that it would take to re-compute the\nfunction).\nLookup tables are used in  CPU chip in your computer, for example, to make floating point arithmetic faster.\n</p>\n",
            "type": "diy",
            "updatedAt": {
                "$date": "2018-03-01T21:04:14.466Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": ""
        },
        {
            "_id": {
                "$oid": "545049a28afe16161354324b"
            },
            "createdAt": {
                "$date": "2014-10-29T01:57:54.491Z"
            },
            "folder": "5902b4167bb0b09c0d2a6422",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Array of objects",
            "num": 12,
            "onSubmit": "var soln_inputs = [ [ 123,\"smith\",10,20,\n                      \"yes\",234,\"jones\",20,30,\n                      \"yes\",345,\"miller\",20,25,\"no\" ] ];\nvar soln_outputs = [ [3, \"total payroll: 1300\", \"high rate: jones\"] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL < 1) { fail.s(\"use at least one while loop\"); }\n    if (style.nFLAP < 2) { fail.s(\"use 2 for loops\"); }\n    if (style.nAFD < 2) { fail.s(\"need at least 2 functions declared\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                        ",
            "phase": 1,
            "testMode": true,
            "text": "<p>\n<font color=firebrick>\n<b>Let's build and use an array of objects.\n</b></font>\n</p> \n<p>\nWe will start with the code from \"Construct person object\" from the \"Basic Objects\" folder.\nThis gives us the myMain function as well as a constructor function \"makePersonObject\" that\nmanufactures and returns objects after populating them with user input.\n</p>\n<p>\nIn myMain before we created 3 separate variables to store 3 objects.  This means the code works for exactly 3 persons, and if the user\nhad more (or less) to work with the code would have to be re-written (a little bit re-written).\n</p>\n<p>\nIn this new program we will make a loop and keep making objects until the user says we\nare done.  Each new object made an returned by the constructor will be stored in an array (in much the same way\nwe have created and used an array to store number input by the user in other programs).\nIn the loop, first call makePersonObject to manufacture a person object; store the object\nthat is returned in the next open array slot.  Then ask the user if another object needs to be made.\nIf the reply is \"no\" then we will break to end the input loop.  Any other reply will cause the \nloop to repeat and make another object.\n</p>\n<p>\nOnce the input loop is done and the array if filled with objects, we will use the objects to\ncompute some information. First, print the length of the array (which is the number of objects stored in the array).\nNext, compute the total payroll. To do this, go through the array and sum up all the amounts\npaid to each worker.  Print this out with this format: \"total payroll: 1234.56\"\n</p>\n<p>\nThen go through the array and find the name of the person with the highest hourly pay rate.\nPrint out the name in this format: \"high rate: smith\".\n</p>",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-01-05T18:59:04.561Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": ""
        },
        {
            "_id": {
                "$oid": "546044f9bcc28de248a902fd"
            },
            "createdAt": {
                "$date": "2014-11-10T04:54:17.456Z"
            },
            "folder": "5902b4167bb0b09c0d2a6422",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "<b>DIY:</b> makePersonObject 2",
            "num": 22,
            "onSubmit": "var soln_inputs = [ [ 123,\"smith\",10,20,\n                      \"yes\",234,\"jones\",20,30,\n                      \"yes\",345,\"miller\",20,25,\"no\" ] ];\nvar soln_outputs = [ [\"total payroll: 1300\",\"high rate: jones\"] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL != 1) { fail.s(\"use 1 while loop\"); }\n    if (style.nFLAP != 2) { fail.s(\"use 2 for loop\"); }\n    if (style.nAFD < 2) { fail.s(\"need at least 2 function declared\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                   ",
            "phase": 2,
            "testMode": true,
            "text": "Let's modify the previous program \"array of objects\". We will keep the same basic data and computed results, but we will change the structure of the two functions a bit. We are going to move the user input out of makePersonObject and relocate it to myMain. The values from the user will be passed to makePersonObject as arguments (4 arguments); then in makePersonObject the values of the arguments will be put into the fields when the object is manufactured. As before, makePersonObject will return the new object and in myMain that object will be put into an array. \n<br/><br/>\nOutput should be the same as before.  \nFirst, compute the total payroll. To do this, go through the array and sum up all the amounts\npaid to each worker.  Print this out with this format: \"total payroll: 1234.56\"\n<br/><br/>\nThen go through the array and find the name of the person with the highest hourly pay rate.\nPrint out the name in this format: \"high rate: smith\"",
            "type": "diy",
            "updatedAt": {
                "$date": "2018-01-05T18:59:04.577Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": ""
        },
        {
            "_id": {
                "$oid": "54604df3bcc28de248a902ff"
            },
            "createdAt": {
                "$date": "2014-11-10T05:32:35.419Z"
            },
            "folder": "54603ea9bcc28de248a902fc",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Anonymous function (bind to global var)",
            "num": 1,
            "onSubmit": "var soln_inputs = [ [] ];\nvar soln_outputs = [ [10] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 0) { fail.s(\"use no for loop\"); }\n    if (style.nAFD != 2) { fail.s(\"need 2 functions declared\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                   ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick>\n<b>Write a program that creates a function value that is not bound to a name, and then bind that anonymous function value to a global name.\n</b></font>\n</p> \n<p>\nA function value with no name bound to it is called \"anonymous\".  An anonymous function can still be defined and later bound to a name (saved for later execution).\nIn this problem we illustrate function as first class values by creating a function with no name (an anonymous function)\nand then \"binding\" that function value to a name with \"=\" assignment.\n</p>\nTo create an anonymous function value, we use the \"function\" keyword as we are accustomed to doing, but we do not put a name\nafter the keyword.  We do create an argument list (in parentheses) and the code body (in curly braces).\nIt is identical to defining a named function except we do not give it a name.\nHere is an example (using the code from the previously defined named function \"double\"):\n<pre>\nfunction ( n ) {  return 2*n; }\n</pre>\nAgain, this is a function value... it is the same thing for type \"function\" as writing the number value \"5\" is for type \"number\".\nIt is valid JavaScript, and we must now decide what we wish to do with this value.  In this program we will take that\nfunction value, and bind it to a global name using assignment.  In the next program, we will see how to execute that\nfunction value without ever naming it.\n</p>\n<p>\n<b>Details.</b> First at the global level create an anonymous function value using the previous code for \"double\" with one argument (as shown\nin the previous pre-format box).  Assign that anonymous function to the global variable \"double\" using assignment.\nThen define the global function (myMain) as we usually do.  Inside myMain, call double(5) and print the returned result.\n</p>\n<p>\n<b>Notes.</b> This program illustrates that the \"normal\" way of defining functions -- using the \"function\" keyword and a name for the function --\nis actually a shorthand notation for doing what we are doing here... creating a nameless function value, and then binding it to a global name.\nBinding it to a global name is what makes us able to run the function from within our other functions.\nAlso, we must be careful to get our code in the right order.  Since we are explicitly creating a global variable (the name for the function) we\nmust do that declaration and binding <b>before</b> we call myMain.  If we do not, when myMain runs and tried to call the function bound to \nthe name \"double\", that global variable will not yet have been declared.  So do things in this order: \n<ol>\n<li> declare the global variable \"double\" and assign a function to it  </li>\n<li> declare function myMain , that calls \"double\"</li>\n<li> call myMain to kick it all off </li>\n</ol>\n</p>\n<p>\n<b>Relevance to objects.</b>\nWe will be (in the next module) putting functions inside objects (we call them \"methods\" for historical reasons).  \nTo put a function into an object, we will be using this form of definition... creating an anonymous function value and then\nbinding it to a field name inside the object.\n</p>\n\n",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-03-20T13:08:24.123Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/advFunc.anonBind.mp4"
        },
        {
            "_id": {
                "$oid": "54604ef0bcc28de248a90300"
            },
            "createdAt": {
                "$date": "2014-11-10T05:36:48.86Z"
            },
            "folder": "54603ea9bcc28de248a902fc",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Anonymous function (execute w/o name)",
            "num": 2,
            "onSubmit": "var soln_inputs = [ [] ];\nvar soln_outputs = [ [10] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    //if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 0) { fail.s(\"use no for loop\"); }\n    //if (style.nAFD != 1) { fail.s(\"need 1 function declared\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                   ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick>\n<b>Write a program that creates a function value that is not bound to a name, and then executes that anonymous function.\n</b></font>\n</p> \n<p>\nIn this problem we illustrate function as first class values by creating a function with no name (an anonymous function)\nand executing it without binding it to a name.  This is advanced capability of JavaScript, and we are just doing it here to make\nyou familiar with the fact that is can be done.  We will not be using this capability in future program in this course.\nIn professional JavaScript programs, such as code for large websites, this \ntechnique is used a great deal.  It is also a characteristic of languages that are called \n\"functional languages\".\n</p>\n<p>\nFor this program, we wont even need a myMain function.\nAt the global level create an anonymous function value (using the previous code for \"double\" with one argument).\nAfter defining the value, supply an argument of 5 to it and execute it.  \nPrint the returned result.\n</p>\n<p>\n<b>Details.</b>\nWhat syntax shall we use to cause a function with no name to execute?  And how shall we pass it the argument 5 ?\nLet's consider how we call a named function.\nFirst we write the name, then we put the argument(s) in parentheses after the name.  For example, to run the \"double\" function we did this:\n<pre>\nvar result = double ( 5 );\n</pre>\nWhat actually happens in this case is the function value bound to the name \"double\" is retrieved and executed on the arguments in the parenthesized list.\n</p>\n<p>\nWhen we have the function value directly, we have no need to evaluate a name to find it.  So we will just write out the value, and put a parenthesized list after the\nfunction value.  That will make the function value execute on the arguments in the parenthesized list:\n<pre>\nvar result = ( function ( n ) { return 2*n; } ) ( 5 ) ;\n</pre>\nThen the variable \"result\" will contain the value returned by the execution of the function on the argument 5; that is, the variable result will contain 10.\nWe can then alert the value stored in \"result\" .\n</p>",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-03-20T13:08:29.766Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/advFunc.anonExec.mp4"
        },
        {
            "_id": {
                "$oid": "5462c122bcc28de248a90670"
            },
            "createdAt": {
                "$date": "2014-11-12T02:08:34.239Z"
            },
            "folder": "5902b4167bb0b09c0d2a6422",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Parsing input strings",
            "num": 17,
            "onSubmit": "var soln_inputs = [[\"Time flied like an arrow\"] ];\nvar soln_outputs = [ [\"Time\",\"arrow\"] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 0) { fail.s(\"use no for loops\"); }\n    if (style.nAFD != 1) { fail.s(\"need only 1 function declared\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}  \n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                       ",
            "phase": 2,
            "testMode": true,
            "text": "In this program we will take a (long) input string and break it apart into several substrings.\nWe call this parsing.  \n<br/><br/>\nWrite a program that will ask the user for an input string (format shown below).\nThen parse the string into substrings using the character \" \" (blank) as the separator.\nPut each substring into a slot in an array.\nPrint out the first substring and the last\n<br/><br/>\nTo parse a string into substrings we will use the \"split\" methods (function) that is supplied with JavaScript strings.\nThe split function is passed as a parameter the character to use as separator.\nIt returns an array of strings.  The separator character is not put into any substring; it is effectively taken out and \nthe characters after the separator (up to the next separator or end) comprise the substring.\n<br/><br/>\nThe input from the user will be a standard English sentence, with words separated by blanks.  For example:\n<pre>\nTime flies like an arrow\n</pre>\nWhen this is parsed using the \" \" as separator, you get this array of substrings:\n<pre>\narr[0]: Time\narr[1]: flies\narr[2]: like\narr[3]: an\narr[4]: arrow\n</pre>\nYour program would then print \"TIme\" and \"arrow\" as the first and last substrings",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-01-05T18:59:04.569Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": ""
        },
        {
            "_id": {
                "$oid": "5462c671bcc28de248a90677"
            },
            "createdAt": {
                "$date": "2014-11-12T02:31:13.733Z"
            },
            "folder": "5902b4167bb0b09c0d2a6422",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Parsing input strings 2",
            "num": 21,
            "onSubmit": "var soln_inputs = [[\"Time-flies-like-an-arrow go-heels-beat-Duke we-love-that-JavaScript\"] ];\nvar soln_outputs = [ [\"Time\",\"arrow\",\"go\",\"Duke\",\"we\",\"JavaScript\"] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 1) { fail.s(\"use 1 for loop\"); }\n    if (style.nAFD != 1) { fail.s(\"need only 1 function declared\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}  \n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                       ",
            "phase": 2,
            "testMode": true,
            "text": "Let's take one step beyond the last parsing program.\nIn this one, we first parse the user's input string as we did (using \" \" as the separator).\nThis gives us an array of substrings.\n<br/><br/>\nNow we will parse each substring, further dividing the input into parts.\nUse the \"-\" hyphen character as separator this time.\nThis will give you an array of the strings between the hyphen.\n<br/><br/>\nFor each of the top level parsed strings (the ones separated by blanks)\nprint the first and last hyphen-separated substrings.\n<br/><br/>\nExample of the input:\n<pre>\nyesterday-is-history tomorrow-is-a-mystery today-is-a-gift\n</pre>\nThis will give this array:\n<pre>\narr[0]: yesterday-is-history\narr[1]: tomorrow-is-a-mystery\narr[2]: today-is-a-gift\n</pre>\nWhen we parse the first line we get this array:\n<pre>\nbrr[0]: yesterday\nbrr[1]: is\nbrr[2]: history\n</pre>\nWe print \"yesterday\" and \"history\" as the first and last, and go on to parse arr[1], etc.",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-01-05T18:59:04.576Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": ""
        },
        {
            "_id": {
                "$oid": "5469797569018afa6ceb7213"
            },
            "createdAt": {
                "$date": "2014-11-17T04:28:37.138Z"
            },
            "folder": "5902b4167bb0b09c0d2a6422",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "<b>MM 1:</b> object method call",
            "num": 11,
            "onSubmit": "var soln_inputs = [ [2,5] ];\nvar soln_outputs = [ [10] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); }\n     }\n  }\n  if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n  if (style.nAWL !=0 ) { fail.s(\"Use no while loops\"); }\n  if (style.nAFL !=0 ) { fail.s(\"We dont need for loops\"); }\n  if (style.nTFD < 2) { fail.s(\"We need at least 2 functions declared and used\"); }\n  if (style.nBGD >0 || style.nBGU >0) { fail.s(\"dont use global variables\"); }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                 ",
            "phase": 1,
            "testMode": true,
            "text": "<pre>\nfunction myMain() {\n  var n1 = Number(prompt(\"number?\"));\n  var n2 = Number(prompt(\"number?\"));\n  var ob = makeObj( n1, n2 );\n  var val = ob.mxy();\n  alert(val);\n}\n\nmyMain();\n\nfunction makeObj (a,b) {\n  var ob = {\n    x: a,\n    y: b,\n    mxy: function () { return this.x * this.y ; }\n  }\n  return ob;\n}\n</pre>",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-01-05T18:59:04.557Z"
            },
            "value": {
                "correct": "0",
                "style": "0"
            },
            "vidURL": ""
        },
        {
            "_id": {
                "$oid": "546eb8767f212f1d61e5c25e"
            },
            "createdAt": {
                "$date": "2014-11-21T03:58:46.305Z"
            },
            "folder": "546eb51f7f212f1d61e5c25c",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "<b>CG:</b> deck and shuffle",
            "num": 0,
            "onSubmit": "var soln_inputs = [ [20] ];\nvar soln_outputs = [ [0, 6, 12, 0, 8, 12] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL > 1) { fail.s(\"use no more than one while loops\"); }\n    if (style.nFLAP > 2) { fail.s(\"use no more than 2 for loops\"); }\n    if (style.nAFD < 2) { fail.s(\"need at least 2 functions declared\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                   ",
            "phase": 1,
            "testMode": true,
            "text": "We will write an extended program that has the basic structure for a card game.\nWe will be working on this in class and writing it in pairs if you wish to do so.\nThe starting piece is a representation of a deck of cards and a functions that will shuffle the deck.\n<br/><br/>\nA card game (and most any computer game) is a simulation in code of a real structure and behavior.\nTo do this, we need to identify the things in the world we are modeling, and then create a representation\nof each thing in terms of some JavaScript component.\nCard games usually have at least these things: card, deck of cards, hand, player.  Usually we have some common functions as well: deal cards (to the table, to hands), shuffle the deck, pass card from one player to\nanother, lay card on the table.\nWe will start simple: let's create a card representation, a deck representation, and a way to shuffle\nthe deck.  \n<br/><br/>\nFor starters (we will complicate things later) let's represent a deck of cards as an array with \nas many slots as there are cards in the deck.  Let's also represent a card as an integer between 0 and\nthe size of the deck.\nFor order of the deck, we will use the order of elements in the array.\nFor example, let's consider a deck with 5 cards in it.   Initially we can generate an array with 5 elements\nand we will put one of the integers from 0 to 4 in each slot:\n<pre>\n         +----+----+----+----+----+\narray:   | 0  | 1  | 2  | 3  | 4  |  \n         +----+----+----+----+----+\nslot:      0    1    2    3    4\n</pre>\nAfter shuffling, the deck array might look like this:\n<pre>\n         +----+----+----+----+----+\narray:   | 3  | 0  | 4  | 2  | 1  |  \n         +----+----+----+----+----+\nslot:      0    1    2    3    4\n</pre>\n<br/>\n<b>Code:</b>\nIn myMain, first ask the user how many cards to put into the deck.\nThen create an array to represent the deck, and load up the array with the proper integers in\norder.  Print the deck array to verify that all is well (use an alert on the array variable and the whole\nthing will appear in one alert box).\n<br/><br/>\nNow write a function called shuffle that takes one parameter, a deck array.\nShuffle will move the array values around randomly so that the cards get put into a new, random order.\nReturn the array that has been shuffled.\n<br/><br/>\nBack in myMain, call the shuffle function and pass in the card deck.\nWhen shuffle returns a re-ordered deck array, save that into the deck variable.\nThen print the entire deck again to verify the shuffled order.\n<br/><br/>\n<b> How to shuffle</b>\nWe will use in the shuffle function the Math.random function.  \nThe values stored in the array (the \"cards\") will remain as they are.  The location (slot) of each\n\"card\" will change randomly.\nThe basic idea is to randomly generate 2 slot numbers and then swap the cards stored in those slots.\nDo this swap a few thousand times and the deck will be nicely rearranged.\nLet's use for an example a deck with 52 cards.  You will need an expression that will generate a\nrandom integer between   0 and 51.  Call this twice to get two slots between 0 and 51, then swap\nthose two array elements.  We did a swap back in the bubbleUp brick.  Use this as a pattern.\n<br/><br/>\n<b>To get scored</b>\nRemove the alerts that print the entire deck array (those were for your personal debugging).\nMake a deck with 20 cards, and then do the following outputs.\nBefore shuffling: alert the first element of the new deck, then the 7th element, and the finally\nthe 13th element ( 3 separate alerts).  After shuffling: alert the first element, then the 7th element, and finally\nthe 13th element ( 3 separate alerts).\nMake sure you also do exactly 10 swaps in the shuffle function.",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-02-02T01:43:24.296Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/cards.one.mp4"
        },
        {
            "_id": {
                "$oid": "546f76ff7f212f1d61e5c3a3"
            },
            "createdAt": {
                "$date": "2014-11-21T17:31:43.339Z"
            },
            "folder": "546eb51f7f212f1d61e5c25c",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "<b>CG:</b> Object deck and shuffle method",
            "num": 1,
            "onSubmit": "var soln_inputs = [ [20] ];\nvar soln_outputs = [ [0, 6, 12, 0, 8, 12] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL > 1) { fail.s(\"use no more than one while loops\"); }\n    if (style.nFLAP > 2) { fail.s(\"use no more than 2 for loops\"); }\n    if (style.nAFD < 2) { fail.s(\"need at least 2 functions declared\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);     ",
            "phase": 1,
            "testMode": true,
            "text": "Convert the CG1 program into an object-based design.\n<br/><br/>\nThe basic idea is to make the card deck an object, and to make the shuffle function a method in the deck object.\nWe will need a constructor function for deck object (let's call it makeDeck) and this constructor will need one parameter... the\nnumber of cards to put into the initial deck.\nThe makeDeck function will create the array and fill it with cards in order, as you did in myMain in CG1.\nThe makeDeck constructor will also take your shuffle function and convert it into a function inside the deck object.\nThis means using the \"this\" keyword appropriately to refer to the card array.\n<br/><br/>\nThe myMain function is now simpler.  Ask the user how many cards in the deck.  Call makeDeck and pass that number as a parameter.\nCapture and save the deck object that is returned.  Then alert the cards array in the deck object to see the initial in-order card list ( see \"show the deck\" below ).\nAsk the deck object to shuffle itself ( that is, call the shuffle method on the deck, using dot notation like deck.shuffle() ).\nThen alert the entire card arrray in the deck object to see the shuffled card order.\n<br/><br/>  \n<b>To show the deck</b>\n<br/>\nHow will we actually print out the cards in a deck?  One idea is to reach into the deck object and just name the card array.\nWhile this will work, it is not the best practice.\nA better practice it to put a \"show()\" function into the deck object so you can ask a deck to show you the cards.\nThe show function will alert the entire array. We will use the show function to convince ourselves that\nthe array is being randomized as we want.\n<br/><br/>\n<b>To get Scored</b>\n<br/>\nComment out the show function calls and do the same output we did in CG1 to get scored.\nThat is, when the deck is newly created alert the first card, the 7th card, and the 13th card in 3 separate\nalert statements.\nThen shuffle the deck (making exactly 10 swaps).\nAfter the deck is shuffled, print those 3 cards again.\nEven though it is not best practice, do this by reaching into the object and accessing individual elements in the card array.  For example, if your cards array is\nnamed \"cards\" in the deck object, then alert deck.cards[0] etc.\n",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-02-02T04:12:39.863Z"
            },
            "value": {
                "correct": "3",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/cards.objDeck.mp4"
        },
        {
            "_id": {
                "$oid": "546f7d1e7f212f1d61e5c3ab"
            },
            "createdAt": {
                "$date": "2014-11-21T17:57:50.896Z"
            },
            "folder": "5902b4167bb0b09c0d2a6422",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "<b>MM 2:</b> object method with parameter, local vars",
            "num": 16,
            "onSubmit": "var soln_inputs = [ [2,5] ];\nvar soln_outputs = [ [10,70] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); }\n     }\n  }\n  if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n  if (style.nAWL !=0 ) { fail.s(\"Use no while loops\"); }\n  if (style.nAFL !=0 ) { fail.s(\"We dont need for loops\"); }\n  if (style.nTFD < 2) { fail.s(\"We need at least 2 functions declared and used\"); }\n  if (style.nBGD >0 || style.nBGU >0) { fail.s(\"dont use global variables\"); }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                   ",
            "phase": 1,
            "testMode": true,
            "text": "Let's alter the previous problem (MM1) and add a second method to the object:\n<pre>\nfunction myMain() {\n  var n1 = Number(prompt(\"number?\"));\n  var n2 = Number(prompt(\"number?\"));\n  var ob = makeObj( n1, n2 );\n  var v1 = ob.mxy();\n  alert(v1);\n  var v2 = ob.foo(10);\n  alert(v2);\n}\n\nmyMain();\n\nfunction makeObj (a,b) {\n  var ob = {\n    x: a,\n    y: b,\n    mxy: function () { return this.x * this.y ; },\n    foo: function (z) {\n      var loc = this.x + this.y;\n      return loc * z;\n    }\n  }\n  return ob;\n}\n</pre>",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-01-05T18:59:04.568Z"
            },
            "value": {
                "correct": "0",
                "style": "0"
            },
            "vidURL": ""
        },
        {
            "_id": {
                "$oid": "547bafdad422b48919cf40a4"
            },
            "createdAt": {
                "$date": "2014-12-01T00:01:30.765Z"
            },
            "folder": "546eb51f7f212f1d61e5c25c",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "<b>CG:</b> Adding methods to deck object",
            "num": 2,
            "onSubmit": "var soln_inputs = [ [52] ];\nvar soln_outputs = [ [0,4,6,11,40,14,51] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL > 1) { fail.s(\"use no more than one while loops\"); }\n    if (style.nFLAP > 2) { fail.s(\"use no more than 2 for loops\"); }\n    if (style.nAFD < 2) { fail.s(\"need at least 2 functions declared\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                  ",
            "phase": 1,
            "testMode": true,
            "text": "(6-2pts) Extend the CG2 program with more deck methods.\n<br/><br/>\nThe deck object currently has a \"shuffle\" method, a \"init\" method, and a \"show\" method.  Now let's give the deck more functionality.\n<br/><br/>\n<b>(1)</b> Add a \"size\" method to the deck object.  The size method will take no parameters and will return a positive integer (or 0) that\ntells how many cards are in the deck.  \n<br/><br/>\n<b>(2)</b> Add a \"deal\" method (function) to the deck object.\nThe deal method will take one parameter (an integer telling how many cards to deal from the deck); it will return an\narray containing the cards dealt.  Make sure to shorten the deck cards as well. For example, if deal is called with the parameter\n5, and if the deck starts with 52 cards, then deal returns an array with the first 5 cards from the deck and the deck itself is shortened to\n47 cards.  Don't forget to make sure to adjust the number of cards so that the size function still works after a deal.\n<br/><br/>\nYou may find the \"slice\" method in arrays useful.  Read the documentation online for details. The slice method will\nreturn a portion of an array.  For example, if you have an array variable \"arr\" then arr.slice(0,5) will return an array\nconsisting of the elements 0, 1, 2, 3, and 4 from arr.  Calling arr.slice(5) will return all elements from 5 to the end.\n<br/><br/>\n<b>(3)</b> Add a \"getCard\" method to the deck object.\nThis method will take one parameter (an integer 1 or greater) and it will return the card that is in that \nposition in the deck.  For example, if the getCard method is called with 5, then return the 5th card (which is\nfound in slot 4 in the array in the deck).\n<br/><br/>\n<b>To get scored:</b>\nThe myMain function should do the following things.\nFirst ask the user how many cards to put in the deck, then make a new deck with that many cards.\nTo get scored, use 52 as the number of cards.\n<b>Do not shuffle the deck.</b>\nCall the deal method on the deck and pass it a 5 (deal 5 cards); save the array returned in a variable.\nPrint the first and 5th card in that array (using two separate alerts).\nCall the deal method again and pass it 7 (deal 7 cards); save the array that it returned in a variable.\nPrint the 2nd and 7th cards from this array (two separate alerts).\nThen call the size method on the deck, and print the number that is returned.\nFinally, print the 3rd and last cards remaining in the deck (separate alerts).\nUse the \"getCard\" method to retrieve these cards; do not just peek into the array in the deck object (as\nwe have been doing up to now).\n\n\n",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-02-02T00:04:08.05Z"
            },
            "value": {
                "correct": "3",
                "style": "1"
            },
            "vidURL": ""
        },
        {
            "_id": {
                "$oid": "547e70b7d422b48919cf45fc"
            },
            "createdAt": {
                "$date": "2014-12-03T02:08:55.402Z"
            },
            "folder": "546eb51f7f212f1d61e5c25c",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "<b>CG:</b> Adding card objects",
            "num": 3,
            "onSubmit": "var soln_inputs = [ [] ];\nvar soln_outputs = [ [\"0:2D\",\"4:6D\",\"6:8D\",\"11:KD\", 40, \"14:3C\",\"51:AS\" ] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLAP > 1) { fail.s(\"use no more than one while loops\"); }\n    if (style.nFLAP > 5) { fail.s(\"use no more than 5 for loops\"); }\n    if (style.nAFD < 4) { fail.s(\"need at least 4 functions declared\"); }\n  }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ",
            "phase": 1,
            "testMode": true,
            "text": "Now let's change how cards are represented.  We will make alterations to CG3.  In CG3 a card is an integer, and the deck object contains an array of these card/integers.  In this program we will represent a card with an object.  The deck will still have an\narray to contain all the cards, but each slot in the array will hold a card object.\n<br/><br/>\nWe will need a constructor to make card objects.  We will call this makeCard() and it will take an integer as parameter.\nThis will be stored in the card as the card number.  Using this number we will also compute the proper suit and face for the card.\n<br/><br/>\nIn the deck object the methods deal, shuffle, should still work usefully.\nWe will have to alter the show method.call the makeCard function.\n<br/><br/>\nThe makeCard function will construct an object with the card number as well as\nthe face and suit.  It will also have a show function and a getName function.\n<br/><br/>\nmyMain will have to be altered to produce card numbers according to the new card structure.\n\n<b>To get scored:</b>\n<br/>\nThe myMain function should do the following things. \n<ol>\n<li>First make a new deck with 52. <b>Do not shuffle the deck.</b>\n<li>Call the deal method on the deck and pass it a 5 (deal 5 cards); save the array returned in a variable.\n<li>Print the first card in that hand array; use the card show method to do this (it's format is \"0:2D\", the card number, a colon, then the name).\n<li>Print the 5th card in that hand array with a call to the card show method.\n<li>Call the deal method again and pass it 7 (deal 7 cards); save the array that it returned in a variable. \n<li>Print the 2nd and 7th cards from this array (two calls to the card show method). \n<li>Then call the size method on the deck, and print the number that is returned. \n<li>Finally, print the 3rd and last cards remaining in the deck (separately). Use the \"getCard\" method to retrieve these cards, and\ncall the show method on the cards returned.\n<ol>",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-02-02T00:04:27.916Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": ""
        },
        {
            "_id": {
                "$oid": "55a434e8202773475826e312"
            },
            "createdAt": {
                "$date": "2015-07-13T22:00:08.777Z"
            },
            "folder": "55a43416202773475826e311",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Overview",
            "num": 0,
            "onSubmit": "// I/O pairs for functional behavior\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [\"data types: number, string, boolean\"] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness  \n  if (err) { fail.f(\"There was an error in your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (!style.isJOTFC) { fail.s(\"make a single output, nothing else\"); }\n  if (!style.hasOTAOL) { fail.s(\"make one call to alert on a string literal\"); }\n\n  // finalize and award points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\t\t\t",
            "phase": 1,
            "testMode": false,
            "text": "<b>Data</b>\n<br/>\nData is the basic information we use computers to manipulate for us.  People and place names, ages, heights, lengths, dollars and cents, time, sentences, all these are information we may wish to have a computer program use.  JavaScript provides 3 types of fundamental (basic, simple) data: \n<ul>\n   <li> number\n   <li> string (or text)\n   <li> boolean\n</ul>\n<i>Numbers</i> are formed from digits 0-9, the negative symbol (-) and perhaps a decimal point (.) .\n<br/>\nExamples include 11, -3.2, 27.12398745, 9.0, -10000, .25, 0.25\n<br/><br/>\n<i>Strings</i> are sequences of alphabetic characters, digits, and punctuation characters enclosed in quote marks.  \n<br/>\nExamples include \"hello\", \"COMP 110\", \"Welcome to class!\", \"x\", \"100\", \"up/down and side-ways\"\n<br/><br/>\n<i>Boolean</i> data represent logical truth; there are only two boolean values: <i>true</i> and <i>false</i> .\nWe do not put quotes around true and false, we just use them as special words.  The value <i>true</i> is boolean, but the value \"true\" is a string. In similar fashion,\nthe value 200 is a number, but the value \"200\" is a string.\n<br/><br/>\nWe will look at boolean in detail later.  In this module, we will practice mostly with numbers and strings.\n<br/><br/>\n<b>Output</b>\n<p>\nIn order for a computer program to be useful to us, it not only has to manipulate information, if must get that information out to us in a form we can understand and use.  This is called <b>output</b>.  Programming languages usually offer many ways to get a computer to output information. For JavaScript we will start with the very basic \"print something to the screen\" function.  This is the <b>alert</b> function.\nThe <b>alert</b> function in JavaScript produces a popup box on the screen, with the requested output printed inside the box.\n</p>\n<p>\nUsing the alert function it is our first example of a <i>function call</i>.   \nWhen we call a function we are asking that the program perform the named activity, and we pass information to the function to use \nduring its activity.  To call a function (in this case, the \"alert\" function) we write its name and in parentheses we write the information we wish to pass in (called parameters, or arguments). \n</p>\n<p>\nSo let's try calling the alert function to get some output.\nTo complete this problem, type the following JavaScript line, run it, and then submit it for credit:\n<br/><br/>\n&nbsp&nbsp&nbsp <b>alert( \"data types: number, string, boolean\" ) ;</b>\n<br/><br/>\nMake sure you pay careful attention to where all the blank characters are inside the quotes, and how many there are.  To get this program correct, your quoted string will have to be exactly the same as the one shown there.  This sort of detail is very important in programming and it can be very frustrating to you -- the programmer -- as well.  \n</p>\n<p>\nNote that the syntax we use to call a function is based on mathematical notation.  We have all seen something like this:\n<br/> &nbsp&nbsp&nbsp <b> y = sine(x)</b>\n<br/>\nHere the function we are \"running\" is the trigonometric <b>sine</b> and the information we are passing in is the argument <b>x</b>.\nThe function computes a value based on <b>x</b> and produces it.  \n</p>\n<p>\nThe programs that follow will show you examples of the 3 fundamental data types in JavaScript: number, string, and boolean.\nAll data values in our JavaScript programs will be of these types.  The programs in this module will show you how data values of each type are formed.\nWe call these individual data values \"constants\".  A constant is a data value that does not change (i.e., its value is fixed... constant).\n</p>",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-01-08T23:09:45.299Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/const.overview.mp4"
        },
        {
            "_id": {
                "$oid": "55a438de00be0a1359da625e"
            },
            "createdAt": {
                "$date": "2015-07-13T22:17:02.843Z"
            },
            "folder": "55a43416202773475826e311",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Course name",
            "num": 1,
            "onSubmit": "// I/O pairs for functional behavior\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [\"COMP 110\"] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness  \n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (!style.isJOTFC) { fail.s(\"make a single output, nothing else\"); }\n  if (!style.hasOTAOL) { fail.s(\"make one call to alert on a string literal\"); }\n\n  // finalize and award points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker ); ",
            "phase": 1,
            "testMode": false,
            "text": "Write a program that prints (alert) the catalog designation of this course ( \"COMP 110\" ). \nFor things like names, we use string data. We use the alert function to do output to the screen, so put the data you want to see \non the screen inside parentheses like this: \n<br/><br/>\n<b>alert( \"COMP 110\" );</b>\n<br/><br/>\nTo complete this program, type the JavaScript line above into the editor window, run it locally to test, and then submit it for credit.\nWe put a semicolon at the end as a rule of properly formed JavaScript statements.  It's like English grammar requiring a \".\" at the end of a sentence.\n<br/><br/>\nA string can contain just about any keyboard characters inside the quote marks.  Here are some valid string values:\n<pre>\n  \"hello\"    \"123\"    \"542 xyz\"    \"     \"     \"quick brown fox\"   \"Smith's house\"  <font color=red><b><-- note here the ' inside the string</b></font>\n</pre>\nA string can start with either \" or ' and must end with the same style quote mark.  This allows us to make string values with the \" character inside:\n<pre>\n  'another string'    'ten 10 tin'     'The speaker said \"Welcome!!\" to the crowd'     '#hashtag'    'go-fight-win!!@gmail.com'\n</pre>\nTry printing some of these using local testing.",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-01-07T05:34:53.958Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/const.coursename.mp4"
        },
        {
            "_id": {
                "$oid": "55a43b6500be0a1359da625f"
            },
            "createdAt": {
                "$date": "2015-07-13T22:27:49.781Z"
            },
            "folder": "55a43416202773475826e311",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Current year",
            "num": 2,
            "onSubmit": "// I/O pairs for functional behavior\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [2017] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness  \n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (!style.isJOTFC) { fail.s(\"make a single output, nothing else\"); }\n  if (!style.hasOTAOL) { fail.s(\"make one call to alert on a number literal\"); }\n\n  // finalize and award points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker );",
            "phase": 1,
            "testMode": false,
            "text": "<p>Write a program that prints (alert) the current year ( 2017 ).  \nHere we use number data, so there will be no quotes around the numeric value 2017.\n</p>\n<p>\nData values of type number can be what we called in math class \"integer\" (no decimal point), or they can be floating point, with a decimal point:\n<pre>\n  123    16.21456    -1976   -98.4381   -500    27.70000001    0     0.01     -0.00004\n</pre>\nFloating point numbers are also often called \"real\" numbers.  There are a few other formats for numbers, such as scientific notation, but we will deal with them specifically when we need them.\n</p>\n<p>\nNo matter the format, in JavaScript they are all data values of type \"number\".\n</p>",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-01-07T05:34:58.606Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/const.curryear.mp4"
        },
        {
            "_id": {
                "$oid": "55a43e2400be0a1359da6260"
            },
            "createdAt": {
                "$date": "2015-07-13T22:39:32.117Z"
            },
            "folder": "55a43416202773475826e311",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Boolean true",
            "num": 3,
            "onSubmit": "// I/O pairs for functional behavior\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [true] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness  \n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (!style.isJOTFC) { fail.s(\"make a single output, nothing else\"); }\n  if (!style.hasOTAOL) { fail.s(\"make one call to alert on a boolean literal\"); }\n\n  // finalize and award points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker );\t\t\t\t\t\t",
            "phase": 1,
            "testMode": false,
            "text": "The boolean value indicating truth or true-ness is the special keyword <i>true</i> .\nKeywords are not the same as text or string data; we do not put them in quotes to use them.  \nPrint out the boolean value indicating true-ness.\n",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-01-07T05:35:06.843Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/const.booltrue.mp4"
        },
        {
            "_id": {
                "$oid": "55a4461a3e2a18845b81c530"
            },
            "createdAt": {
                "$date": "2015-07-13T23:13:30.307Z"
            },
            "folder": "55a43416202773475826e311",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Slice of Pi",
            "num": 4,
            "onSubmit": "// I/O pairs for functional behavior\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [3.14159] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness  \n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (!style.isJOTFC) { fail.s(\"make a single output, nothing else\"); }\n  if (!style.hasOTAOL) { fail.s(\"make one call to alert on a number literal\"); }\n\n  // finalize and award points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker );",
            "phase": 1,
            "testMode": false,
            "text": "Print (alert) the value of pi truncated to 5 decimal places.  \nTruncating is not rounding, it is just chopping.  \nTruncating a number to 5 decimal places then is using all of the number to the left of the decimal point, and the first 5 digits to the right of the decimal point and leaving off all the other digits further out to the right.\nThe value of pi is 3.14159265358979, more or less.\n",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-01-07T05:35:12.273Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/const.pi.mp4"
        },
        {
            "_id": {
                "$oid": "55a44eb43e2a18845b81c531"
            },
            "createdAt": {
                "$date": "2015-07-13T23:50:12.001Z"
            },
            "folder": "55a43416202773475826e311",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "<b>DIY:</b> Length of a mile",
            "num": 5,
            "onSubmit": "// I/O pairs for functional behavior\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [5280] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness  \n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (!style.isJOTFC) { fail.s(\"make a single output, nothing else\"); }\n  if (!style.hasOTAOL) { fail.s(\"make one call to alert on a number literal\"); }\n\n  // finalize and award points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker );",
            "phase": 1,
            "testMode": false,
            "text": "Write a program that prints (alert) the number of feet in a mile.  The output is simply one number, an integer. If this is not something you remember directly, then just Google it up.",
            "type": "diy",
            "updatedAt": {
                "$date": "2018-01-07T05:35:17.836Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": ""
        },
        {
            "_id": {
                "$oid": "55a450bc3e2a18845b81c532"
            },
            "createdAt": {
                "$date": "2015-07-13T23:58:52.698Z"
            },
            "folder": "55a43416202773475826e311",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "<b>DIY:</b> Eighth month name",
            "num": 6,
            "onSubmit": "// I/O pairs for functional behavior\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [\"August\"] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness  \n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (!style.isJOTFC) { fail.s(\"make a single output, nothing else\"); }\n  if (!style.hasOTAOL) { fail.s(\"make one call to alert on a string literal\"); }\n\n  // finalize and award points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker );",
            "phase": 1,
            "testMode": false,
            "text": "Write a program that prints (alert) the name of the 8th month of the year.  \nFor those who don't have a calendar, this is spelled August .\n",
            "type": "diy",
            "updatedAt": {
                "$date": "2018-01-07T05:35:23.513Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": ""
        },
        {
            "_id": {
                "$oid": "55a450bd3e2a18845b81c533"
            },
            "createdAt": {
                "$date": "2015-07-13T23:58:53.333Z"
            },
            "folder": "55a43416202773475826e311",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "<b>DIY:</b> Boolean value <i>false</i>",
            "num": 7,
            "onSubmit": "// I/O pairs for functional behavior\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [false] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness  \n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (!style.isJOTFC) { fail.s(\"make a single output, nothing else\"); }\n  if (!style.hasOTAOL) { fail.s(\"make one call to alert on a boolean literal\"); }\n\n  // finalize and award points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker );",
            "phase": 1,
            "testMode": false,
            "text": "The boolean value indicating falsehood is the special keyword <i>false</i> . \nKeywords are not the same as text or string data; we do not put them in quotes to use them.  \nPrint out the boolean value indicating falsehood.\n",
            "type": "diy",
            "updatedAt": {
                "$date": "2018-01-07T05:35:29.882Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": ""
        },
        {
            "_id": {
                "$oid": "55a452103e2a18845b81c534"
            },
            "createdAt": {
                "$date": "2015-07-14T00:04:32.179Z"
            },
            "folder": "55a43416202773475826e311",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "<b>DIY:</b> One fourth",
            "num": 8,
            "onSubmit": "// I/O pairs for functional behavior\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [0.25] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness  \n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (!style.isJOTFC) { fail.s(\"make a single output, nothing else\"); }\n  if (!style.hasOTAOL) { fail.s(\"make one call to alert on a number literal\"); }\n\n  // finalize and award points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker );",
            "phase": 1,
            "testMode": false,
            "text": "Print out (alert) the number that is the decimal representation of the fraction one fourth.  Do not try to get JavaScript to do any division, \nsimply have it print out the proper decimal number directly.",
            "type": "diy",
            "updatedAt": {
                "$date": "2018-01-07T05:35:35.162Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": ""
        },
        {
            "_id": {
                "$oid": "55a458514ced6aa35e53feb1"
            },
            "createdAt": {
                "$date": "2015-07-14T00:31:13.488Z"
            },
            "folder": "53cef2444fae0fbd7f731233",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Overview",
            "num": 0,
            "onSubmit": "// I/O pairs for functional correctness\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [2] ];\n\n// callbacks for grading choices\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // grade functional\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n         if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // grade style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (!style.isJOTFC) { fail.s(\"make a single output, nothing else\"); }\n  if (!style.hasOTAOBE) { fail.s(\"write one call to alert using the number expression shown\"); }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);",
            "phase": 1,
            "testMode": false,
            "text": "Expressions are how we take basic data values and combine them with operations to make new data values.  \nExpressions retrieve data values stored in memory and also use constants (literals).  \n<br/><br/>\nOperations for numbers include +, -, *, /, and %.  \n<br/><br/>\nOperations on strings include + (concatenation) and various functions to take portions of a string (substring).  \n<br/><br/>\nOperations on boolean include && (and), || (or), ! (not), and other functions we will see later.\n<br/><br/>\nTo complete this problem, type the following JavaScript line and run it: \n<pre>\n <b>&nbsp&nbsp <b> alert(1+1);</b> // number 1 plus number 1 </b>\n</pre>\n",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-02-07T12:53:51.57Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/expr.overview.mp4"
        },
        {
            "_id": {
                "$oid": "55a47ab094a5e3af6530c984"
            },
            "createdAt": {
                "$date": "2015-07-14T02:57:52.602Z"
            },
            "folder": "53cef2574fae0fbd7f731234",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Prof age",
            "num": 1,
            "onSubmit": "// I/O pairs\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [29] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n  // if (ff) { fail.s(\"no style points since functional failed\"); }\n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (style.nDV != 1) { fail.s(\"you need only one variable;\", (1/4) ); }\n    if (style.nUDV > 0) { fail.s(\"you used undeclared variable(s): declare all variables;\", (1/4) ); }\n    if (style.nUUDV > 0) { fail.s(\"you declared variable(s) that were not used: use what you declare;\", (1/4) ); }\n    if (!style.hasOTAOV) { fail.s(\"the one call to alert must have a variable as parameter\", (1/4) ); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick>\n<b>Write a program that creates a variable named \"profAge\".  Then assign my age to it, and print out the value of the variable.</b>\n</font>\n</p>\n<p>\nFor reference, I am 29 years old.  I have been for a long time :) .\n</p>\n<p>\nTo complete this problem, you will need to declare the variable requested, and assign the appropriate value to that variable.\nThen in an alert statement, simple type the variable name.  Using the name of a variable in an expression is called \"referencing the variable\".\nWhen a variable is referenced, the data value stored in it is retrieved for use.\n</p>",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-01-14T13:00:00.519Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/var.profage.mp4"
        },
        {
            "_id": {
                "$oid": "55c4286db270a8af25e3e410"
            },
            "createdAt": {
                "$date": "2015-08-07T03:39:25.765Z"
            },
            "folder": "53cef2574fae0fbd7f731234",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Overview",
            "num": 0,
            "onSubmit": "// I/O pairs\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [5] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n  // if (ff) { fail.s(\"no style points since functional failed\"); }\n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (style.nDV != 1) { fail.s(\"only need to declare a single variable;\", (1/4) ); }\n    if (style.nUDV > 0) { fail.s(\"you used undeclared variable(s): declare all variables;\", (1/4) ); }\n    if (style.nUUDV > 0) { fail.s(\"you declared variable(s) that were not used: use what you declare;\", (1/4) ); }\n    if (!style.hasOTAOV) { fail.s(\"write one call to alert, using a variable as parameter;\", (1/4) ); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);",
            "phase": 1,
            "testMode": false,
            "text": "<b><font color=firebrick>Variables</font></b>\n<p>\nVariables are storage locations in memory with symbolic names. These symbolic names are used in your program to specify where in memory to store data values, and which memory locations to retrieve data from. \n<ul>\n<li>The main mechanism for storing data into memory is the assignment statement\n<li> retrieving data from memory is done by expression evaluation\n</ul>\n</p>\nTo complete this problem, type this variable declaration, with an initialization (assigning the first value to the variable):\n<font size=+1>\n<pre>\n    var x = 5;\n</pre>\n</font>\nThen type this to do retrieval:\n<font size=+1>\n<pre>\n    alert(x);\n</pre>\n</font>\nThe variable name \"x\" here is a simple expression.  Evaluating such as expression means going to the storage location for \"x\" in memory and retrieving the data value stored there.  Since the alert statement evaluates the expression inside the parentheses, it retrieves the 5 that was stored in \"x\" when it was declared.\n</p>\n<p>\nRun your program locally. You have declared (created) a variable \"x\", stored a value 5 into it, \nand then retrieved that value to print out. Now submit it for scoring.\n<br/><br/>\nNote: If you did as requested, you will see that you got no style points. The error message says\n<pre>\n    Style error: first line must be: \"use strict\";\n</pre>\nMaking this the first line of a JavaScript program tells the language processor to be sure you declare all variables you use. This means all variables like \"x\" must have a \"var x\" declarations someplace in the program. Good style is to put your declarations up top. We will cover this in more detail as we go along and get more complex language structure to work with.\n<br/><br/>\nSo from here on (unless noted otherwise) make sure the first line of your program is this:\n<pre>\n  \"use strict\";\n</pre>\nAdd that line and try submitting again.",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-01-14T12:59:54.269Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/var.overview.mp4"
        },
        {
            "_id": {
                "$oid": "55c572974a352c5a5ee89725"
            },
            "createdAt": {
                "$date": "2015-08-08T03:08:07.579Z"
            },
            "folder": "53cef2444fae0fbd7f731233",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Boolean \"AND\"ing",
            "num": 5,
            "onSubmit": "// I/O pairs to define functional behavior\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [false] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (!style.isJOTFC) { fail.s(\"use a single output, nothing else\"); }\n  if (!style.hasOTAOBE) { fail.s(\"write one call to alert, using a boolean expression\"); }\n\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick>Write a program that prints out the result of combining the boolean value <b>true</b> with the boolean value <b>false</b>\nusing the <b>AND</b> operator (written <b>&&</b>). </font> We often refer to this as \"AND-ing two boolean expressions together\".\n</p>\n<p>\nWhen we combine two number values together using a number operation (like *), the result is a number.  In the same way, the result of combining two boolean values together using a boolean operator (like &&) will be a boolean value.  There are only 2 boolean values, so evaluating a boolean expression will produce either <b>true</b> or <b>false</b>.  Which value we get depends on the rules for the\noperator being used.  For AND, the result will only the true if both the operands are true.  If one of the two operands is false (or both), the\nresult will be false as well.  A table that expresses these 4 possible combinations along with the result is called a <b>truth table</b>.\n</p>\n<p>\nGiven these rules, what do you expect your program to print when you evaluate the expression <b> true && false </b> ?\n</p>\n<p>\nHere is the full truth table for the logical AND operator:\n<pre>\n   P        Q          P && Q\n ------   -------    ----------         logical AND (also called conjunction)\n  true     true       true\n  true     false      false\n  false    true       false\n  false    false      false\n</pre>\n</p>\n\n",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-02-07T12:53:51.579Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/expr.booland.mp4"
        },
        {
            "_id": {
                "$oid": "55c576d34a352c5a5ee8972a"
            },
            "createdAt": {
                "$date": "2015-08-08T03:26:11.332Z"
            },
            "folder": "53cef2444fae0fbd7f731233",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "<B>DIY:</b> Boolean \"OR\"ing",
            "num": 11,
            "onSubmit": "// I/O pairs to define functional behavior\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [true] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (!style.isJOTFC) { fail.s(\"use a single output, nothing else\"); }\n  if (!style.hasOTAOBE) { fail.s(\"write one call to alert, using a boolean expression containing the || operator\"); }\n\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick>Write a program that prints out the result of combining the boolean value <b>false</b> with the boolean value <b>true</b>\nusing the <b>OR</b> operator ( written <b>||</b> ). </font> \n<br/>We often refer to this as \"OR-ing two boolean expressions together\".\n</p>\n<p>\nThe rules for OR are these: the result will only be false if both the operands are false.  If one of the two operands (or both) is true, the\nresult will be true as well.\nGiven these rules, what do you expect your program to print when you do false || true ?\n</p>\n<p>\nHere is the full truth table for the logical OR operator:\n<pre>\n   P        Q          P || Q\n ------   -------    ----------         logical OR (also called disjunction)\n  true     true       true\n  true     false      true\n  false    true       true\n  false    false      false\n</pre>\n</p>\n",
            "type": "diy",
            "updatedAt": {
                "$date": "2018-02-07T12:53:51.586Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": ""
        },
        {
            "_id": {
                "$oid": "55ca9c52574af0356821f89d"
            },
            "createdAt": {
                "$date": "2015-08-12T01:07:30.052Z"
            },
            "folder": "53cef2574fae0fbd7f731234",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "<B>DIY:</b> Fun with Distance, Time, and Speed",
            "num": 11,
            "onSubmit": "// I/O points\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [18.53526570048309] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n  // if (ff) { fail.s(\"no style points since functional failed\"); }\n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (style.nDV > 10) { fail.s(\"no need to declare more than 10 variables;\", (1/8) ); }\n    if (style.nDV < 4) { fail.s(\"declare and use at least 4 variables;\", (1/8) ); }\n    if (style.nUDV != 0) { fail.s(\"you used undeclared variable(s): declare all variables;\", (1/16) ); }\n    if (style.nUUDV != 0) { fail.s(\"you declared variable(s) that were not used: use what you declare;\", (1/16) ); }\n    if ( !( style.hasOTAOV || style.hasOTAOBE ) ) { \n      fail.s(\"use one alert, with a string expression parameter containing variables;\", (3/4) ); \n    }\n  }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick><b>\nWrite a program to solve the following word problem.\n</b></font>\nPrint out a single number (no text with it).\n</p>\n<p>\nWord problem: A bicyclist travels 43.6 miles in 3 hour and 27 minutes.  What was the average speed of the cyclist in feet per second?  \n</p>\n<p>\nTo solve this we would need to compute the total number of feet traveled, and then divide that by the total number of seconds it took\nto travel that distance.  Since we are practicing declaring and using variables, use at least 4 variables; there is no need to use more than 10.",
            "type": "diy",
            "updatedAt": {
                "$date": "2018-01-14T13:01:01.802Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": ""
        },
        {
            "_id": {
                "$oid": "55caa592574af0356821f8a5"
            },
            "createdAt": {
                "$date": "2015-08-12T01:46:58.107Z"
            },
            "folder": "53cef2574fae0fbd7f731234",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "<B>DIY:</b> Final class grade",
            "num": 12,
            "onSubmit": "// I/O points\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [\"Future Coder has an average grade of 85.775\"] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n  // if (ff) { fail.s(\"no style points since functional failed\"); }\n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (style.nDV > 7 ) { fail.s(\"no need to declare more than 7 variables;\", (1/8) ); }\n    if (style.nDV < 3 ) { fail.s(\"declare and use at least 3 variables;\", (1/8) ); }\n    if (style.nUDV != 0) { fail.s(\"you used undeclared variable(s): declare all variables;\", (1/16) ); }\n    if (style.nUUDV != 0) { fail.s(\"you declared variable(s) that were not used: use what you declare;\", (1/16) ); }\n    if ( !( style.hasOTAOV || style.hasOTAOBE ) ) { \n      fail.s(\"use one alert, with a string expression parameter containing variables;\", (3/4) ); \n    }\n  }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick><b>Write a program to compute and print the final course\ngrade for a student, expressed as a number between 0 and 100.\n</b></font>\n</p>\n<p>\nThe student's name is Future Coder, and the student has 4 assignment grades: 99.0, 87.5, 71.8, and 97.2. The student also has these two exam grades: 74.0 and 88.25.  Assignments \nare worth 60% of the final grade, and exams are worth 40%.   \n</p>\n<p>\nPrint the average grade using this output format:\n<pre>\nFuture Coder has an average grade of 85.775\n</pre>\nNo blanks are ahead of the \"Future\" and no blanks follow the number. Since we are practicing declaring and using variables, have at least 3 and no more than 7.",
            "type": "diy",
            "updatedAt": {
                "$date": "2018-01-14T13:01:07.104Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": ""
        },
        {
            "_id": {
                "$oid": "55e5c785741badf5159ee9d3"
            },
            "createdAt": {
                "$date": "2015-09-01T15:43:01.399Z"
            },
            "folder": "53cef2744fae0fbd7f731236",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Counter: count loop body execs",
            "num": 2,
            "onSubmit": "// define I/O function points\nvar soln_inputs = [ [] ];\nvar soln_outputs = [ [26] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    if (style.nAFL != 1) { fail.s(\"use one for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);      ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick>\n<b>Write a program that will count how many times a loop body executes. The parameters of the loop (start, stop, increment) will be constants (0, 25, 1).\n</b></font>\n</p> \n<p>\n Use a for loop, and run it from 0 to 25, including both 0 and 25.\nYou will also need to create and use a \"counter\", a variable that has its value bumped up by 1 when some event happens that you wish to count.\nSince we are summing, the counter will be initialized to 0 (the additive identity) outside the loop.\n<br/><br/>\nIn this case, the event we want to count is each time the loop body executes.  To do this we will put the increment statement for the counter\ninside the loop body.\nWhen the loop is done, print out the count.\n<br/><br/>\nWe have seen that the loop index variable acts as a counter of sorts.  In this lesson we are learning that the general idea of a counter is useful in many contexts, and we can create a counter as needed with a variable that we increment at appropriate times or points during execution.\n<br/><br/>\n<b>Style:</b> Use one for loop and no other loops.\n\n\n\n\n\n",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-01-24T15:48:52.229Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/forloop.counter.mp4"
        },
        {
            "_id": {
                "$oid": "55f48ff09cb735dc4a3e1545"
            },
            "createdAt": {
                "$date": "2015-09-12T20:49:52.73Z"
            },
            "folder": "540fbc9d54b9a690402df1d9",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Overview: input errors, and \"return\"",
            "num": 0,
            "onSubmit": "var soln_inputs = [ [] ];\nvar soln_outputs = [ [5] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLAP != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLF != 0) { fail.s(\"use no for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                         ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick>\n<b>Overview: Input errors\n</b></font>\n</p> \n<p>\nUp to now we have asked the user for input and have assumed that the user provides values that correctly match what we want.\nHowever, we cannot in general write programs using this assumption.  \n<b>Users make errors.</b> We need to write our programs to deal gracefully with such errors.\nAt the very minimum we can detect input errors, notify the user, and end execution.  \nWe might also ask the user to do the input again, correctly and keep asking until the errors end.\nAs we get more sophisticated we could even try to adapt the input values, correct them and use them in a new form.  \n<br/><br/>\nThere are many ways a user can give erroneous input, but for now we will deal with 3 major types:\n<ul>\n<li><b>type error:</b> the user is asked to input a number but give something like \"go heels\", which is not a number\n</li>\n<li><b>format error:</b> the use is asked for an integer, but gives something like 24.713 which is not an integer\n</li>\n<li><b>range error:</b> the user is asked for a positive integer less than 50, but types in something like -5 or 101.\n</li>\n</ul>\nWe will see how to check for each of these in the programs in this section. For now to complete this overview\ntype this code in as the body of function myMain and run it locally (don't submit yet for scoring):\n<br/>\n<pre>\n  var x =5;\n  alert(x);\n  // return;\n  var y=7;\n  alert(y);\n</pre>\nNote that the \"return\" statement is commented out initially.  When we run this program we see two alert boxes pop up, the first with ouput \"5\" and the second with output \"7.\n<br/><br/>\nNow remove the comment slashes before the \"return\" line.  Now the return statement will execute.  Run the code again.  \nNow what you will see is that the code before the \"return\" executes, and the code after does not.  So the output now is the single output \"5\" and then \nmyMain stops executing at the return.  We can use the \"return\" statement at any point in\na function to make the function cease executing and go back to the part of the program where it was called.\n<br/><br/>\nSubmit the altered code, with the return, for scoring.",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-02-01T15:56:04.669Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/valid.overview.mp4"
        },
        {
            "_id": {
                "$oid": "564224643bdff01f740bcf9e"
            },
            "createdAt": {
                "$date": "2015-11-10T17:07:48.725Z"
            },
            "folder": "53cef35d4fae0fbd7f73123f",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Array handling",
            "num": 2,
            "onSubmit": "var soln_inputs = [ [] ];\nvar soln_outputs = [ [\"looping\",360,\"recursion\",360] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL > 0) { fail.s(\"use no  while loops\"); }\n    if (style.nFLAP > 1) { fail.s(\"use 1 for loops\"); }\n    if (style.nAFD < 3) { fail.s(\"need at least 3 functions declared\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                 ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick>\n<b>Write a program that will sum up the elements in an array.  Do it two ways: iteratively (with a loop), and recursively. For each way, print the sum.\n</b></font>\n</p> \n<p>\nWe saw a task earlier (in the overview) that could be done with a loop or with recursion, both giving the same functional results.  \nIt turns out that any computation that can be done with recursion can be done with looping (and no recursion). Recursion is the functional way to do looping.\nThis is largely a theoretical consideration, as there are still many times when looping is better to use (more efficient in time and memory use).\n</p>\n<p>\nIn this program we show another example of doing one computation both recursively and non-recursively.\nWe also illustrate here the use of recursion in manipulating data structures (an array).  \nWe will write a program that processes an array of numbers two ways.\nFirst in myMain we will declare an array variable and initialize it with these 8 integers:\n<pre>\n  var nums = [10,20,30,40,50,60,70,80];\n</pre>\n</p>\n<p>\nNext we will write an iterative function that will receive an array as a parameter.  It will then sum up\nall the elements in the array and return that sum.  The iterative function will get the work done\nwith a for loop using a pattern we have done several times in other problems.\n</p>\n<p>\nNext we write a recursive function to do the same computation.  We will pass in an array, and return the sum of the elements in that array.\nThe base case happens when the array that is passed in has no elements.  We detect this case by looking at the length of the parameter array,\nand if that length is 0 we return 0 as the sum (no recursing needed).\nIf the array has a length or 1 or larger, then the strategy for recursion is to \"separate\" the array into two pieces: the first element, and the array that\nis left when we take the parameter array and take off the first element.  We can call our function recursively on this shortened array, and it will\nreturn the sum of the elements in the parameter array slots 1 on up.  We then add the first element to that and get the sum of the entire array.\n</p>\n<p>\nFinally write a myMain function that will first call the iterative function on the array, and then call the recursive function on the array.\nPrint \"looping\" and then with a second alert, print the sum returned by the iterative function. \nThen print \"recursion\" and with another alert, print the sum given by the recursive function.\n</p>\n<p>\n<b>Computer science note.</b>\nWe have said one very important aspect of a recursive function is to make sure that the recursive case is given a smaller problem to work on (and that\nthe smaller problem is shrinking down to a base case).  In previous examples, the smaller problem meant passing a smaller number as parameter.\nHere we are passing a smaller array... an array that is shorter by one element.  We are headed to the base case of a zero-length array.\n</p>",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-04-03T01:29:01.675Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/recur.array.mp4"
        },
        {
            "_id": {
                "$oid": "564ab50e3bdff01f740bd359"
            },
            "createdAt": {
                "$date": "2015-11-17T05:03:10.569Z"
            },
            "folder": "5902b4167bb0b09c0d2a6422",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Canvas and basic drawing",
            "num": 8,
            "onSubmit": "var soln_inputs = [ [] ];\nvar soln_outputs = [ [] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error in your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    //if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\", (2/5)); }\n    //if (style.nAFL > 5 ) { fail.s(\"We need 4 or fewer for loops\", (1/10) ); }\n    //if (style.nAWL > 1) { fail.s(\"Use no more than 5 while loop\", (1/10) ); }\n    if (style.nTFD < 3) { fail.s(\"We need at least 3 functions declared and used\", (2/5) ); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}  \n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                  ",
            "phase": 2,
            "testMode": true,
            "text": "We will write a program that will use the graphics features in HTML5 to make a simple drawing.\nHTML5 has a canvas tag that will set apart a rectangular space on a page.\nThen we establish a 2D drawing to go onto the canvas.  Then we place individual items into that drawing.\n<br/><br/>\nCut and paste the following JavaScript right after the \"use strict\"; line in your program:\n<pre>\n\n//=== supplied canvas stuff ==================================================\nvar tab = window.open();\nvar webPage = makeHTMLCanvas();  // alert(webPage);\nvar PIC = getCanvasContext();    // the canvas context... draw to this global var\n\nfunction makeHTMLCanvas() {\n  var htmlStr=\"\";\n  htmlStr += \"&lthtml>&lthead>&lt/head>&ltbody>\";\n  htmlStr += \"&lth1>Draw a Picture!!&lt/h1>\";\n  htmlStr += \"&ltcanvas id='myCanvas' width=800 height=600 \";\n  htmlStr += \"style='border:1px solid #000600;'>&lt/canvas>\";\n  htmlStr += \"&lt/body>&lt/html>\";\n  tab.document.write(htmlStr);\n  return htmlStr;\n}\n\nfunction getCanvasContext() {\n  var c = tab.document.getElementById(\"myCanvas\");\n  var context = c.getContext(\"2d\");\n  return context;\n}\n\n//=== end supplied canvas stuff ==================================================\n\n</pre>\n<br/>\nAfter this pre-supplied code, then write the code for your program.\n<br/><br/>\nYou may find this <a href=\"http://www.html5canvastutorials.com/\" target=\"_blank\">HTML5 Canvas tutorial </a> helpful.",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-01-05T18:59:04.554Z"
            },
            "value": {
                "correct": "0",
                "style": "0"
            },
            "vidURL": ""
        },
        {
            "_id": {
                "$oid": "564bb14a7896029a225fa682"
            },
            "createdAt": {
                "$date": "2015-11-17T22:59:22.41Z"
            },
            "folder": "5902b4167bb0b09c0d2a6422",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "<b>DIY:</b> Parameterize drawCircle",
            "num": 14,
            "onSubmit": "var soln_inputs = [ [] ];\nvar soln_outputs = [ [] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error in your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    //if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\", (2/5)); }\n    //if (style.nAFL > 5 ) { fail.s(\"We need 4 or fewer for loops\", (1/10) ); }\n    //if (style.nAWL > 1) { fail.s(\"Use no more than 5 while loop\", (1/10) ); }\n    if (style.nTFD < 3) { fail.s(\"We need at least 3 functions declared and used\", (2/5) ); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}  \n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                  ",
            "phase": 2,
            "testMode": true,
            "text": "\nStart with the code we wrote in class for \"Canvas and basic drawing.\nIn that code we wrote a function called \"drawCircle\" that took no parameters.\nWe also wrote a function called \"drawRectangle\" that did (eventually) get some parameters so we could\ncall it repeatedly and make rectangles get drawn at different places around the canvas.\n<br/><br/>\nWrite a version of \"drawCircle\" that is similarly parameterized.",
            "type": "diy",
            "updatedAt": {
                "$date": "2018-01-05T18:59:04.564Z"
            },
            "value": {
                "correct": "0",
                "style": "0"
            },
            "vidURL": ""
        },
        {
            "_id": {
                "$oid": "564bb23f7896029a225fa684"
            },
            "createdAt": {
                "$date": "2015-11-17T23:03:27.445Z"
            },
            "folder": "5902b4167bb0b09c0d2a6422",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "<b>DIY:</b> makePersonObject 2",
            "num": 19,
            "onSubmit": "var soln_inputs = [ [ 123,\"smith\",10,20,\n                      \"yes\",234,\"jones\",20,30,\n                      \"yes\",345,\"miller\",20,25,\"no\" ] ];\nvar soln_outputs = [ [\"total payroll: 1300\",\"high rate: jones\"] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL != 1) { fail.s(\"use 1 while loop\"); }\n    if (style.nFLAP != 2) { fail.s(\"use 2 for loop\"); }\n    if (style.nAFD < 2) { fail.s(\"need at least 2 function declared\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                   ",
            "phase": 2,
            "testMode": true,
            "text": "Let's modify the previous program \"array of objects\". We will keep the same basic data and computed results, but we will change the structure of the two functions a bit. We are going to move the user input out of makePersonObject and relocate it to myMain. The values from the user will be passed to makePersonObject as arguments (4 arguments); then in makePersonObject the values of the arguments will be put into the fields when the object is manufactured. As before, makePersonObject will return the new object and in myMain that object will be put into an array. \n<br/><br/>\nOutput should be the same as before.  \nFirst, compute the total payroll. To do this, go through the array and sum up all the amounts\npaid to each worker.  Print this out with this format: \"total payroll: 1234.56\"\n<br/><br/>\nThen go through the array and find the name of the person with the highest hourly pay rate.\nPrint out the name in this format: \"high rate: smith\"",
            "type": "diy",
            "updatedAt": {
                "$date": "2018-01-05T18:59:04.572Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": ""
        },
        {
            "_id": {
                "$oid": "5650a4907896029a225fa74a"
            },
            "createdAt": {
                "$date": "2015-11-21T17:06:24.74Z"
            },
            "folder": "5902b4167bb0b09c0d2a6422",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "<B>W.Graphics (35 pts):</B> Draw a Cards Picture",
            "num": 23,
            "onSubmit": "var soln_inputs = [ [] ];\nvar soln_outputs = [ [\"not auto graded\"] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    //if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\", (2/5)); }\n    //if (style.nAFL > 5 ) { fail.s(\"We need 4 or fewer for loops\", (1/10) ); }\n    //if (style.nAWL > 3) { fail.s(\"Use only 3 or fewer while loops\", (1/10) ); }\n    if (style.nTFD < 4) { fail.s(\"We need at least 4 functions declared and used\", (2/5) ); }\n    fail.s(\"style will be manually graded\");\n  }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}  \n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                  ",
            "phase": 2,
            "testMode": true,
            "text": "(30-5 pts) Due Sat. 12/5, 11:59 pm\n<br/><br/>\nYou will write a program that will use HTML5 graphics to draw a picture of your card deck and hands.\n<br/><br/>\nSee this\n<a href=\"http://www.cs.unc.edu/~stotts/COMP110-f15/assn/w.graphics.html\" target=\"_blank\" >\ndetailed description.\n</a>\n<br/><br/>\n<b>TO GET SCORED</b>\n<br/>\nThe auto-grader will score this a 0 for functionality and 0 for style.  It will be manually graded like a previous brick we did (last one in Arrays and Random).\n<br/><br/>\nWhen you are done and wish to have it manually scored, please submit it via the \"submit\" button and then click the \"share\" button on the resulting submission.\nI will see the share request and consider that a request for scoring.\nI will score this assignment one time.",
            "type": "wall",
            "updatedAt": {
                "$date": "2018-01-05T18:59:04.578Z"
            },
            "value": {
                "correct": "30",
                "style": "5"
            },
            "vidURL": ""
        },
        {
            "_id": {
                "$oid": "56548e307896029a225fa7a9"
            },
            "createdAt": {
                "$date": "2015-11-24T16:20:00.975Z"
            },
            "folder": "546eb51f7f212f1d61e5c25c",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "<b>CG:</b> Hands as decks",
            "num": 4,
            "onSubmit": "var soln_inputs = [ [] ];\nvar soln_outputs = [ [\n  \"52 cards: 5S,8D,AH,JC,AS,6C,6S,AC,2D,QD,8S,9S,7H,JS,5C,3C,9C,5D,XS,KC,KH,7S,QC,KD,3H,AD,8H,JH,2S,4D,2C,6D,7C,4H,9H,9D,QH,4C,4S,KS,3D,XD,3S,8C,QS,7D,6H,2H,JD,5H\"\n\n ] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLAP > 1) { fail.s(\"use no more than one while loops\"); }\n    if (style.nFLAP > 5) { fail.s(\"use no more than 5 for loops\"); }\n    if (style.nAFD < 4) { fail.s(\"need at least 4 functions declared\"); }\n  }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ",
            "phase": 1,
            "testMode": true,
            "text": "Start with your code fro CG4.  We are going to make a hand an object (right now it is simply as array of cards).\nNote that decks are arrays of cards with function that move the cards around.\nWe should be able to make a hand a \"deck\" then.\nWe will do with a new \"addCard\" function in the deck object.  We will make the deal method create a new deck with\n0 cards initially, and add in the proper number of cards into the hand from the deck.\n<br/><br/>\nThis one is not scored. To see if your code is working do these things.\n<ol>\n<li>Make a deck of 52 cards</li>\n<li>show the deck... see that the cards are there in order</li>\n<li>shuffle the deck</li>\n<li>show the shuffled deck</li>\n<li>deal a hand of 5 cards from the deck into a variable in myMain</li>\n<li>this hand variable is an object like the deck... so show the hand to see the first 5 cards that were in the deck</li>\n<li>show the deck again... to see the first 5 cards are gone</li>\n<li>shuffle the hand ! yes it is a \"deck\"</li>\n<li>show the hand again to see the cards in new order</li>\n</ol>",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-02-02T00:04:50.026Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": ""
        },
        {
            "_id": {
                "$oid": "5763f0e330ee569f726d4d15"
            },
            "createdAt": {
                "$date": "2016-06-17T12:45:23.898Z"
            },
            "folder": "5763f0b630ee569f726d4d14",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "My First Program",
            "num": 0,
            "onSubmit": "// I/O pairs for functional behavior\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [\"Hello world !!\"] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness  \n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (!style.isJOTFC) { fail.s(\"make a single output, nothing else\"); }\n  if (!style.hasOTAOL) { fail.s(\"make one call to alert on a string literal\"); }\n\n  // finalize and award points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\t\t\t",
            "phase": 1,
            "testMode": false,
            "text": "Our goal here is just to experience running Bricks.\n<br/>\nHowever, this will be your first program, and we will make it a classic.\n<br/>\nType this in the editor window:\n<br/><br/>\n<pre>\n  <b>alert ( \"Hello world !!\" ) ;</b>\n</pre>\n<br/>\nOnce you have typed it, click on the \"test locally\" (orange) button. This makes your browser run your program and you will see any output from that\nprogram pop up on your screen.  As you work on your programs you will use \"test locally\" to determine if your program is computing the\nproper requested outputs.  \n\n<br/><br/>\nAfter running the program locally, click the \"submit for score\" (green) button. This will send your program to my server computer\nfor scoring.  We test your code against some test data to see if it produces correct output. We also look at the code to see if it \nadheres to good structure and style.  We will discuss good style as the semester goes on.\n<br/><br/>\nAfter submitting the program you will receive feedback on how well it worked, and hopefully some points as well.\nYou can submit your code as many times as you like (unless on occasion I indicate a limit to submissions... like for an exam).\nYou will be given the highest score of all the submissions.  So if you get the problem correct, and keep messing with the code\nand break the program, you will still get the full score on it.\n<br/><br/>\nThis is intended to encourage you to make changes to your code and try different ways to get the answers computed.\n<b><i>Feel free to experiment.  Have some fun.</i></b>\n<br/><br/>\nAll your submissions are retained in our database and you can view them below the editor window.  You can reload any submission\nback into the editor window in case you want to write a new program by building on a past one.\n<br/><br/>\nAs the semester goes on, your submission can be used as well to ask for comments or assistance on a program, and to share your \ncode with the instructor for display and discussion in class.",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-01-07T05:24:39.156Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/getstarted.firstprog.mp4"
        },
        {
            "_id": {
                "$oid": "588e552b2eadd0b43c1243b9"
            },
            "createdAt": {
                "$date": "2017-01-29T20:48:43.348Z"
            },
            "folder": "53cef2804fae0fbd7f731237",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Overview",
            "num": 0,
            "onSubmit": "var soln_inputs = [ [] ];\nvar soln_outputs = [ [\"x is positive\"] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    if (style.nAFL != 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                         ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick>\n<b>Conditional Statements\n</b></font>\n</p> \n<p>\nA \"conditional\" statement, or a conditional, is the structure we use in a program to ask a question (a boolean comparison) and take some\naction, or another, based on the answer to the question.  For example, we may request from the user a positive integer between 1 and 100.  \nOnce the user gives a number, we ask the question \"is this number in the correct range?\" and if the answer if \"yes\" we then compute some formula; \nhowever, if the answer is \"no\", we report an error and do NOT try to compute the formula.\n</p>\n<p>\nConditional statements allow us to direct the flow of control in a program; that is, they allow us to skip some blocks of code when appropriate, \nor to choose one of two blocks to execute, but not both.  There are several forms of conditional.  In this module we look at the most common ones:\n<b>if-then</b>, <b>if-then-else</b>, and a \"cascade\" of choices.\n</p>\n<p>\nTo complete this overview, type the following code into the editor (in myMain format), run it locally, then submit it for score:\n<b>\n<pre>\n  var x = 5;\n  if ( x > 0 )  { alert(\"x is positive\");  }\n  if ( x < 0 )  { alert(\"x is negative\");  }\n  if (x === 0)  { alert(\"x is zero\");  }\n</pre>\n</b>\nOnce you have done this for score, try running the code with different values assigned to x, and see the different outputs you get (run\nthese trials locally only, do not submit for score).\nFor example, if you replace the first line with\n<b>\n<pre>\n  var x = -24;\n</pre>\n</b>\nThen your output should indicate that x is negative.\n</p>",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-02-01T15:53:36.927Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/cond.overview.mp4"
        },
        {
            "_id": {
                "$oid": "58921594a873c2375a7d6ca8"
            },
            "createdAt": {
                "$date": "2017-02-01T17:06:28.062Z"
            },
            "folder": "53cef2444fae0fbd7f731233",
            "language": "javascript",
            "maxSubmissions": "",
            "name": "Modulo ( % )",
            "num": 4,
            "onSubmit": "// I/O pairs to define functional behavior\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [2] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (!style.isJOTFC) { fail.s(\"use a single output, nothing else\"); }\n  if (!style.hasOTAOBE) { fail.s(\"write one call to alert using the number expression requested\"); }\n\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n     ",
            "phase": 1,
            "testMode": false,
            "text": "<p>\n<font color=firebrick><b> Write a program that prints the remainder when 26 is divided by 3 (integer division).</b></font>\n</p>\n<p>\nTo do this, we will use the modulo operator (or mod operator) which is expressed with the \" % \" symbol.  The mod operator can be thought of as the\n\"remainder\" operator.  If we do division on numbers in JavaScript we get floating point (or real) arithmetic. With this division, we would expect the expression \n<pre>\n  26 / 3 \n</pre>\nto produce the floating point number 8.66666666, or 8 2/3 .  In integer division (not something JavaScript does) we would say the result is 8, with 2 left over.  So what we want for remainder in this problem is the 2 in the numerator of the 2/3 remainder.  \"Two left over\".\n<br/><br/>\nIn modular arithmetic (using the mod operator) the evaluation uses integer division and the results are expressed as an integer and a remainder.  Thus we solve this problem this way:\n<pre>\n   26 % 3\n</pre>\nThe mod operator ( % ) is defined this way: a % b is the <i>remainder</i> when a is divided by b, using integer division. \nHere, the integer 3 goes into 26 completely 8 times, with 2 left over.  Therefore, the expression produces the remainder 2. Once\nyou have programmed the proper code for this problem, try other values to make sure you see how the % operator works.\nFor example, try these:\n<pre>\n  5 % 12   // expect 5\n 10 % 5    // expect 0\n  5 % 5    // expect 0\n 10 % 0    // expect error, divide by 0, Javascript gives Nan for \"Not a Number\"\n 18 % 12   // clock face is mod 12... 18 oclock is really 6 oclock PM\n</pre>\nTry some negative numbers as well.\n<br/><br/>\nOne commonly understood example of modular arithmetic is the common clock face.\nAs the hands go around over and over, we do not get 13 o'clock, then 25 o'clock, then 37 o'clock, etc as time goes by.\nRather the \"time\" resets at 12 every revolution.  So instead of 13 o'clock, we get 1 o'clock again.",
            "type": "twit",
            "updatedAt": {
                "$date": "2018-02-07T12:53:51.577Z"
            },
            "value": {
                "correct": "1",
                "style": "1"
            },
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/expr.modulo.mp4"
        },
        {
            "_id": {
                "$oid": "5913d77b0ad67ead1f1c94ec"
            },
            "num": 1,
            "type": "twit",
            "phase": 1,
            "name": "Concept Overview: The Great 8",
            "folder": "5763f0b630ee569f726d4d14",
            "language": "javascript",
            "testMode": false,
            "maxSubmissions": "",
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/getstarted.great8.mp4",
            "text": "<p>In this problem we will give a broad overview of the concepts we will be learning over the modules of this course.\n</p>\n<p>\nThere are literally hundreds of programming languages in use today.  Some date back to the late 50's and early 60's (like FORTRAN, COBOL and Lisp).  Some are only a few years old (like Rust, Go, Clojure, and TypeScript).  There are several major styles of programming but the one that we will be using here in this course, and the style that is predominant all over, is called <b>imperative programming</b>.  In an imperative programming language, data values are stored in named locations in computer memory (called the program <b>state</b>) and programming language statements make changes\nto the program state. \n</p>\n<p>\nWe don't need to worry about the differences between imperative programming and other styles; that is for later courses.\nHowever, we do want to understand the major concepts that are in ALL imperative programming languages.\nThere are seven:\n<pre>\n  1)  data and types of data\n  2)  variables: saving data into memory for later use\n  3)  expressions: retrieving data back from memory and combining data to make new values\n  4)  repetition (looping)\n  5)  decision making (conditional statements)\n  6)  procedure abstraction (functions)\n  7)  simple data abstraction (arrays)\n</pre>\n</p>\nThere is also a very important concept 8 that is in most modern programming languages (imperative as well as other styles):\n<pre>\n  8) everything abstraction (objects)\n</pre>\nObjects combine code and data in an abstraction that recapitulates a program itself.  Programming languages with this 8th concept are called \"object-oriented\" languages, and they enable object-oriented programming.\n</p>\n<p>\nWe will call these concepts \"The Great 8\".  As noted, all imperative programming languages have the first 7, and JavaScript has all 8.\nWe will be studying and practicing them one at a time as we move through the lesson modules.\nThe complexity of the programs we write will increase as we add each new concept to our repertoire.\n</p>\n<p>\nTo get credit for this overview, type this in the editor window:\n\n<pre>\n  <b>alert ( \"The Great 8\" ) ;</b>\n</pre>\nOnce you have typed it, click on the \"test locally\" (orange) button. Then submit it for scoring after you see it producing the \nproper output.\n</p>\n\n",
            "value": {
                "correct": "1",
                "style": "1"
            },
            "onSubmit": "// I/O pairs for functional behavior\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [\"The Great 8\"] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness  \n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (!style.isJOTFC) { fail.s(\"make a single output, nothing else\"); }\n  if (!style.hasOTAOL) { fail.s(\"make one call to alert on a string literal\"); }\n\n  // finalize and award points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\t\t\t",
            "createdAt": {
                "$date": "2017-05-11T03:16:11.503Z"
            },
            "updatedAt": {
                "$date": "2018-01-07T05:24:45.221Z"
            }
        },
        {
            "_id": {
                "$oid": "5917e5cb0ad67ead1f1c94ff"
            },
            "num": 6,
            "type": "twit",
            "phase": 1,
            "name": "PEMDAS: Operator precedence",
            "folder": "53cef2444fae0fbd7f731233",
            "language": "javascript",
            "testMode": false,
            "maxSubmissions": "",
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/expr.pemdas.mp4",
            "text": "<p>\n<font color=firebrick><b>Write a program that adds 5 to 10, and then multiplies the result by 3. Print out the result as a single number.</b></font>\n</p>\n<p>\nWe have to be careful in this program to pay attention to the order in which the operations are done.  It can affect the final value\nof the expression, and can give erroneous results if we are not careful.\n</p>\n<p>\nYou may have learned a memory trick in math class pertaining to order of operation evaluation.  Remember PEMDAS?  These are what we call\n<b>operator precedence rules</b>.  The rules tell us which operators must precede which others during evaluation.\n</p>\n<p>\nThe rules are better written P-E-MD-AS I think, as there is no preference for M over D; likewise, no preference for A over S.\nAccording to PEMDAS, when we have an expression to evaluate, we first scan the expression left to right and do all the most deeply nested parentheses first\nas sub-expressions.  Then we scan left to right and do exponentiation.  Then we scan left to right and do all multiplication and division as we come to them.\nFinally, we scan left to right and do all addition and subtraction, as we come to them.\n</p>\n<p>\nIt pays to know PEMDAS, since JavaScript will evaluate expressions following those rules of <b>operator precedence</b>.  But it also pays in\nclarity to use the P part heavily to make sure your expression is evaluated as you intend.  Use parentheses to force the order you want.  Any\nreaders of your code will appreciate it, and you will make fewer mistakes.\n</p>",
            "value": {
                "correct": "1",
                "style": "1"
            },
            "onSubmit": "// I/O pairs for functional behavior\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [45] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness  \n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (!style.isJOTFC) { fail.s(\"use a single output, nothing else\"); }\n  if (!style.hasOTAOBE) { fail.s(\"write one call to alert using the number expression requested\"); }\n\n  // finalize and award points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n    ",
            "createdAt": {
                "$date": "2017-05-14T05:06:19.521Z"
            },
            "updatedAt": {
                "$date": "2018-02-07T12:53:51.58Z"
            }
        },
        {
            "_id": {
                "$oid": "593572471a3334370a76a6b4"
            },
            "num": 6,
            "type": "twit",
            "phase": 1,
            "name": "Complicated boolean expressions",
            "folder": "53f8a24cc2dd4a6c1786a0ac",
            "language": "javascript",
            "testMode": false,
            "maxSubmissions": "",
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/compare.complicated.mp4",
            "text": "<p>\n<font color=firebrick>\n<b>Write a program that compares 3 quantities stored in variable x, y, and z.  We want to know if the values are in numerical order, \nwith x the smallest and z the largest (assume all 3 values are different).\n</b></font>\n</p> \n<p>\nUp to now our boolean comparisons have involved two operands.  Let's look at how to construct more complex expressions that\ninvolve 3 (or more) operands.\n</p>\n<p>\nLet's say we have 3 variables that contain numbers (the same approach shown here works for string data).  We need to decide if all 3 values\nin those variables are different.\nWe cannot simply string the 2-operand comparison together (like some math notation allows).  It will be <i>legal</i> to do this in JavaScript, but the results \nwill be confusing (as it does not do what you think it is doing... what it is really doing is beyond this level of class). \nAll boolean comparisons involve 2 operands and 1 operator, like this\n<pre>\nval1  op  val2 \n</pre>\nfor example\n<pre>\n12 < 15\nx > y\nk <  21\nspeed !== 100\n</pre>\n</p>\n\n<p>\nIf we have 3 variables (values) to compare we must make a collection of 2-value camparisons and use AND (&&) or OR ( || ) to glue them together in the\nway we need.  Consider these:\n<pre>\nvar x=4, y=5, z=6;\nx < y < z            // incorrect way\n(x < y) && (y < z)    // correct way\n</pre>\nWe must compare them pair-wise.  To do this we will need to put parentheses around the pair comparisons to make sure the && has two operands.\nEach expression in parens (like ( x < y ) ) is an expression just like x by itself is an expression.\n</p>\n<p>\nTo complete this problem type in this program and execute it... see if the results are what you expect.  \n<pre>\n\"use strict\";\n\nfunction myMain() {\n  var x = 3;\n  var y = 4;\n  var z = 6;\n\n  var expn = ( x < y ) && (y < z) ;\n  alert(expn);\n}\n\nmyMain();\n</pre>\nTry changing the values of x, y, and z so you can see how different values cause different comparison results.\n</p>\n<p>\n<b>Notes:</b> If you want a bit more explanation, then consider this.\nWhat does it mean to try to do something like alert( 4 < 5 < 6 )?  You may have noticed JavaScript allows this and produces output.\nIn fact, if you try this very experssion you get \"true\" as output... and this may be leading to some confusion.\nWhat JavaScript is doing is systematic... all comparison expressions are two operands and one operator, so JavaScript is doing this:\n<pre>\nalert(  ( 4 < 5 ) < 6 );\n// which simplifies to  alert( true < 6 );\n</pre>\nAnd now we are left wondering... what does it mean is \"true\" smaller than 6 ?  The way this is handled is beyond what we need to do at this point,\nbut JavaScript does find a way to determine this as \"true\".  However to see how confusing this can be try this:\n<pre>\nalert(  4 < 5 < 2 );\n// which becomes alert(  ( 4 < 5 ) < 2 );\n// which becomes  alert(  true < 2 );\n</pre>\nNow we also get true, so this violates our math-ish idea of what we want with  4 < 5 < 2.  This shows that this way of doing things is not what we want for our\nboolean comparisons.  So do them the way of this lesson... 2 at a time, using parentheses for clarity.\n</p>",
            "value": {
                "correct": "1",
                "style": "1"
            },
            "onSubmit": "var soln_inputs = [ [] ];\nvar soln_outputs = [ [true]];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { truVec[i] || fail.f(\"failed functional correctness\"); }\n  }\n  // check for all fn format\n  if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                  ",
            "createdAt": {
                "$date": "2017-06-05T15:01:27.234Z"
            },
            "updatedAt": {
                "$date": "2018-01-24T15:47:55.271Z"
            }
        },
        {
            "_id": {
                "$oid": "59446b56c28ced7e128a7244"
            },
            "num": 5,
            "type": "twit",
            "phase": 1,
            "name": "<b>DIY:</b> Construct car objects",
            "folder": "53cef3104fae0fbd7f73123d",
            "language": "javascript",
            "testMode": false,
            "maxSubmissions": "",
            "vidURL": "",
            "text": "<p>\n<font color=firebrick>\n<b>Write a program that makes 3 car objects, and then prints out the make, model, and year of the oldest of the 3 cars (format shown below).\n</b></font>\n</p> \n<p>\nWe are going to build this program from the code for problem \"Car object\" earlier in this module.\nReload that working program and let's modify it.\nFirst, make myMain be a car object constructor. To do this, rename the myMain to \"makeCarObject\"\nand then remove the alert statement -- we will not do any output inside the object constructor (it will do input prompts).\nTo complete the constructor, put in a return statement that sends back the car object that gets constructed.\n</p>\n<p>\nNext we need a new myMain function.  In this myMain, we will call the constructor makeCarObject 3 times, and save the returned object\neach time in a different variable.  Next we need to decide which car object represents the oldest car.  This would be the one with the smallest\nnumber in the year field of the object.  Then we use the fields of that object to produce the final output.\n</p>\n<p>\nFor output, we will use one alert statement.  In that alert, print the make, model, and year of the oldest car,  and put a \", \" (comma then space) between values.\nFor a red ford ranger built in 1997, it would look like this:\n<pre>\nford, ranger, 1997\n</pre>\n</p>\n<p>\n<b>Development Notes:</b> Other than practicing the object syntax and constructor concept we learned, the challenge in this program is to figure out\nwhich object is the oldest car, in such a way that we can access the object after we figure that.\nOne way to do this is to note that if I have 3 different objects stored in 3 variables (let's say named car1, car2, and car3), then this is a valid\nJavaScript statement:\n<pre>\nvar oldest = car1;\n</pre>\nWhat we do here is create another variable (\"oldest\") and make the value of that new variable the same object as the one stored in \"car1\".\nThis is the same as doing something like this with number data:\n<pre>\nvar x = 5;\nvar y = x;\n// at this point we expect y to contain the value 5\n</pre>\nThen test the other car objects to see if any has a year smaller than the year of the one you have stored in \"oldest\".  Since variable oldest has a car object \nin it, this is valid JavaScript:  \n<pre>\nif (car2.year < oldest.year) { \n   // then save car2 in oldest... you have discovered that car2 is older that the one you started with,\n   // so car2 is now currently your oldest\n}\n</pre>\n</p>\n\n",
            "value": {
                "correct": "1",
                "style": "1"
            },
            "onSubmit": "var soln_inputs = [ [\"ford\",\"ranger\",12345,\"red\",2015,\"dodge\",\"caravan\",34567,\"blue\",2003,\"toyota\",\"corolla\",45678,\"silver\",2009] ];\nvar soln_outputs = [ [\"dodge, caravan, 2003\"] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nTFD < 2) { fail.s(\"must have at least 2 top level function definitions\"); }\n    if (style.nWLF != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                       ",
            "createdAt": {
                "$date": "2017-06-16T23:35:50.744Z"
            },
            "updatedAt": {
                "$date": "2018-02-19T13:25:26.208Z"
            }
        },
        {
            "_id": {
                "$oid": "59502be1f86d54111435cfcc"
            },
            "num": 0,
            "type": "twit",
            "phase": 1,
            "name": "Overview",
            "folder": "544975e48afe161613542b74",
            "language": "javascript",
            "testMode": false,
            "maxSubmissions": "",
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/arrSearch.overview.mp4",
            "text": "<p>\n<font color=firebrick>\n<b>Searching: A big problem\n</b></font>\n</p> \n<p>\nSorting and Searching are two large important categories of problems in Computing Science.\nYou use them all the time in the software you use daily.  Go to eBay, for example, and try to find and buy something you have in mind.\nYou first search for it (find all blue UNC coffee mugs) and then the sort the output (put them in order of lowest price to highest).\nSorting is for later (and perhaps a later class).  \n</p>\n<p>\nSearching is first.  Searching is the process of examining the data elements in a collection (arrays here) to see which elements match some criterion, or meet some requirement we have\nfor the needs of some computation. \"Find all elements in an array that are prime numbers\", or \"Find the first element in an array that is negative\", or \"check the elements in this\narray to see if they are all in alphabetic order\", or \"does this array of names contain someone named \"Jane Doe\".  These are examples of searches.  \n</p>\n<p>\nWe will be learning in this module how to systematically\ngo through an array, looking at every element slot-by-slot and comparing them to each other or to some value we are trying to match.\nMost of the searching we do in arrays will use for-loops.  This is because the array lengths are known and are convenient as loop control parameters.\nType in the following code to search in an array:\n<pre>\n\"use strict\";\n\nfunction myMain() {\n  var arr = [3,11,438,-21,895,67,1101,19,4.3,-6];\n  for (var i=0; i &lt; arr.length; i++) {\n    if ((arr[i]%3)===0) { \n      alert(arr[i] + \": multiple of 3\"); \n    }\n  }\n}\n\nmyMain();\n</pre>\nHere, the for loop allows us to examine the array slots in order, starting at 0 and going to the last slot in use.  Each time we do the loop body\nwe examine the slot number that the loop index variable \"i\" contains as value.  We are looking for multiples of 3, and if we find an array \nelement that is one, we print out that value.\n</p>",
            "value": {
                "correct": "1",
                "style": "1"
            },
            "onSubmit": "var soln_inputs = [ [] ];\nvar soln_outputs = [ [\"3: multiple of 3\",\"438: multiple of 3\",\"-21: multiple of 3\",\"1101: multiple of 3\",\"-6: multiple of 3\"] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }  \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    if (style.nAFL != 1) { fail.s(\"use only 1 for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                                 ",
            "createdAt": {
                "$date": "2017-06-25T21:32:17.016Z"
            },
            "updatedAt": {
                "$date": "2018-03-27T15:33:16.012Z"
            }
        },
        {
            "_id": {
                "$oid": "596a6dc6a69c32e7768f326c"
            },
            "num": 0,
            "type": "twit",
            "phase": 1,
            "name": "Overview",
            "folder": "54603ea9bcc28de248a902fc",
            "language": "javascript",
            "testMode": false,
            "maxSubmissions": "",
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/advFunc.overview.mp4",
            "text": "<p>\n<font color=firebrick>\n<b>Functions are first-class values\n</b></font>\n</p> \n<p>\nFunctions in JavaScript are what we call \"first class values\".  This means a function is a \"value\" of some type (type \"function\") just as\n5 is a value of type number.  <b>First class values can be assigned to variables.</b>\nWe are already familiar with this using number (or string) data. Consider this code:\n<pre>\n  var x = 8;\n  var y;\n  y = x;\n  alert(x);\n  alert(y);\n</pre>\nWe exect that 8 will get printed by each alert statement.  By assigning 8 to x, and then by assigning the contents of x to y, we expect that the variable \"y\" is, in essence,\na name for the value 8 just as \"x\" is a name for the value 8.  The value 8 is the same, no matter which name (variable) we use to denote the value.  Either way, using either variable,\nwe get the number value 8, the same value that we get when we double the number value 4.  There is only one number value 8, but we may denote it many different ways.\n</p>\n<p>\nNow consider this code:\n<pre>\n\"use strict\";\n\nfunction myMain ( ) {\n   alert( double(5) );\n}\n\nfunction double ( n ) {  return 2*n; }\n\nmyMain();\n</pre>\nIn this program we define a function \"double\" that takes one argument.  When called, function \"double\" multiplies its argument by 2 and returns that value.\nWe have defined using the \"function\" keyword that we are accustomed to using for function definitions.  Function \"myMain\" calls \"double\" on the number value 4 and \nalerts the returned result.\n</p>\n<p>\nNow let's add some code to myMain:\n<pre>\n\"use strict\";\n\nfunction myMain ( ) {\n  var dubble;\n  dubble = double; // assigns the function value bound to \"double\" to the name \"dubble\"\n  alert( double(5) );  // note by color that \"double\" is a global name\n  alert( dubble(5) );  // note by color that \"dubble\" is a local name inside myMain\n}\n\nfunction double ( n ) {  return 2*n; }\n\nmyMain();\n</pre>\nThis shows one function (the code that multiplies its argument by 2) with two different names (\"double\", and \"dubble\").\nWe can make that function code execute by calling it with the \"double\" name, or with the \"dubble\" name; we do both in this program.\n</p>\n<p>\nThis is the same thing we did before with a number value, except we have now done it with a function value.  The function value\nis the code that constitutes the definition, and that is executed when the function runs.  We say that the names \"double\" and\n\"dubble\" are <b>bound</b> to the function value.  One way to bind a name to a function value is with the \"function keyword\".\nNow we see that another way is to take the function value that one name denotes and bind it to another name via assignment.\n</p>\n<p>\nSince the function \"double\" is declared at the global level, the name \"double\" is visible inside myMain, and can be used inside myMain.\nIf \"double\" were not visible inside myMain we could not call the function.  Since it is visible, we can not only call it to make\nit execute, but we can assign it to some other variable.  Then we have two \"names\" for the one function value (the function that\nmultiplies its single argument by 2 and returns that value).  The function value is not the name -- it is the code.\n</p>\n<p>\nTo get credit for this overview, put the last code (with \"double\" and \"dubble\") in your editor window and \nsubmit it for scoring.\n</p>",
            "value": {
                "correct": "1",
                "style": "1"
            },
            "onSubmit": "var soln_inputs = [ [] ];\nvar soln_outputs = [ [10,10] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 0) { fail.s(\"use no for loop\"); }\n    if (style.nAFD != 2) { fail.s(\"need 2 functions declared\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                   ",
            "createdAt": {
                "$date": "2017-07-15T19:32:22.073Z"
            },
            "updatedAt": {
                "$date": "2018-03-20T13:08:13.647Z"
            }
        },
        {
            "_id": {
                "$oid": "596ec4eea69c32e7768f33eb"
            },
            "num": 0,
            "type": "twit",
            "phase": 1,
            "name": "Overview",
            "folder": "53cef35d4fae0fbd7f73123f",
            "language": "javascript",
            "testMode": false,
            "maxSubmissions": "",
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/recur.overview.mp4",
            "text": "<p>\n<font color=firebrick>\n<b>Recursion: Functions that call themselves\n</b></font>\n</p> \n<p>\nRecursion is a very useful programming technique in which a function calls itself (re-cursion means re-occurring) in order to get a solution to a smaller or simpler\nversion of the problem that it is trying to solve.\nFor some problems, recursive code is simpler than equivalent code that is non-recursive -- easier to write, and more compact and less complex.\nBut the concept can be confusing, especially when first learning programming.  We will just get a taste of it in this module without going into in in deep detail.\n</p>\n<p>\nThe key to recursion is to make sure when the function calls itself, the problem that is passed to that call is a smaller or simpler version.\nWe think of a recursive function as saying \"well now, if I let some function solve a smaller or simpler version of my problem, then  I know how\nto use that smaller solution to solve my bigger problem.\"\n</p>\n<p>\nEvery recursive function will have two main parts:\n<ul>\n<li>the base case</li>\n<li>the recursive call</li>\n</ul>\nWe will write the base case first, and the base case will not recurse (will not call the function again). The base case is the simplest verion of the problem,\nwhere the result is known and can be returned directly. The base case will usually be a test to see if the parameter is some smallest value.\nThe base case is <b>very important</b>. Leaving it out can make your recursive function run forever when it is called.\nThe base case is the trigger that ends the sequence of function calls that is a recursion.\n</p>\n<p>\nIf the base case does not apply, then we enter the recursive case, where the function calls itself, captures the return value, and then uses that simpler\nreturn value to construct a solution it can return for it's own execution.\nExamples will make all this much easier to visualize.\n</p>\n<p>\nPut this code in your editor window and run it:\n<pre>\n\"use strict\";\n\nfunction myMain ( ) {\n  var N = 5;\n  alert(\"iteration ...\");\n  sequenceIter( N );\n}\n\nfunction sequenceIter ( n ) {\n  for (var i=n; i>=0; i--) {\n    alert(i);\n  }\n}\n\nmyMain();\n</pre>\nWhen you run this locally you will see it generates a sequence of numbers as output: 5,4,3,2,1,0.  Do not submit it for score yet.\n</p>\n<p>\nNow put this code in your editor window and execute it:\n<pre>\n\"use strict\";\n\nfunction myMain ( ) {\n  var N = 5;\n  alert(\"iteration ...\");\n  sequenceIter( N );\n  alert(\"recursion ...\");\n  sequenceRecur( N );\n}\n\nfunction sequenceRecur( n ) {\n  alert(n);\n  if (n===0) { return; }     // base case\n  sequenceRecur(n-1);   // recursive case\n}\n\nfunction sequenceIter ( n ) {\n  for (var i=n; i>=0; i--) {\n    alert(i);\n  }\n}\n\nmyMain();\n</pre>\nThis code now generated the sequence with both iteration, and with a recursive function (\"sequenceRecur\").  You see both functions do the same thing... one using looping\nand no further function calls, and one using recursion.  \n</p>",
            "value": {
                "correct": "1",
                "style": "1"
            },
            "onSubmit": "var soln_inputs = [ [] ];\nvar soln_outputs = [ [\"iteration ...\",5,4,3,2,1,0,\"recursion ...\",5,4,3,2,1,0] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL > 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP > 1) { fail.s(\"use only one for loop\"); }\n    if (style.nAFD < 3) { fail.s(\"need at least 3 functions declared\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                 ",
            "createdAt": {
                "$date": "2017-07-19T02:33:18.541Z"
            },
            "updatedAt": {
                "$date": "2018-04-03T01:27:50.609Z"
            }
        },
        {
            "_id": {
                "$oid": "59b091af9b53d0f30a5a00ea"
            },
            "num": 0,
            "type": "diy",
            "phase": 1,
            "name": "DNA Sequence Analysis",
            "folder": "5902b4167bb0b09c0d2a6422",
            "language": "javascript",
            "testMode": true,
            "maxSubmissions": "",
            "vidURL": "",
            "text": "<p>\n<font color=firebrick>\n<b>Write a program that searches for occurrences of base pairs in a DNA sequence.  First ask the user to input a DNA sequence (as a string).  \nThen loop, asking the user for a base pair (as a string of 2 characters) and print the number of times that base pair occurs in the DNA sequence (using the output format below).\nDetails follow.\n</b></font>\n</p> \n<p>\nA DNA sequence representation is a string composed entirely of the capital letter \"A\", \"C\", \"T\", and \"G\".  For example, each of the following lines represents a DNA sequence:\n<pre>\nACATGAGACAGACAGACCCCCAGAGACAGACCCCTAGACACAGAGAGAG\nTATGCAGGACAGGGTTTTTGCCCAGGGTGGCAGTATG\nAGGATTGAGGTATGGGTATGTTCCCGATTGAGTAGCCAGTATGAGCCAG\nAGTTTTTTACAAGTATTTTTCCCAGTAGCCAGAGAGAGAGTCACCCAGT\n</pre>\nThe following are sample executions:\n<pre>\nWhat DNA sequence? ACATCCTGAGACAGACAGACCCCCAGA\nWhat base pair?  CA\nThe base pair 'CA' occurs 4 times in the DNA sequence 'ACATCCTGAGACAGACAGACCCCCAGA'\nWhat base pair? TG\nBase pair 'TG' occurs 1 times in DNA sequence 'ACATCCTGAGACAGACAGACCCCCAGA'\nWhat base pair? CC\nBase pair 'CC' occurs 5 times in DNA sequence 'ACATCCTGAGACAGACAGACCCCCAGA'\nWhat base pair? done\n</pre>\n</p>\nNote how we are counting occurrences.  In this string\n<pre>\nCCCC\n</pre>\nwe are saying that \"CC\" occurs 3 times (not 2).  We do not count the first two characters as a match, and then move on to the 3rd character.  Rather we start with the first \"C and notice that there is a \"C\" following it, for the first match.  We move on to the 2nd character, which is a \"C\" and we note a \"C\" following it (for the 2nd match).  We move on to the 3rd character, which is a \"C\", and we note a \"C\" following it (for the 3rd match).  I am not sure if this is how biologists count these things, but that is how we will do it here for this program.  We call it a \"sliding window\"\nthat is sliding one character at a time.  For fun, you can try\nwriting your own program where the string \"CCCC\" would produce 2 matches... a sliding window that slides to the end of any match it finds to keep going.\n<p>\n</p>\n<p>\n<B>String functions:</b>\nThere are a couple string functions you may find useful.\nFirst, the function \" <b>split </b>\" will take a string and produce (return) an array of individual characters, one character from the string stored in each slot location in the array.\nA string value in JavaScript is an object, and \"split\" is a method that can be called on the object.  For example consider this code:\n<pre>\nvar str = \"go heels!\";\nchars = str.split(\"\");\nalert(chars[0]);  // will print \"g\"\nalert(chars[1]);  // will print \"o\"\nalert(chars[2]);  // will print \" \"  a blank character\nalert(chars[3]);  // will print \"h\"\nalert(chars[str.length - 1]);   // will print \"!\"\n</pre>\nHere, using the parameter \"\" in the call to the split method causes the string to be burst apart into individual characters.  The split method can be used to split strings into\nother chunks based on other characters; google it up for more information.\n</p>\n<p>\nAnother possibly useful string method is \"<b> charAt </b>\".  This string method will produce (return) a single character, the one found at a specific position in the \nstring. Character positions in a string start at 0 and go up to one less than the length of the string.  For example consider this code:\n<pre>\n var bp = \"AG\" ;\n var first = bp.charAt(0);\n var second = bp.charAt(1);\n var last = bp.charAt(bp.length - 1);\n alert(first);    // prints \"A\"\n alert(second);  // prints \"G\"\n alert(last);    // prints \"G\"\n</pre>\n</p>\n<b>Other challenges:</b> As further practice, you can alter how searching is done and try coding different versions of this program (for practice, not for score).\nFor example, only count a base pair if it occurs within 10 (or 20, or some limit) characters of some other base pair.  Or dont count a base pair if it immediately follows an \noccurrence of itself.  Or count base pair pairs... if the base pair is AT for example, then look for ATAT and count that.  Make up your own search pattern and code it up.\n</p>",
            "value": {
                "correct": "9",
                "style": "3"
            },
            "onSubmit": "var soln_inputs = [ [\"ACTGACATGTAG\",\"AT\",\"AC\",\"done\"] ];\nvar soln_outputs = [ [\"Base pair 'AT' occurs 1 times in DNA sequence 'ACTGACATGTAG'\", \n                      \"Base pair 'AC' occurs 2 times in DNA sequence 'ACTGACATGTAG'\"] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF > 3) { fail.s(\"You can get this done with fewer while loops\"); }\n    if (style.nFLAP > 3) { fail.s(\"You can get this done with fewer for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ",
            "createdAt": {
                "$date": "2017-09-07T00:24:15.845Z"
            },
            "updatedAt": {
                "$date": "2018-01-05T18:59:04.538Z"
            }
        },
        {
            "_id": {
                "$oid": "59b166c19b53d0f30a5a0111"
            },
            "num": 1,
            "type": "diy",
            "phase": 1,
            "name": "Mortgage calculator",
            "folder": "5902b4167bb0b09c0d2a6422",
            "language": "javascript",
            "testMode": true,
            "maxSubmissions": "",
            "vidURL": "",
            "text": "<p>\n<font color=firebrick>\n<b>Write a program that will compute mortgage information.\nAsk the user to input an total amount borrowed (real number, dollars), an interest rate (a real number between 0.0 and 100.0), a repayment time frame (in months, an integer), and an amount extra to pay each month (real number, dollars).  Print the total number of payments that will be made over the life of the loan (the extra amount will make it smaller than the repayment number of months).\nDetails follow.\n</b></font>\n</p> \n<p>\nSample executions:\n<pre>\nAmount borrowed? 150000.00                    // prompt\nInterest rate? 3.5                            // prompt\nNumber of months?  360                        // prompt\nExtra principle paid each month?  1000.00     // prompt\nTotal number of payments: 247                 // alert\n</pre>\n</p>\n<p>\nUsing the user inputs amount, rate, and months figure the monthly payment that will make the payoff happen.\nThe print that monthly payment. Then ask the user to input a dollar amount that will be paid each month\nas additional principle.  Let's call that extra.  This means each month, the user will pay payment+extra dollars towards the loan.\nThe interest will be charged on the remaining balance as simple interest... meaning is 3% is the rate, then each month the \nborrower pays 3/12 %, or 0.25 of the remaining balance.\nUsing this, figure how many payments (months) it will take to knock the balance down to 0 and pay off the loan.\n</p>",
            "value": {
                "correct": "9",
                "style": "3"
            },
            "onSubmit": "var soln_inputs = [ [150000,3.6,360,1000] ];\nvar soln_outputs = [ [1234.56,241] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF > 3) { fail.s(\"You can get this done with fewer while loops\"); }\n    if (style.nFLAP > 3) { fail.s(\"You can get this done with fewer for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ",
            "createdAt": {
                "$date": "2017-09-07T15:33:21.056Z"
            },
            "updatedAt": {
                "$date": "2018-01-05T18:59:04.54Z"
            }
        },
        {
            "_id": {
                "$oid": "59b1978c9b53d0f30a5a0147"
            },
            "num": 7,
            "type": "diy",
            "phase": 1,
            "name": "Bletchley Park and Enigma",
            "folder": "5902b4167bb0b09c0d2a6422",
            "language": "javascript",
            "testMode": true,
            "maxSubmissions": "",
            "vidURL": "",
            "text": "<p>\n<font color=firebrick>\n<b>Write a program that will compute the Enigma cipher, similar to the ones produced by the Enigma machines in WW2.\nDetails follow.\n</b></font>\n</p> \n<p>\nBletchley Park is an easy drive northwest of London.  In World War II the mansion housed the Government Code and Cypher Schools and was the main location for British intelligence codebreakers.  The men and women working there regularly penetrated the secret communications of the Axis Powers – most importantly the German Enigma and Lorenz ciphers. The intelligence gathered at Bletchley was termed \"Ultra\" and historians general consider the work to have shortened the war by two to four years. Without it, the outcome of the war would have been uncertain.\n</p>\n<p>\nThe Enigma cipher was a German code used before and during WW2.  It was largely considered unbreakable (in pre-computer days) but that was not so.  Polish mathematicians learned how early forms of the code worked, but breaking it became impractical at the outbreak of WW2 as the Germans added complexity to the basic machines, and changes keys daily.  Due to the huge number of combinations used in how the characters were transposed during encoding, decoding rapidly was nearly impossible.  Alan Turing, working at Bletchley in Britain, created a machine (the Bombe) that was able to reduce the possible combinations down to a number where crypt-analysts were able to decipher coded messages.  Breaking the Enigma code enabled the British to gather very important intelligence that is often credited with tipping the war in favor of the Allied forces and shortening it by several years.  The historical significance is hard to underestimate.  \n</p>\n<p>\nWe are going to write a program that will encode, and decode, messages using the Enigma cipher.\n</p>\n<p>\nSample executions:\n<pre>\nBLAH\n</pre>\n</p>\n<p>\n</p>",
            "value": {
                "correct": "9",
                "style": "3"
            },
            "onSubmit": "var soln_inputs = [ [150000,3.6,360,1000] ];\nvar soln_outputs = [ [1234.56,241] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF > 3) { fail.s(\"You can get this done with fewer while loops\"); }\n    if (style.nFLAP > 3) { fail.s(\"You can get this done with fewer for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ",
            "createdAt": {
                "$date": "2017-09-07T19:01:32.25Z"
            },
            "updatedAt": {
                "$date": "2018-01-05T18:59:04.552Z"
            }
        },
        {
            "_id": {
                "$oid": "59fddc4a433aec110b9e8a3e"
            },
            "num": 0,
            "type": "twit",
            "phase": 1,
            "name": "Overview",
            "folder": "599b1867f86460f32f01ffe6",
            "language": "javascript",
            "testMode": false,
            "maxSubmissions": "",
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/parse.overview.mp4",
            "text": "<p>\n<font color=firebrick>\n<b>Parsing: Decomposing text strings\n</b></font>\n</p> \n<p>\nIn this module we will learn a little about \"parsing\", which is breaking up text strings into pieces... into a collection of smaller strings, or components.\nParsing is part of many computing applications.  For example, in order to execute your JavaScript program, a compiler or interpreter must take the \nsingle text string that is your program and find all the important substring pieces... components like the keywords \"function\" and \"true\" and \"while\"... \nvariable names, and number constants... all parts within the one long program string.  \nWe will see how to do a simple form of this using some JavaScript built-in string functions.\n</p>\n<p>\nThe string type in JavaScript has some built-in methods (functions) that you can ask any string to execute.  \nThe one we will use to parse is the \"split\" function.  You should google \"JavaScript string split\" and read the\ndetails.  It takes a parameter, which is a single character; and it returns an array of strings.  The split functions will break the string that executes it into parts using \nthe character that is sent as parameter to define the boundaries between parts; the parts will be placed into successive locations in the array that is returned.\nFor example, consider this code:\n<pre>\nvar long = \"alpha beta gamma\";\nvar parts= long.split(\" \");\n</pre>\nThe second line causes the string \"long\" to be divided into 3 substrings using the blank as the separator.  This means the array \"parts\" has \"alpha\" in parts[0], \"beta\" in parts[1].\nand \"gamma\" stored in parts[2].  Try this code, and alert elements from the array \"parts\" to see how split works.\n</p>\n<p>\nThe split function can divide a string using any character as the break point, not just a blank. For example, if you want to get a string of data (from a database, perhaps) and it\nconsists of several numbers separates by commas, you can break the data string down this way:\n<pre>\nvar data = \"123,24.571,15,-37.2,0.01\" ;\nvar nums = data.split(\",\");\nalert(nums[0]);\nalert(nums[3]);\n</pre>\nIf you try this code, you will see the numbers \"123\" and \"-37\" printed out in separate alert boxes.\nNote that the elements in the array \"nums\" are still strings (that look like numbers). If you need real numeric data you still need to convert\nthe string data to number data (with the Number() function).\nTo see this, run the code above and add these lines at the end:\n<pre>\nalert(nums[0]+nums[1]);  // string concatenation\nalert(Number(nums[0]) + Number(nums[1]));  // numerical arithmetic\n</pre>\n</p>\n<p>\nTo complete this overview, type in the following program, execute it, then submit it for score.\n<pre>\n\"use strict\";\n\nfunction myMain() {\n  var text = \"see how parsing breaks up strings\";\n  var arr = text.split(\" \");\n  alert(arr[2]);\n  alert(arr[3]);\n  alert(arr[arr.length-1]);\n}\n\nmyMain();\n</pre>",
            "value": {
                "correct": "1",
                "style": "1"
            },
            "onSubmit": "var soln_inputs = [ [\"see how parsing breaks up strings\"] ];\nvar soln_outputs = [ [\"parsing\",\"breaks\",\"strings\"] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    //if (style.nWLAP > 2) { fail.s(\"You can do this with only 2 while loops\"); }\n    //if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n    //if (style.nAFD < 3) { fail.s(\"need at least 3 specific functions in this program\"); }\n    //if (style.nDO < 1) { fail.s(\"need to declare and use 2 objects\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                 ",
            "createdAt": {
                "$date": "2017-11-04T15:27:06.9Z"
            },
            "updatedAt": {
                "$date": "2018-03-27T22:54:58.768Z"
            }
        },
        {
            "_id": {
                "$oid": "5a0cbd63433aec110b9e8bd7"
            },
            "num": 0,
            "type": "diy",
            "phase": 1,
            "name": "<b>DIY:</b> DNA Sequence Analysis",
            "folder": "5a0cbd22433aec110b9e8bd6",
            "language": "javascript",
            "testMode": false,
            "maxSubmissions": "",
            "vidURL": "",
            "text": "<p>\n<font color=firebrick>\n<b>Write a program that searches for occurrences of base pairs in a DNA sequence.  First ask the user to input a DNA sequence (as a string).  \nThen loop, asking the user for a base pair (as a string of 2 characters) and print the number of times that base pair occurs in the DNA sequence (using the output format below).\nDetails follow.\n</b></font>\n</p> \n<p>\nA DNA sequence representation is a string composed entirely of the capital letter \"A\", \"C\", \"T\", and \"G\".  For example, each of the following lines represents a DNA sequence:\n<pre>\nACATGAGACAGACAGACCCCCAGAGACAGACCCCTAGACACAGAGAGAG\nTATGCAGGACAGGGTTTTTGCCCAGGGTGGCAGTATG\nAGGATTGAGGTATGGGTATGTTCCCGATTGAGTAGCCAGTATGAGCCAG\nAGTTTTTTACAAGTATTTTTCCCAGTAGCCAGAGAGAGAGTCACCCAGT\n</pre>\nThe following are sample executions:\n<pre>\nWhat DNA sequence? ACATCCTGAGACAGACAGACCCCCAGA\nWhat base pair?  CA\nThe base pair 'CA' occurs 4 times in the DNA sequence 'ACATCCTGAGACAGACAGACCCCCAGA'\nWhat base pair? TG\nBase pair 'TG' occurs 1 times in DNA sequence 'ACATCCTGAGACAGACAGACCCCCAGA'\nWhat base pair? CC\nBase pair 'CC' occurs 5 times in DNA sequence 'ACATCCTGAGACAGACAGACCCCCAGA'\nWhat base pair? done\n</pre>\n</p>\nNote how we are counting occurrences.  In this string\n<pre>\nCCCC\n</pre>\nwe are saying that \"CC\" occurs 3 times (not 2).  We do not count the first two characters as a match, and then move on to the 3rd character.  Rather we start with the first \"C and notice that there is a \"C\" following it, for the first match.  We move on to the 2nd character, which is a \"C\" and we note a \"C\" following it (for the 2nd match).  We move on to the 3rd character, which is a \"C\", and we note a \"C\" following it (for the 3rd match).  I am not sure if this is how biologists count these things, but that is how we will do it here for this program.  We call it a \"sliding window\"\nthat is sliding one character at a time.  For fun, you can try\nwriting your own program where the string \"CCCC\" would produce 2 matches... a sliding window that slides to the end of any match it finds to keep going.\n<p>\n</p>\n<p>\n<B>String functions:</b>\nThere are a couple string functions you may find useful.\nFirst, the function \" <b>split </b>\" will take a string and produce (return) an array of individual characters, one character from the string stored in each slot location in the array.\nA string value in JavaScript is an object, and \"split\" is a method that can be called on the object.  For example consider this code:\n<pre>\nvar str = \"go heels!\";\nchars = str.split(\"\");\nalert(chars[0]);  // will print \"g\"\nalert(chars[1]);  // will print \"o\"\nalert(chars[2]);  // will print \" \"  a blank character\nalert(chars[3]);  // will print \"h\"\nalert(chars[str.length - 1]);   // will print \"!\"\n</pre>\nHere, using the parameter \"\" in the call to the split method causes the string to be burst apart into individual characters.  The split method can be used to split strings into\nother chunks based on other characters; google it up for more information.\n</p>\n<p>\nAnother possibly useful string method is \"<b> charAt </b>\".  This string method will produce (return) a single character, the one found at a specific position in the \nstring. Character positions in a string start at 0 and go up to one less than the length of the string.  For example consider this code:\n<pre>\n var bp = \"AG\" ;\n var first = bp.charAt(0);\n var second = bp.charAt(1);\n var last = bp.charAt(bp.length - 1);\n alert(first);    // prints \"A\"\n alert(second);  // prints \"G\"\n alert(last);    // prints \"G\"\n</pre>\n</p>\n<b>Other challenges:</b> As further practice, you can alter how searching is done and try coding different versions of this program (for practice, not for score).\nFor example, only count a base pair if it occurs within 10 (or 20, or some limit) characters of some other base pair.  Or dont count a base pair if it immediately follows an \noccurrence of itself.  Or count base pair pairs... if the base pair is AT for example, then look for ATAT and count that.  Make up your own search pattern and code it up.\n</p>",
            "value": {
                "correct": "0",
                "style": "0"
            },
            "onSubmit": "var soln_inputs = [ [\"ACTGACATGTAG\",\"AT\",\"AC\",\"done\"] ];\nvar soln_outputs = [ [\"Base pair 'AT' occurs 1 times in DNA sequence 'ACTGACATGTAG'\", \n                      \"Base pair 'AC' occurs 2 times in DNA sequence 'ACTGACATGTAG'\"] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF > 3) { fail.s(\"You can get this done with fewer while loops\"); }\n    if (style.nFLAP > 3) { fail.s(\"You can get this done with fewer for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ",
            "createdAt": {
                "$date": "2017-11-15T22:19:15.011Z"
            },
            "updatedAt": {
                "$date": "2018-04-03T01:34:31.73Z"
            }
        },
        {
            "_id": {
                "$oid": "5a3b397a41b9976116069c4c"
            },
            "num": 2,
            "type": "twit",
            "phase": 1,
            "name": "<B>MAP:</B> Expressions, variables, assignment",
            "folder": "53f29f9a41b3137f58803191",
            "language": "javascript",
            "testMode": false,
            "maxSubmissions": "",
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/chalkTalk-1-M.mp4",
            "text": "In this chalk-talk video, we learn about how variables are laid out in memory inside your computer, and how expressions and assignment\nchange variable values as the program executes.\n<pre>\n  \"use strict\";\n  function myMain() {\n     var num;\n     var foo = 5;\n     num = foo * 2;\n     foo = foo - 1;\n     num = num + (foo * 2);\n     alert(num); \n  }\n\n  myMain();\n</pre>\nTo complete this problem, type in the program discussed in the video, and execute it to verify the \nresult computed in the chalk-talk.  Then submit it for score.\n",
            "value": {
                "correct": "1",
                "style": "1"
            },
            "onSubmit": "var soln_inputs = [[] ];\nvar soln_outputs = [[18] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  //if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  //else {\n //   if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n //   if (style.nWLF != 1) { fail.s(\"use one while loop\"); }\n //   if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n // }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ",
            "createdAt": {
                "$date": "2017-12-21T04:32:58.664Z"
            },
            "updatedAt": {
                "$date": "2018-01-16T19:53:41.736Z"
            }
        },
        {
            "_id": {
                "$oid": "5a3b398741b9976116069c4d"
            },
            "num": 3,
            "type": "twit",
            "phase": 1,
            "name": "<B>MAP:</B> More complicated expressions",
            "folder": "53f29f9a41b3137f58803191",
            "language": "javascript",
            "testMode": false,
            "maxSubmissions": "",
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/chalkTalk-2-M.mp4",
            "text": "In this chalk-talk video, we learn about how variables are laid out in memory inside your computer, how more complicated expressions are evaluated,\nand how assignment is used to change variable values as the program executes.\n<pre>\n  function myMain() {\n     var nT, nC, nK, nTpK, nTpC;\n     nC=12; nTpC = 4;\n     nK=3;  nTpK = 6;\n     nT = nC * (nTpC + 1);   // car has a spare\n     nT = nT + ( nK * (nTpK + 2));  // truck has 2 spares\n     alert(nT); \n  }\n\n  myMain();\n</pre>\nTo complete this problem, type in the program discussed in the video, and execute it to verify the \nresult computed in the chalk-talk.  Then submit it for score.",
            "value": {
                "correct": "1",
                "style": "1"
            },
            "onSubmit": "var soln_inputs = [[] ];\nvar soln_outputs = [[84] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  //if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  //else {\n //   if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n //   if (style.nWLF != 1) { fail.s(\"use one while loop\"); }\n //   if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n // }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ",
            "createdAt": {
                "$date": "2017-12-21T04:33:11.958Z"
            },
            "updatedAt": {
                "$date": "2018-01-16T19:53:46.627Z"
            }
        },
        {
            "_id": {
                "$oid": "5a3b3bae41b9976116069c52"
            },
            "num": 12,
            "type": "twit",
            "phase": 1,
            "name": "<B>MAP:</B> For loop execution",
            "folder": "53cef2744fae0fbd7f731236",
            "language": "javascript",
            "testMode": false,
            "maxSubmissions": "",
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/chalkTalk-3-M.mp4",
            "text": "In this chalk-talk video, we learn more about how variables are laid out in memory inside your computer, and how a <b>for</b> loop creates systematic\nrepetition of a block of code statements.\n<pre>\nfunction myMain() {\n   var sum = 0;\n   var n=4;\n   for (var i=1; i<=n; i++) {\n      sum = sum + i;\n   }\n   alert(sum);\n}\n\nmyMain();\n</pre>\nTo complete this problem, type in the program discussed in the video, and execute it to verify the \nresult computed in the chalk-talk.  Then submit it for score.",
            "value": {
                "correct": "1",
                "style": "1"
            },
            "onSubmit": "var soln_inputs = [[]];\nvar soln_outputs = [[10] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  /*\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF > 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 1) { fail.s(\"use one for loop\"); }\n  }\n  */\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ",
            "createdAt": {
                "$date": "2017-12-21T04:42:22.688Z"
            },
            "updatedAt": {
                "$date": "2018-01-24T15:50:20.644Z"
            }
        },
        {
            "_id": {
                "$oid": "5a3bbc0841b9976116069c54"
            },
            "num": 9,
            "type": "twit",
            "phase": 1,
            "name": "<B>MAP:</B> While loop execution",
            "folder": "53cef2c54fae0fbd7f731238",
            "language": "javascript",
            "testMode": false,
            "maxSubmissions": "",
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/chalkTalk-4-M.mp4",
            "text": "In this chalk-talk video, we learn more about how variables are laid out in memory inside your computer, and how a <b>while</b> loop creates systematic\nrepetition of a block of code statements.\n<pre>\n  function myMain() {\n     var k, ev;\n     k = 4;\n     ev = k/2;\n     var prod = 1;\n     var end = 6;\n     while (k <= end) {\n        prod = prod * ev;\n        ev = ev + 2;\n        k++;\n     }\n     alert(prod);\n  }\n\n  myMain();\n</pre>\n\nTo complete this problem, type in the program discussed in the video, and execute it to verify the \nresult computed in the chalk-talk.  Then submit it for score.",
            "value": {
                "correct": "1",
                "style": "1"
            },
            "onSubmit": "var soln_inputs = [[]];\nvar soln_outputs = [[48] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  /*\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF > 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 1) { fail.s(\"use one for loop\"); }\n  }\n  */\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ",
            "createdAt": {
                "$date": "2017-12-21T13:50:00.85Z"
            },
            "updatedAt": {
                "$date": "2018-02-06T15:22:53.794Z"
            }
        },
        {
            "_id": {
                "$oid": "5a3bbcd941b9976116069c56"
            },
            "num": 9,
            "type": "twit",
            "phase": 1,
            "name": "<B>MAP:</B> Internals of call and return",
            "folder": "54179a21f4c3c15867b3c1fe",
            "language": "javascript",
            "testMode": false,
            "maxSubmissions": "",
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/chalkTalk-5-M.mp4",
            "text": "In this chalk-talk video, we learn more about how variables are laid out in memory inside your computer when an executing function (like myMain)\ncalls another function to help get the work done.  We learn about having multiple memory maps active; we learn about how information is\npassed from the calling memory map to the called one (passing parameters); we learn how information is passed from the called memory map\nback to the calling code (on a return).\n<pre>\n  function myMain() {\n     var MAX  = 4;\n     var result = fact( MAX );\n     alert(result);\n  }\n\n  function fact ( N ) {\n     var i;\n     var prod = 1;\n     i = 1;\n     while (i<=N) {\n        prod = prod * i;\n        i++;\n     }\n     return prod;\n  }\n\n  myMain();\n</pre>\n\nTo complete this problem, type in the program discussed in the video, and execute it to verify the \nresult computed in the chalk-talk.  Then submit it for score.",
            "value": {
                "correct": "1",
                "style": "1"
            },
            "onSubmit": "var soln_inputs = [[] ];\nvar soln_outputs = [[24] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  /*\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF != 1) { fail.s(\"use one while loop\"); }\n    if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n  }\n  */\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ",
            "createdAt": {
                "$date": "2017-12-21T13:53:29.09Z"
            },
            "updatedAt": {
                "$date": "2018-02-13T15:54:11.68Z"
            }
        },
        {
            "_id": {
                "$oid": "5a3bbdc041b9976116069c58"
            },
            "num": 8,
            "type": "twit",
            "phase": 1,
            "name": "<B>MAP:</B> Basic objects",
            "folder": "53cef3104fae0fbd7f73123d",
            "language": "javascript",
            "testMode": false,
            "maxSubmissions": "",
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/chalkTalk-basic-obj-M.mp4",
            "text": "In this chalk-talk video, we learn more about how objects are laid out in memory inside your computer, and how space is allocated and accessed\nwhen referencing the data fields inside an object.\n\n<pre>\n\"use strict\";\n\nfunction myMain() {\n  var x=5;\n  var obb = makeObj(x);\n  alert(obb.one);\n  alert(obb.two);\n  obb.three = obb.one + obb.two;\n  alert(obb.three);\n}\n\nmyMain();\n\nfunction makeObj (k) {\n  var obj = {\n    one: k,\n    two: k*2\n  };\n  return obj;\n}\n</pre>\nTo complete this problem, type in the program above, discussed in the video, and execute it to verify the \nresult computed in the chalk-talk.  Then submit it for score.",
            "value": {
                "correct": "1",
                "style": "1"
            },
            "onSubmit": "var soln_inputs = [[]];\nvar soln_outputs = [ [5,10,15] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  /*\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF > 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 1) { fail.s(\"use one for loop\"); }\n  }\n  */\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ",
            "createdAt": {
                "$date": "2017-12-21T13:57:20.548Z"
            },
            "updatedAt": {
                "$date": "2018-02-19T13:25:46.831Z"
            }
        },
        {
            "_id": {
                "$oid": "5a3bbe4c41b9976116069c5a"
            },
            "num": 8,
            "type": "twit",
            "phase": 1,
            "name": "<B>MAP:</B> Arrays in memory",
            "folder": "53cef2e24fae0fbd7f73123a",
            "language": "javascript",
            "testMode": false,
            "maxSubmissions": "",
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/chalkTalk-arrays-M.mp4",
            "text": "In this chalk-talk video, we learn more about how variables are laid out in memory inside your computer, and how space is allocated and accessed\nwhen using an array in your program.\n<pre>\n\"use strict\";\n\nmyMain();\n\nfunction myMain() {\n  var n = 5;\n  var arr = [];\n  for (var i=0; i<=n; i++) {\n    arr[i] = i*i;\n  }\n  arr[4] = -3.14;\n  arr[2] = \"unc\";\n  alert(arr);\n  alert(arr[3]);\n}\n</pre>\nTo complete this problem, type in the program above, discussed in the video, and execute it to verify the \nresult computed in the chalk-talk.  Then submit it for score.\n</p>",
            "value": {
                "correct": "1",
                "style": "1"
            },
            "onSubmit": "var soln_inputs = [[]];\nvar soln_outputs = [ [[0,1,\"unc\",9,-3.14,25], 9] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     //for(var i=0; i<truVec.length; i++) { \n     //   if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     //}\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  /*\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF > 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 1) { fail.s(\"use one for loop\"); }\n  }\n  */\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ",
            "createdAt": {
                "$date": "2017-12-21T13:59:40.065Z"
            },
            "updatedAt": {
                "$date": "2018-03-01T21:04:30.525Z"
            }
        },
        {
            "_id": {
                "$oid": "5a3bbfbd41b9976116069c5d"
            },
            "num": 8,
            "type": "twit",
            "phase": 1,
            "name": "<B>MAP:</B> Object method execution",
            "folder": "5a3bbf6841b9976116069c5c",
            "language": "javascript",
            "testMode": false,
            "maxSubmissions": "",
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/chalkTalk-obj-methods-M.mp4",
            "text": "In this chalk-talk video, we learn more about how objects are laid out in memory inside your computer, including how methods (functions) can be created inside\nobjects.  We also see how to call a method inside an object.  \n\n<pre>\n\"use strict\";\n\nfunction myMain() {\n  var x=5;\n  var emp = makePerson(\"bob\",35,40,15.00);\n  alert(\"pay is $\" + emp.pay() );\n}\n\nmyMain();\n\nfunction makePerson (n,a,h,r) {\n  var pObj = {\n    name: n,\n    age: a,\n    hours: h,\n    rate: r,\n    pay: function() {\n      var cash;\n      cash = this.rate * this.hours;\n      return cash;\n    }\n  };\n  return pObj;\n}\n</pre>\nTo complete this problem, type in the program above, discussed in the video, and execute it to verify the \nresult computed in the chalk-talk.  Then submit it for score.",
            "value": {
                "correct": "1",
                "style": "1"
            },
            "onSubmit": "var soln_inputs = [[]];\nvar soln_outputs = [ [\"pay is $600\"] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  /*\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF > 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 1) { fail.s(\"use one for loop\"); }\n  }\n  */\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ",
            "createdAt": {
                "$date": "2017-12-21T14:05:49.519Z"
            },
            "updatedAt": {
                "$date": "2018-03-20T13:12:12.474Z"
            }
        },
        {
            "_id": {
                "$oid": "5a3bc09b41b9976116069c5f"
            },
            "num": 5,
            "type": "twit",
            "phase": 1,
            "name": "<B>MAP:</B> Recursive call and return",
            "folder": "53cef35d4fae0fbd7f73123f",
            "language": "javascript",
            "testMode": false,
            "maxSubmissions": "",
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/chalkTalk-6-M.mp4",
            "text": "In this chalk-talk video, we learn about how variables are laid out in memory inside your computer when several functions are involved.\nWe see how parameters are transmitted to a called function, and how return values are sent back to the calling code.\nWe complicate earlier examples of this by having one of the function a \"recursive\" function... meaning the definition of the function\ncontains a call to itself.  We illustrate multiple memory maps being active for different calls to the same recursive function,\nand we reinforce the idea that function calls execute returns in the reverse of the order in which they are called.\n<pre>\n  function myMain() {\n     var MAX = 4;\n     var result = fact( MAX );\n     alert(result);\n  }\n\n  function fact ( n ) {\n     if ( n===1 ) { return 1; }\n     var res;\n     res = n * fact( n-1 );\n     return res;\n  }\n\n  myMain();\n</pre>\nTo complete this problem, type in the program discussed in the video, and execute it to verify the \nresult computed in the chalk-talk.  Then submit it for score.",
            "value": {
                "correct": "1",
                "style": "1"
            },
            "onSubmit": "var soln_inputs = [[] ];\nvar soln_outputs = [[24] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  /*\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF != 1) { fail.s(\"use one while loop\"); }\n    if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n  }\n  */\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ",
            "createdAt": {
                "$date": "2017-12-21T14:09:31.474Z"
            },
            "updatedAt": {
                "$date": "2018-04-03T01:31:51.391Z"
            }
        },
        {
            "_id": {
                "$oid": "5a3bc40041b9976116069c61"
            },
            "num": 0,
            "type": "twit",
            "phase": 1,
            "name": "Overview",
            "folder": "5a3bbf6841b9976116069c5c",
            "language": "javascript",
            "testMode": false,
            "maxSubmissions": "",
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/advObj.overview.mp4",
            "text": "<p>\n<font color=firebrick>\n<b>Methods: Functions inside objects\n</b></font>\n</p> \n<p>\nObjects are the capstone item in the list of the Great 8 concepts we find in all object-oriented programming languages.\nUp to now, we have seen that an object is a way of binding data values (\"fields\") together so that they remain\nassociated for a common purpose... such as representing different pieces of information about a person\n(name, age, address, pay rate, hours worked, etc.).\nNow we will see that functions can also be fields in an object.   We call a function inside an object a \"method\" of that object.\n</p>\n<p>\nThus, an object binds together data fields, and functions (methods)\nthat operate on those data fields.  This makes an object an abstraction of a program in general.\nWe can think of our \"programs\" as collections of objects that call each others' methods in order to get work done.\n</p>\n<p>\nThe methods inside an object will allow us to think of an object as being able to do work for us.\nIn previous programs, we had an object constructor \"makePersonObject\" that would create an object that\nrepresented a worker at a company.  The object had a field that told how many hours that person worked, and a field that\ntold the pay rate the person earned per hour. To compute the amount of pay the person earned, we directly accessed the hours field and the payrate field in \nthe object, retrieved their values, and multiplied those values together.  We did this in the problem \"Construct person object\"   in module \"Basic Objects\" if you would like\nto refer back to the code.\n</p>\nNow, we will be able to add a method (function) to the person object so that the person object can do that computation internally, where the hours and payrate fields are kept \n(we will do this in one of the following problems).  We can then\nhave a person object do that work for us, and simply report the total pay in response to our code elsewhere calling a function (a method) in the object.\nIn essence, we will contact the object and get it to do what we were doing in our code before, but now we do not have to remember the details\nof what the internal data fields are named.  We let the object worry about that in the \"pay\" function, and we simple call that function and wait for the results.\nWe will not look inside the object at its data fields.  The syntax for this will be:\n<pre>\n  var persObj = makePersonObject();\n  var totalPay = personObj.pay();\n</pre>\n</p>\n<p>\nTo do this, we will alter the  \"makePersonObject\"  constructor to add the method to each objects it creates.  Let's name that method \"pay\".  \nThis method takes no arguments, and when called, it returns the total\npay earned by the person the object represents.  \nThis is computed by multiplying the person's pay rate by the person's hours worked.\n</p>\n<p>\n<b>To get credit for this overview:</b>\nLet's take the \"makePersonObject\" code we had before and alter to put a very simple function into each object it makes.\nThis function will report back the name of the person when it is called. Here is the new constructor code (and a myMain to exercise the constructor):\n<pre>\n\"use strict\";\n\nfunction myMain () {\n  var emp = makePersonObject();  // this makes a person object \"emp\"\n  alert( emp.getName() ); // this is a method call on the object \"emp\"\n}\n\nfunction makePersonObject ( ) {\n  var perObj = {\n    id: Number(prompt(\"person ID number?\")),\n    name: prompt(\"person name?\"),\n    hours: Number(prompt(\"hours worked?\")),\n    payrate: Number(prompt(\"pay rate?\")),\n\n    // this is how we put a function into an object\n    // we make an anonymous function and bind it to a field name\n    getName: function ( ) { return this.name; } \n\n  };\n  return perObj;\n}\n\nmyMain();\n</pre>\nHere we create a person object in myMain, and then call the \"getName\" in that object. We then print out the string returned by that method.  In this way, the\nobject is \"telling us\" the name it contains.\nPut this code in your editor window, test it locally, and then submit it for score.\n</p>\n<p>\n<b>Software Engineering lesson.</b>\nNot looking inside an object at its data fields... letting the object itself worry about manipulating the data fields... getting information from an\nobject by calling methods and letting the object send us data... this is called \"information hiding\".  We think of an object as being a\n\"black box\" and we don't see it internals.  We do see it's public interface... it's methods and how to call them (the arguments the methods need when called).\nIf we want information, we ask the object to supply it rather that reaching inside and taking it.  In this way, complicated manipulations can be written once\nand put into the object as methods.  This is an example of the DRY principle at work. We do not repeat complicated manipulations of object data fields all\nover our code; rather we put them into the objects, as methods, each defined once.  Then we call the functions when we need the information,\n</p>\n<p>\nSome programming disciplines go as far as making data field invisible.. unable to be read outside the object.  Then to get something simple \n(like the value of the name field in our person object) we would put a method like \"getName()\" in the person object.  Maybe we put in a \"setName(s)\" method \nas well, in case we need to change the name stored in the object.  We would not be allowed to do something direct like persObj.name = \"Smith\" from outside the\nobject.  Information hiding helps keep the data in the object consistent, since it cannot be changed by any code that it not a methods in the object.\n</p>\n<p>\nThese simple methods that produce, or update, the values of the data fields are called \"getters\" and \"setters\".  The \"getName()\" methods we wrote in this overview code\nis an example of a \"getter\" method.\n</p>",
            "value": {
                "correct": "1",
                "style": "1"
            },
            "onSubmit": "var soln_inputs = [ [123,\"smith\",10,20] ];\nvar soln_outputs = [ [\"smith\"] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL > 2) { fail.s(\"use no more than 2 while loops\"); }\n    if (style.nFLAP > 2) { fail.s(\"use no more than 2 for loops\"); }\n    if (style.nAFD < 2) { fail.s(\"need at least 2 functions declared\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                          ",
            "createdAt": {
                "$date": "2017-12-21T14:24:00.715Z"
            },
            "updatedAt": {
                "$date": "2018-03-20T13:08:57.379Z"
            }
        },
        {
            "_id": {
                "$oid": "5a3beb0f41b9976116069c63"
            },
            "num": 1,
            "type": "twit",
            "phase": 1,
            "name": "Array of objects",
            "folder": "5a3bbf6841b9976116069c5c",
            "language": "javascript",
            "testMode": false,
            "maxSubmissions": "",
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/advObj.arrayOfObjs.mp4",
            "text": "<p>\n<font color=firebrick>\n<b>Write a program that will generate several objects (using a constructor function) and store those objects in an array for later use.\n</b></font>\n</p> \n<p>\nWe will start with the code from \"Construct person object\" from the \"Basic Objects\" folder.\nThis gives us the myMain function as well as a constructor function \"makePersonObject\" that\nmanufactures and returns objects after populating them with user input.\n</p>\n<p>\nIn myMain before we created 3 separate variables to store 3 objects.  This means the code works for exactly 3 persons, and if the user\nhas more (or fewer) to work with, then the code must be re-written (a little bit) to alter the number (and names) of the variables used to store\nthe person objects.\n</p>\n<p>\nIn this new program we will make a loop and keep constructing objects until the user says we\nare done.  Each new object made and returned by the constructor will be stored in an array slot\n(in much the same way we created and used an array to store number input from the user in other programs).\nIn the loop, first call makePersonObject to manufacture a person object; store the object\nthat is returned in the next open array slot.  Then ask the user if another object needs to be made.\nIf the reply is \"no\" then we will break to end the input loop.  Any other reply will cause the \nloop to repeat and make another object.\n</p>\n<p>\nOnce the input loop is done and the array if filled with objects, we will use the objects to\ncompute some information. First, print the length of the array (which is the number of objects stored in the array).\nNext, compute the total payroll. To do this, go through the array and sum up all the amounts\npaid to each worker.  Print this out with this format: \"total payroll: 1234.56\"\n</p>\n<p>\nThen go through the array and find the name of the person with the highest hourly pay rate.\nPrint out the name in this format: \"high rate: smith\".\n</p>",
            "value": {
                "correct": "1",
                "style": "1"
            },
            "onSubmit": "var soln_inputs = [ [ 123,\"smith\",10,20,\n                      \"yes\",234,\"jones\",20,30,\n                      \"yes\",345,\"miller\",20,25,\"no\" ] ];\nvar soln_outputs = [ [3, \"total payroll: 1300\", \"high rate: jones\"] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL < 1) { fail.s(\"use at least one while loop\"); }\n    if (style.nFLAP < 2) { fail.s(\"use 2 for loops\"); }\n    if (style.nAFD < 2) { fail.s(\"need at least 2 functions declared\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                        ",
            "createdAt": {
                "$date": "2017-12-21T17:10:39.936Z"
            },
            "updatedAt": {
                "$date": "2018-03-20T13:09:08.831Z"
            }
        },
        {
            "_id": {
                "$oid": "5a3bec2041b9976116069c65"
            },
            "num": 2,
            "type": "twit",
            "phase": 1,
            "name": "Method (function) in an object",
            "folder": "5a3bbf6841b9976116069c5c",
            "language": "javascript",
            "testMode": false,
            "maxSubmissions": "",
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/advObj.methodInObj.mp4",
            "text": "<p>\n<font color=firebrick>\n<b>Write a program that illustrates putting a method into an object and calls that method.\n</b></font>\n</p> \n<p>\nLet's start with the code from \"Array of objects\".\n</p>\n<p>\nAdd a method to \"makePersonObject\" called \"pay\".  This method takes no arguments, and returns the total\npay earned by the person.  This is computed by multiplying the person's pay rate by the person's hours worked.\n</p>\n<p>\nIn myMain, adjust your code to call this \"pay\" method instead of using the individual data fields in the person object.\nThis program should print the same output as the one we stated with. Tests it, and submit for score.\n</p>\n<b>Getter methods.</b>\nNow we are going to alter the object constructor more.  Finding the person with the highest pay rate was done before by reading the \"name\" and \"payrate\" fields in\nthe person object directly.  We will increase the information hiding in this program by adding two more methods to the person object, both \"getter\" methods.\nWe will add \"getName\", a methods that will return the string stored in the \"name\" field.  We will also add \"getRate\", a method that will return the number stored\nin the \"payrate\" field.  After adding these getter methods we will alter the code in myMain to use them rather than reading the object fields directly.\n</p>\n<p>\nOnce all this is done, test the new code and then submit it for score.  You will see that the functional behavior is the same.\n</p>",
            "value": {
                "correct": "1",
                "style": "1"
            },
            "onSubmit": "var soln_inputs = [ [ 123,\"smith\",10,20,\n                      \"yes\",234,\"jones\",20,30,\n                      \"yes\",345,\"miller\",20,25,\"no\" ] ];\nvar soln_outputs = [ [3, \"total payroll: 1300\",\"high rate: jones\"] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL > 2) { fail.s(\"use no more than 2 while loops\"); }\n    if (style.nFLAP > 2) { fail.s(\"use no more than 2 for loops\"); }\n    if (style.nAFD < 2) { fail.s(\"need at least 2 functions declared\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                             ",
            "createdAt": {
                "$date": "2017-12-21T17:15:12.547Z"
            },
            "updatedAt": {
                "$date": "2018-03-20T13:09:14.865Z"
            }
        },
        {
            "_id": {
                "$oid": "5a3beeb941b9976116069c6d"
            },
            "num": 5,
            "type": "twit",
            "phase": 1,
            "name": "Silent constructor",
            "folder": "5a3bbf6841b9976116069c5c",
            "language": "javascript",
            "testMode": false,
            "maxSubmissions": "",
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/advObj.silentConst.mp4",
            "text": "<p>\n<font color=firebrick>\n<b>Write a program that uses a \"silent constructor\" to build objects, and uses those objects.\n</b></font>\n</p> \n<p>\nIn this program we will modify a previous one (Method in an object). In this program, we have a constructor for objects that model (represent) people.\nIn the object constructor, interact with the user to get various pieces of data to put into the new object... data value like a name, an id, etc.\nNow we want to move the user interaction out of the constructor, and have that interaction done elsewhere in the program (like in myMain).\nThis makes the constructor \"slient\" meaning it does not communicate with the user.  Rather, the information needed by the constructor will\nbe passed in as arguments when the constructor is called to make an object.\n</p>\n<p>\nThe code changes we need to make are detailed, so just follow along in order\n</p>\n<p>\nKeep the constructor makePersonObject. In myMain clear out almost all the code, leaving a single call to makePersonObject to make\none person object. Move the user input code from the constructor into myMain (before the call to the constructor).\nThe values input will need to be stored in local variables in myMain, and then those variables will be passed in to the\nconstructor as parameters.  \n</p>\n<p>\nIn makePersonObject we will need to create an argument list in the definition header, and we will need to\nassign the passed argument values to the appropriate object fields.  Test to make \nsure it is functioning as expected.\n</p>\n<p>\nFinally, back in myMain, simply call the pay method on the object that the constructor returns, and print out the value that method returns.\n</p>\n",
            "value": {
                "correct": "1",
                "style": "1"
            },
            "onSubmit": "var soln_inputs = [ [12345, \"smith\", 20, 30]   ];\nvar soln_outputs = [ [600] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL > 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP > 2) { fail.s(\"use no more than 2 for loops\"); }\n    if (style.nAFD < 2) { fail.s(\"need at least 2 functions declared\"); }\n  }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                 ",
            "createdAt": {
                "$date": "2017-12-21T17:26:17.507Z"
            },
            "updatedAt": {
                "$date": "2018-03-20T13:09:40.204Z"
            }
        },
        {
            "_id": {
                "$oid": "5a3bef7241b9976116069c6f"
            },
            "num": 6,
            "type": "twit",
            "phase": 1,
            "name": "This vs. constructor local",
            "folder": "5a3bbf6841b9976116069c5c",
            "language": "javascript",
            "testMode": false,
            "maxSubmissions": "",
            "vidURL": "http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/advObj.thisVsLocal2.mp4",
            "text": "<p>\n<font color=firebrick>\n<b>Write a program that better illustrates the purpose of the \"this\" keyword in object methods, and illustrates the difference between object-creation time (when a constructor is called) and object-use time (when an object method is called).\n</b></font>\n</p> \n<p>\nIn this program we will modify a previous one (Silent constructor).  Load that code into the editor window.\n</p>\n<p>\nThe instructional point is to make clear the reason to use the \"this\" reference in an object,\nas well as to clarify the distinctions between a method (function) and a data field.  The \"this\" object reference gives dynamic capabilities,\nallowing an object to compute information from what happens to be stored in the object fields <b>at the time of method call</b>.  Referencing\nvariables and parameters in the object constructor when the object is made will capture values that are static... maintain the values\nthat existed <b>at the time of object creation</b> and will not change dynamically.\n</p>\n<p>\nThe code changes we need to make are detailed, so just follow along in order\n</p>\n<p>\nIn function makePersonObject let's now make a few more changes.  First, rename the \"pay\" function to be called \"payFunc\".\nLet's also add a new field called \"payData\" that simple takes the hours and payrate parameters and multiplies them (not using the \"this\"\nobject reference).\n</p>\n<p>\nIn myMain take the single person object that the constructor return, and alert the payData field.  \nThen alert a call to the payFunc method.  Run the program and see that both outputs are the same.\n</p>\n<p>\nNow, after those alerts in myMain, add a line that doubles the hours field in the person object ( something like emp.hours *= 2; ).  We have just doubled the hours\nthat person worked, and we should see a doubling in the total pay.  Repeat the two different alerts and see what happens.\n</p>\n<p>\nThe reason we now see a difference is because the payFunc method computes using whatever happens to be stored in the rate and hours fields at the time the\nmethod is called (the \"this\" keyword says to use the fields dynamically).  \nSo if we change the values stored in those fields during computation, the result returned by the methods call will change accordingly.\nHowever, the payData field is static; it's value is created and stored when the object is made, using values from local variables (parameters) in the constructor memory map.\nThose values are fixed at construction time and do not change as computation progresses.\n</p>",
            "value": {
                "correct": "1",
                "style": "1"
            },
            "onSubmit": "var soln_inputs = [ [12345, \"smith\", 20, 30]   ];\nvar soln_outputs = [ [600,600,600,1200] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL > 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP > 2) { fail.s(\"use no more than 2 for loops\"); }\n    if (style.nAFD < 2) { fail.s(\"need at least 2 functions declared\"); }\n  }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                 ",
            "createdAt": {
                "$date": "2017-12-21T17:29:22.051Z"
            },
            "updatedAt": {
                "$date": "2018-03-20T13:11:38.368Z"
            }
        },
        {
            "_id": {
                "$oid": "5a40579441b9976116069c93"
            },
            "num": 0,
            "type": "twit",
            "phase": 1,
            "name": "Canvas and basic drawing",
            "folder": "5a4055f941b9976116069c92",
            "language": "javascript",
            "testMode": true,
            "maxSubmissions": "",
            "vidURL": "",
            "text": "<p>\n<font color=firebrick>\n<b>Write a program that will draw some very basic figures on a web page. Use HTML 5 graphics to do this. Details follow.\n</b></font>\n</p> \n<p>\nWe will write a program that will use the graphics features in HTML5 to make a simple drawing.\nHTML5 has a canvas tag that will set apart a rectangular space on a page.\n</p>\n<p>\nCut and paste the following JavaScript right after the \"use strict\"; line in your program:\n<pre>\n\n//=== supplied canvas stuff ==================================================\nvar tab = window.open();\nvar webPage = makeHTMLCanvas();  // alert(webPage);\nvar PIC = getCanvasContext();    // the canvas context... draw to this global var\n\nfunction makeHTMLCanvas() {\n  var htmlStr=\"\";\n  htmlStr += \"&lthtml>&lthead>&lt/head>&ltbody>\";\n  htmlStr += \"&lth1>Draw a Picture!!&lt/h1>\";\n  htmlStr += \"&ltcanvas id='myCanvas' width=800 height=600 \";\n  htmlStr += \"style='border:1px solid #000600;'>&lt/canvas>\";\n  htmlStr += \"&lt/body>&lt/html>\";\n  tab.document.write(htmlStr);\n  return htmlStr;\n}\n\nfunction getCanvasContext() {\n  var c = tab.document.getElementById(\"myCanvas\");\n  var context = c.getContext(\"2d\");\n  return context;\n}\n\n//=== end supplied canvas stuff ==================================================\n\n</pre>\n<br/>\nAfter this pre-supplied code, then write the code for your program.\n<br/><br/>\nYou may find this <a href=\"http://www.html5canvastutorials.com/\" target=\"_blank\">HTML5 Canvas tutorial </a> helpful.",
            "value": {
                "correct": "1",
                "style": "1"
            },
            "onSubmit": "var soln_inputs = [ [] ];\nvar soln_outputs = [ [] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error in your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    //if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\", (2/5)); }\n    //if (style.nAFL > 5 ) { fail.s(\"We need 4 or fewer for loops\", (1/10) ); }\n    //if (style.nAWL > 1) { fail.s(\"Use no more than 5 while loop\", (1/10) ); }\n    if (style.nTFD < 3) { fail.s(\"We need at least 3 functions declared and used\", (2/5) ); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}  \n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                         ",
            "createdAt": {
                "$date": "2017-12-25T01:42:44.639Z"
            },
            "updatedAt": {
                "$date": "2018-01-07T05:20:45.781Z"
            }
        },
        {
            "_id": {
                "$oid": "5a40580b41b9976116069c94"
            },
            "num": 1,
            "type": "diy",
            "phase": 1,
            "name": "<b>DIY:</b> Parameterize drawCircle",
            "folder": "5a4055f941b9976116069c92",
            "language": "javascript",
            "testMode": true,
            "maxSubmissions": "",
            "vidURL": "",
            "text": "<p>\n<font color=firebrick>\n<b>Write a program that will draw ... Use HTML 5 graphics to do this. Details follow.\n</b></font>\n</p> \n<p>\nStart with the code we wrote in class for \"Canvas and basic drawing.\nIn that code we wrote a function called \"drawCircle\" that took no parameters.\nWe also wrote a function called \"drawRectangle\" that did (eventually) get some parameters so we could\ncall it repeatedly and make rectangles get drawn at different places around the canvas.\n<br/><br/>\nWrite a version of \"drawCircle\" that is similarly parameterized.",
            "value": {
                "correct": "1",
                "style": "1"
            },
            "onSubmit": "var soln_inputs = [ [] ];\nvar soln_outputs = [ [] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error in your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    //if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\", (2/5)); }\n    //if (style.nAFL > 5 ) { fail.s(\"We need 4 or fewer for loops\", (1/10) ); }\n    //if (style.nAWL > 1) { fail.s(\"Use no more than 5 while loop\", (1/10) ); }\n    if (style.nTFD < 3) { fail.s(\"We need at least 3 functions declared and used\", (2/5) ); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}  \n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                  ",
            "createdAt": {
                "$date": "2017-12-25T01:44:43.097Z"
            },
            "updatedAt": {
                "$date": "2018-01-07T05:20:45.782Z"
            }
        },
        {
            "_id": {
                "$oid": "5a40586141b9976116069c95"
            },
            "num": 2,
            "type": "diy",
            "phase": 1,
            "name": "<B>DIY:</B> Function drawTriangle",
            "folder": "5a4055f941b9976116069c92",
            "language": "javascript",
            "testMode": true,
            "maxSubmissions": "",
            "vidURL": "",
            "text": "<p>\n<font color=firebrick>\n<b>Write a program that will draw ... Use HTML 5 graphics to do this. Details follow.\n</b></font>\n</p> \n<p>\nWrite a function \"drawTriangle\" that will draw a triangle on the canvas.  Make it parameterized like drawRectangle so that we can\nrepeatedly call drawTriangle and put triangles of different sizes at different places around the canvas.\n<br/><br/>\nTo do this you will need to investigate how to draw lines on the canvas.",
            "value": {
                "correct": "1",
                "style": "1"
            },
            "onSubmit": "var soln_inputs = [ [] ];\nvar soln_outputs = [ [] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error in your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    //if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\", (2/5)); }\n    //if (style.nAFL > 5 ) { fail.s(\"We need 4 or fewer for loops\", (1/10) ); }\n    //if (style.nAWL > 1) { fail.s(\"Use no more than 5 while loop\", (1/10) ); }\n    if (style.nTFD < 3) { fail.s(\"We need at least 3 functions declared and used\", (2/5) ); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}  \n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                  \n",
            "createdAt": {
                "$date": "2017-12-25T01:46:09.052Z"
            },
            "updatedAt": {
                "$date": "2018-01-07T05:20:45.784Z"
            }
        },
        {
            "_id": {
                "$oid": "5a40645041b9976116069c9c"
            },
            "num": 3,
            "type": "twit",
            "phase": 1,
            "name": "Point fractal 1: wallpaper",
            "folder": "5a4055f941b9976116069c92",
            "language": "javascript",
            "testMode": true,
            "maxSubmissions": "",
            "vidURL": "",
            "text": "<p>\n<font color=firebrick>\n<b>Write a program that will draw some point pictures on a web page. Use HTML 5 graphics to do this. Details follow.\n</b></font>\n</p> \n<p>\nWe will write a program that will use the graphics features in HTML5 to make a simple drawing.\nHTML5 has a canvas tag that will set apart a rectangular space on a page.\n</p>\n<p>\nCut and paste the following JavaScript right after the \"use strict\"; line in your program:\n<pre>\n\n//=== supplied canvas stuff ==================================================\nvar tab = window.open();\nvar webPage = makeHTMLCanvas();  // alert(webPage);\nvar PIC = getCanvasContext();    // the canvas context... draw to this global var\n\nfunction makeHTMLCanvas() {\n  var htmlStr=\"\";\n  htmlStr += \"&lthtml>&lthead>&lt/head>&ltbody>\";\n  htmlStr += \"&lth1>Draw a Picture!!&lt/h1>\";\n  htmlStr += \"&ltcanvas id='myCanvas' width=800 height=600 \";\n  htmlStr += \"style='border:1px solid #000600;'>&lt/canvas>\";\n  htmlStr += \"&lt/body>&lt/html>\";\n  tab.document.write(htmlStr);\n  return htmlStr;\n}\n\nfunction getCanvasContext() {\n  var c = tab.document.getElementById(\"myCanvas\");\n  var context = c.getContext(\"2d\");\n  return context;\n}\n\n//=== end supplied canvas stuff ==================================================\n\n</pre>\n<br/>\nAfter this pre-supplied code, then write the code for your program.\n<br/><br/>\nYou may find this <a href=\"http://www.html5canvastutorials.com/\" target=\"_blank\">HTML5 Canvas tutorial </a> helpful.",
            "value": {
                "correct": "1",
                "style": "1"
            },
            "onSubmit": "var soln_inputs = [ [] ];\nvar soln_outputs = [ [] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error in your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    //if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\", (2/5)); }\n    //if (style.nAFL > 5 ) { fail.s(\"We need 4 or fewer for loops\", (1/10) ); }\n    //if (style.nAWL > 1) { fail.s(\"Use no more than 5 while loop\", (1/10) ); }\n    if (style.nTFD < 3) { fail.s(\"We need at least 3 functions declared and used\", (2/5) ); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}  \n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                         ",
            "createdAt": {
                "$date": "2017-12-25T02:37:04.862Z"
            },
            "updatedAt": {
                "$date": "2018-01-07T05:20:45.785Z"
            }
        },
        {
            "_id": {
                "$oid": "5a4527e841b9976116069ca3"
            },
            "num": 4,
            "type": "twit",
            "phase": 1,
            "name": "Point fractal 2: doily",
            "folder": "5a4055f941b9976116069c92",
            "language": "javascript",
            "testMode": true,
            "maxSubmissions": "",
            "vidURL": "",
            "text": "<p>\n<font color=firebrick>\n<b>Write a program that will draw some point pictures on a web page. Use HTML 5 graphics to do this. Details follow.\n</b></font>\n</p> \n<p>\nWe will write a program that will use the graphics features in HTML5 to make a simple drawing.\nHTML5 has a canvas tag that will set apart a rectangular space on a page.\n</p>\n<p>\nCut and paste the following JavaScript right after the \"use strict\"; line in your program:\n<pre>\n\n//=== supplied canvas stuff ==================================================\nvar tab = window.open();\nvar webPage = makeHTMLCanvas();  // alert(webPage);\nvar PIC = getCanvasContext();    // the canvas context... draw to this global var\n\nfunction makeHTMLCanvas() {\n  var htmlStr=\"\";\n  htmlStr += \"&lthtml>&lthead>&lt/head>&ltbody>\";\n  htmlStr += \"&lth1>Draw a Picture!!&lt/h1>\";\n  htmlStr += \"&ltcanvas id='myCanvas' width=800 height=600 \";\n  htmlStr += \"style='border:1px solid #000600;'>&lt/canvas>\";\n  htmlStr += \"&lt/body>&lt/html>\";\n  tab.document.write(htmlStr);\n  return htmlStr;\n}\n\nfunction getCanvasContext() {\n  var c = tab.document.getElementById(\"myCanvas\");\n  var context = c.getContext(\"2d\");\n  return context;\n}\n\n//=== end supplied canvas stuff ==================================================\n\n</pre>\n<br/>\nAfter this pre-supplied code, then write the code for your program.\n<br/><br/>\nYou may find this <a href=\"http://www.html5canvastutorials.com/\" target=\"_blank\">HTML5 Canvas tutorial </a> helpful.",
            "value": {
                "correct": "1",
                "style": "1"
            },
            "onSubmit": "var soln_inputs = [ [] ];\nvar soln_outputs = [ [] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error in your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    //if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\", (2/5)); }\n    //if (style.nAFL > 5 ) { fail.s(\"We need 4 or fewer for loops\", (1/10) ); }\n    //if (style.nAWL > 1) { fail.s(\"Use no more than 5 while loop\", (1/10) ); }\n    if (style.nTFD < 3) { fail.s(\"We need at least 3 functions declared and used\", (2/5) ); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}  \n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                         ",
            "createdAt": {
                "$date": "2017-12-28T17:20:40.493Z"
            },
            "updatedAt": {
                "$date": "2018-01-07T05:20:45.786Z"
            }
        },
        {
            "_id": {
                "$oid": "5a45623341b9976116069ca9"
            },
            "num": 5,
            "type": "twit",
            "phase": 1,
            "name": "Point fractal 3: PI",
            "folder": "5a4055f941b9976116069c92",
            "language": "javascript",
            "testMode": true,
            "maxSubmissions": "",
            "vidURL": "",
            "text": "<p>\n<font color=firebrick>\n<b>Write a program that will draw some point pictures on a web page. Use HTML 5 graphics to do this. Details follow.\n</b></font>\n</p> \n<p>\nWe will write a program that will use the graphics features in HTML5 to make a simple drawing.\nHTML5 has a canvas tag that will set apart a rectangular space on a page.\n</p>\n<p>\nCut and paste the following JavaScript right after the \"use strict\"; line in your program:\n<pre>\n\n//=== supplied canvas stuff ==================================================\nvar tab = window.open();\nvar webPage = makeHTMLCanvas();  // alert(webPage);\nvar PIC = getCanvasContext();    // the canvas context... draw to this global var\n\nfunction makeHTMLCanvas() {\n  var htmlStr=\"\";\n  htmlStr += \"&lthtml>&lthead>&lt/head>&ltbody>\";\n  htmlStr += \"&lth1>Draw a Picture!!&lt/h1>\";\n  htmlStr += \"&ltcanvas id='myCanvas' width=800 height=600 \";\n  htmlStr += \"style='border:1px solid #000600;'>&lt/canvas>\";\n  htmlStr += \"&lt/body>&lt/html>\";\n  tab.document.write(htmlStr);\n  return htmlStr;\n}\n\nfunction getCanvasContext() {\n  var c = tab.document.getElementById(\"myCanvas\");\n  var context = c.getContext(\"2d\");\n  return context;\n}\n\n//=== end supplied canvas stuff ==================================================\n\n</pre>\n<br/>\nAfter this pre-supplied code, then write the code for your program.\n<br/><br/>\nYou may find this <a href=\"http://www.html5canvastutorials.com/\" target=\"_blank\">HTML5 Canvas tutorial </a> helpful.",
            "value": {
                "correct": "1",
                "style": "1"
            },
            "onSubmit": "var soln_inputs = [ [] ];\nvar soln_outputs = [ [] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error in your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    //if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\", (2/5)); }\n    //if (style.nAFL > 5 ) { fail.s(\"We need 4 or fewer for loops\", (1/10) ); }\n    //if (style.nAWL > 1) { fail.s(\"Use no more than 5 while loop\", (1/10) ); }\n    if (style.nTFD < 3) { fail.s(\"We need at least 3 functions declared and used\", (2/5) ); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}  \n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                         ",
            "createdAt": {
                "$date": "2017-12-28T21:29:23.485Z"
            },
            "updatedAt": {
                "$date": "2018-01-07T05:20:45.787Z"
            }
        },
        {
            "_id": {
                "$oid": "5a456c4541b9976116069cab"
            },
            "num": 6,
            "type": "twit",
            "phase": 1,
            "name": "Point fractal 4: Fredkin automata",
            "folder": "5a4055f941b9976116069c92",
            "language": "javascript",
            "testMode": true,
            "maxSubmissions": "",
            "vidURL": "",
            "text": "<p>\n<font color=firebrick>\n<b>Write a program that will draw some point pictures on a web page. Use HTML 5 graphics to do this. Details follow.\n</b></font>\n</p> \n<p>\nWe will write a program that will use the graphics features in HTML5 to make a simple drawing.\nHTML5 has a canvas tag that will set apart a rectangular space on a page.\n</p>\n<p>\nCut and paste the following JavaScript right after the \"use strict\"; line in your program:\n<pre>\n\n//=== supplied canvas stuff ==================================================\nvar tab = window.open();\nvar webPage = makeHTMLCanvas();  // alert(webPage);\nvar PIC = getCanvasContext();    // the canvas context... draw to this global var\n\nfunction makeHTMLCanvas() {\n  var htmlStr=\"\";\n  htmlStr += \"&lthtml>&lthead>&lt/head>&ltbody>\";\n  htmlStr += \"&lth1>Draw a Picture!!&lt/h1>\";\n  htmlStr += \"&ltcanvas id='myCanvas' width=800 height=600 \";\n  htmlStr += \"style='border:1px solid #000600;'>&lt/canvas>\";\n  htmlStr += \"&lt/body>&lt/html>\";\n  tab.document.write(htmlStr);\n  return htmlStr;\n}\n\nfunction getCanvasContext() {\n  var c = tab.document.getElementById(\"myCanvas\");\n  var context = c.getContext(\"2d\");\n  return context;\n}\n\n//=== end supplied canvas stuff ==================================================\n\n</pre>\n<br/>\nAfter this pre-supplied code, then write the code for your program.\n<br/><br/>\nYou may find this <a href=\"http://www.html5canvastutorials.com/\" target=\"_blank\">HTML5 Canvas tutorial </a> helpful.",
            "value": {
                "correct": "1",
                "style": "1"
            },
            "onSubmit": "var soln_inputs = [ [] ];\nvar soln_outputs = [ [] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error in your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    //if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\", (2/5)); }\n    //if (style.nAFL > 5 ) { fail.s(\"We need 4 or fewer for loops\", (1/10) ); }\n    //if (style.nAWL > 1) { fail.s(\"Use no more than 5 while loop\", (1/10) ); }\n    if (style.nTFD < 3) { fail.s(\"We need at least 3 functions declared and used\", (2/5) ); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}  \n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                         ",
            "createdAt": {
                "$date": "2017-12-28T22:12:21.039Z"
            },
            "updatedAt": {
                "$date": "2018-01-07T05:20:45.788Z"
            }
        },
        {
            "_id": {
                "$oid": "5a45bf5c41b9976116069cb0"
            },
            "num": 7,
            "type": "twit",
            "phase": 1,
            "name": "Point fractal 5: Life",
            "folder": "5a4055f941b9976116069c92",
            "language": "javascript",
            "testMode": true,
            "maxSubmissions": "",
            "vidURL": "",
            "text": "<p>\n<font color=firebrick>\n<b>Write a program that will draw some point pictures on a web page. Use HTML 5 graphics to do this. Details follow.\n</b></font>\n</p> \n<p>\nWe will write a program that will use the graphics features in HTML5 to make a simple drawing.\nHTML5 has a canvas tag that will set apart a rectangular space on a page.\n</p>\n<p>\nCut and paste the following JavaScript right after the \"use strict\"; line in your program:\n<pre>\n\n//=== supplied canvas stuff ==================================================\nvar tab = window.open();\nvar webPage = makeHTMLCanvas();  // alert(webPage);\nvar PIC = getCanvasContext();    // the canvas context... draw to this global var\n\nfunction makeHTMLCanvas() {\n  var htmlStr=\"\";\n  htmlStr += \"&lthtml>&lthead>&lt/head>&ltbody>\";\n  htmlStr += \"&lth1>Draw a Picture!!&lt/h1>\";\n  htmlStr += \"&ltcanvas id='myCanvas' width=800 height=600 \";\n  htmlStr += \"style='border:1px solid #000600;'>&lt/canvas>\";\n  htmlStr += \"&lt/body>&lt/html>\";\n  tab.document.write(htmlStr);\n  return htmlStr;\n}\n\nfunction getCanvasContext() {\n  var c = tab.document.getElementById(\"myCanvas\");\n  var context = c.getContext(\"2d\");\n  return context;\n}\n\n//=== end supplied canvas stuff ==================================================\n\n</pre>\n<br/>\nAfter this pre-supplied code, then write the code for your program.\n<br/><br/>\nYou may find this <a href=\"http://www.html5canvastutorials.com/\" target=\"_blank\">HTML5 Canvas tutorial </a> helpful.",
            "value": {
                "correct": "1",
                "style": "1"
            },
            "onSubmit": "var soln_inputs = [ [] ];\nvar soln_outputs = [ [] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error in your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    //if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\", (2/5)); }\n    //if (style.nAFL > 5 ) { fail.s(\"We need 4 or fewer for loops\", (1/10) ); }\n    //if (style.nAWL > 1) { fail.s(\"Use no more than 5 while loop\", (1/10) ); }\n    if (style.nTFD < 3) { fail.s(\"We need at least 3 functions declared and used\", (2/5) ); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}  \n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                         ",
            "createdAt": {
                "$date": "2017-12-29T04:06:52.847Z"
            },
            "updatedAt": {
                "$date": "2018-01-07T05:20:45.789Z"
            }
        },
        {
            "_id": {
                "$oid": "5a4fcaf8f99ad366764a2010"
            },
            "num": 33,
            "type": "diy",
            "phase": 1,
            "name": "{ <B>EC:</B> RANDOM ARRAY 3 COPY }",
            "folder": "5902b4167bb0b09c0d2a6422",
            "language": "javascript",
            "testMode": true,
            "maxSubmissions": "",
            "vidURL": "",
            "text": "<b>To get scored: This one has to be manually scored.</b>\n<br/><br/>\n<b>I have set the grader to score it at 0 for functionality.</b>\nYou can receive some style points for the various aspects requested (functions written, no globals, \nmyMain format etc.).  I will then manually award the rest of the style points and the functionality points \nby examining and running your code. When you have tested the code and are ready for it to be scored, \nsubmit it and then click \"share\" on it so I will see that you wish me to take a look.  I will only grade it once\nmanually, so be sure you have tested it well before sharing it.\n<br/><br/>\n<b>The program</b>\n<br/>\nWrite a program that will create an array and put into it some integers randomly generated between 10 and 30 (including possibly each end point), making sure that all\nthe numbers in the array are unique (no duplicates). \nThe size of the array will be given by the user as the first thing; you will validate (see below).\nOnce the array is properly filled, print the entire array with one alert statement.\n<br/><br/>\nThis is a more complicated program than most previous bricks. Here are some specifics:\n<ul>\n<li>\nFirst, you will be validating the user input\n</li>\n<li>\nNext, you must make sure each new integer you store in the array is unique -- that is, make sure it is not already in the array before you store it.  \n</li>\n<li>Also, you must write 5 functions here... myMain, getGoodInput(), genRandomInt(low,hi), alreadyIn ( n, arr ), and genUniqueIntArray ( n, hi, lo )\n</li>\n</ul>\n\n<b>Function details</b>\n<br/><p>\n<b>getGoodInput() </b> For this function you will use the re-ask-the-user strategy; call this function and have all user interaction (prompts) inside it.\nAsk the user for an integer that is between 1 and 20 (inclusive), and make sure you get one; if the user gives anything else (meaning a string, a non-integer, \na value smaller than 1 or larger than 20) print \"error\" and re-ask for input.\n<br/><br/>\n<b>genRandomInt ( low, hi ) </b> For this function, call Math.random inside it  and then adjust tvalue so that the \ninteger returned lies within the range lo to hi... inclusive of each.  You did this in an earlier brick, so go back and find that code.  \nTest it carefully to make sure it will be able to generate both lo and hi, and nothing outside that range.\n<br/><br/>\n<b>alreadyIn ( n, arr )</b> For this function you check to see if parameter value \"n\" is in the array \"arr\". If it is, return a true; if it is not, return a false;\nYou will call this function after you generate a new random integer to see if the number should be added to your array or not.\n<br/><br/>\n<b>genUniqueIntArray ( n, lo, hi ) </b> For this function you will create and return an array with unique random integers in it, each integer \nbetween lo and hi (inclusive).\nThis function will call genRandomInt and will also call alreadyIn to decide if the new random integer is already in the array being built. \n If it is there, simple call genRandomInt again.. and again if necessary... until the number you get back is not in the array. \nAt that point you add it to the array and keep going until the array is full.  Once the array if filled, return the array.\n<br/><br/>\n<b> myMain </b> The myMain code is fairly simple.  First, call getGoodInput to ifind out from the user how many integers to generate into the array.\nThen call genUniqueIntArray and pass it the user's array size number, as well as the range (30 hi, 10 low).  Capture the array that is returned and save\nit in a variable. Then print out the entire array in one alert statement.\n</p>\n",
            "value": {
                "correct": "5",
                "style": "2"
            },
            "onSubmit": "var soln_inputs = [ [\"must fail functionality\"] ];  // this input and out assures failing functionality\nvar soln_outputs = [ [\"manual grading\"] ];          // unless they are magnificent guessers\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"to be manually graded\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\" ); }\n  else if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\" ); }\n  else {\n    if (style.nWLAP > 2) { fail.s(\"use no more than 2 while loops\", (1/5) ); }\n    if (style.nFLAP > 2) { fail.s(\"use no more than 2 for loops\", (1/5) ); }\n    if (style.nAFD < 5) { fail.s(\"need at least 5 functions declared\", (1/5) ); }\n    if (true) { fail.s(\"some style points to be awarded manually\", (2/5) ); } \n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                  ",
            "createdAt": {
                "$date": "2018-01-05T18:59:04.29Z"
            },
            "updatedAt": {
                "$date": "2018-01-05T18:59:20.414Z"
            }
        },
        {
            "_id": {
                "$oid": "5a51ad25f22114cd4ee40379"
            },
            "num": 5,
            "type": "wall",
            "phase": 1,
            "name": "<B>W.GRAPHICS (35 PTS):</B> DRAW A CARDS PICTURE",
            "folder": "546eb51f7f212f1d61e5c25c",
            "language": "javascript",
            "testMode": true,
            "maxSubmissions": "",
            "vidURL": "",
            "text": "<p>\n<font color=firebrick>\n<b>Write a program that will draw ... bigger. Use HTML 5 graphics to do this. Details follow.\n</b></font>\n</p> \n<p>\n(30-5 pts) Due Sat. 12/5, 11:59 pm\n<br/><br/>\nYou will write a program that will use HTML5 graphics to draw a picture of your card deck and hands.\n<br/><br/>\nSee this\n<a href=\"http://www.cs.unc.edu/~stotts/COMP110-f15/assn/w.graphics.html\" target=\"_blank\" >\ndetailed description.\n</a>\n<br/><br/>\n<b>TO GET SCORED</b>\n<br/>\nThe auto-grader will score this a 0 for functionality and 0 for style.  It will be manually graded like a previous brick we did (last one in Arrays and Random).\n<br/><br/>\nWhen you are done and wish to have it manually scored, please submit it via the \"submit\" button and then click the \"share\" button on the resulting submission.\nI will see the share request and consider that a request for scoring.\nI will score this assignment one time.",
            "value": {
                "correct": "20",
                "style": "5"
            },
            "onSubmit": "var soln_inputs = [ [] ];\nvar soln_outputs = [ [\"not auto graded\"] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    //if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\", (2/5)); }\n    //if (style.nAFL > 5 ) { fail.s(\"We need 4 or fewer for loops\", (1/10) ); }\n    //if (style.nAWL > 3) { fail.s(\"Use only 3 or fewer while loops\", (1/10) ); }\n    if (style.nTFD < 4) { fail.s(\"We need at least 4 functions declared and used\", (2/5) ); }\n    fail.s(\"style will be manually graded\");\n  }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}  \n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                  \n ",
            "createdAt": {
                "$date": "2018-01-07T05:16:21.534Z"
            },
            "updatedAt": {
                "$date": "2018-01-07T05:19:58.097Z"
            }
        }
    ]
}