[{"_id":{"$oid":"53e6c5f3f9b711e1196d9791"},"phase":2.0},{"_id":{"$oid":"53e6dc2385bf71071c8c1707"},"phase":2.0},{"_id":{"$oid":"53e6dcac85bf71071c8c1708"},"createdAt":{"$date":"2014-08-10T02:45:00.655Z"},"folder":"53cef2444fae0fbd7f731233","language":"javascript","maxSubmissions":"","name":"Tires on 767 cars","num":1,"onSubmit":"// I/O pairs for functional behavior\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [3068] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness  \n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (!style.isJOTFC) { fail.s(\"use a single output, nothing else\"); }\n  if (!style.hasOTAOBE) { fail.s(\"write one call to alert using the number expression requested\"); }\n\n  // finalize and award points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n    ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick> <b> Write a program that prints the number of tires on 767 cars.  For this exercise let's assume that all cars have 4 tires.</b></font>\n</p>\n<p>\nTo arrive at this result, we will have to create an expression that starts with the number of cars and multiples it by the \nnumber of tires on each car.\n</p>","type":"twit","updatedAt":{"$date":"2018-02-07T12:53:51.571Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/expr.tirescars.mp4"},{"_id":{"$oid":"53e6dd0585bf71071c8c1709"},"createdAt":{"$date":"2014-08-10T02:46:29.209Z"},"folder":"53cef2444fae0fbd7f731233","language":"javascript","maxSubmissions":"","name":"Board length","num":3,"onSubmit":"// I/O pairs to define functional behavior\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [1.4285714285714286] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (!style.isJOTFC) { fail.s(\"use a single output, nothing else\"); }\n  if (!style.hasOTAOBE) { fail.s(\"write one call to alert using the number expression requested\"); }\n\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n     ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick><b>Write a program that prints the length (in feet) of each part of a 10 foot board that is sawn into 7 equal parts ( 10 divided by 7 ).</b>\n</font></p>\n<p>\nAs we have been doing, we must write an expression that will evaluate to the result we need, and we will put that\nexpression inside the parentheses of an alert statement to get it evaluated and printed out.  In this problem, the \nexpression involves number data.\n</p>","type":"twit","updatedAt":{"$date":"2018-02-07T12:53:51.574Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/expr.board.mp4"},{"_id":{"$oid":"53e6dda185bf71071c8c170a"},"createdAt":{"$date":"2014-08-10T02:49:05.764Z"},"folder":"53cef2444fae0fbd7f731233","language":"javascript","maxSubmissions":"","name":"Space craft","num":2,"onSubmit":"// I/O points for functional correctness\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [\"space-craft\"] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff=true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (!style.isJOTFC) { fail.s(\"use a single output, nothing else\"); }\n  if (!style.hasOTAOBE) { fail.s(\"write one call to alert using the string expression requested\"); }\n\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n      ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick> <b> Write a program that prints the words \"space\" and \"craft\" with a hyphen between. </b></font>\n</p>\n<p> Use string concatenation to do this.  Concatenation of strings is done with the + operator.\nAs before, we will create an expression to put inside the the parentheses of an alert statement\nto get it evaluated and printed.\nThe expression will concatenate the 3 strings together.\n</p>\n","type":"twit","updatedAt":{"$date":"2018-02-07T12:53:51.573Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/expr.spacecraft.mp4"},{"_id":{"$oid":"53e6de2085bf71071c8c170b"},"createdAt":{"$date":"2014-08-10T02:51:12.983Z"},"folder":"53cef2444fae0fbd7f731233","language":"javascript","maxSubmissions":"","name":"Quadratic equation","num":7,"onSubmit":"// I/O pairs define functional behavior\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [5, -10] ];\n\n// callbacks\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output, make sure the roots are in correct order\"); ff = true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  //if (!style.isJTTFC) { fail.s(\"use two output statements, nothing else\"); }\n  if (!style.hasTTAOBE) { fail.s(\"write two calls to alert, each using an arithmetic expression to calculate the solution\"); }\n\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n      ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick><b>Write a program that prints out the roots of the quadratic equation  for the specific case of a:2, b:10, and c:-100. Do this with two separate alert statements, each printing a single number. </b></font>\n</p>\n<p>\nRoots of the quadratic equations are computed with these expressions:\n<pre><font size=+1>\n -b  +/-  square root of ( b^2 - 4ac )  \n---------------------------------------------\n                      2a  \n</font></pre>\nthe +/- means do one computation with  + and then another with  -.\nSquare roots can be computed with the Math.sqrt function.  This complicated expression will show you the value of using parentheses to make your intentions unambiguous. \n</p>\n<p>\nAlert the \"+\" root first, then alert the \"-\" root with a separate alert statement.\n</p>\n","type":"twit","updatedAt":{"$date":"2018-02-07T12:53:51.581Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/expr.quadratic.mp4"},{"_id":{"$oid":"53e6e5d485bf71071c8c170d"},"createdAt":{"$date":"2014-08-10T03:24:04.213Z"},"folder":"53cef2574fae0fbd7f731234","language":"javascript","maxSubmissions":"","name":"Prof name","num":3,"onSubmit":"// I/O pairs\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [\"Stotts\"] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n  // if (ff) { fail.s(\"no style points since functional failed\"); }\n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (style.nDV == 0) { fail.s(\"you must declare and use one variable;\", (1/4) ); }\n    else if (style.nDV > 1) { fail.s(\"must declare only one variable;\", (1/4) ); }\n    if (style.nUDV > 0) { fail.s(\"you used undeclared variable(s): declare all variables;\", (1/4) ); }\n    if (style.nUUDV > 0) { fail.s(\"you declared variable(s) that were not used: use what you declare;\", (1/4) ); }\n    if (!style.hasOTAOV) { fail.s(\"write one call to alert, using a variable as parameter;\", (1/4) ); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n      ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that creates a variable \"profName\".  Then assign my name to it, and print out the value of the variable.  </b>\n</font>For reference, my name is spelled Stotts .\n</p>\n<p>\nThis program will be very similar to the previous one.\nThe difference is we are here storing string data into the variable (rather than number data).\nAny type of data can be stored in a JavaScript variable.  You can, for example, store a number into a variable and\nthen later in the program execution store a string or a boolean into the same variable. \n</p>\n","type":"twit","updatedAt":{"$date":"2018-01-14T13:00:05.39Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/var.profname.mp4"},{"_id":{"$oid":"53e6e79885bf71071c8c170e"},"createdAt":{"$date":"2014-08-10T03:31:36.812Z"},"folder":"53cef2574fae0fbd7f731234","language":"javascript","maxSubmissions":"","name":"Age in months","num":4,"onSubmit":"// I/O pairs\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [348] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n  // if (ff) { fail.s(\"no style points since functional failed\"); }\n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (style.nDV == 0) { fail.s(\"you must declare and use one variable;\", (1/4) ); }\n    else if (style.nDV > 1) { fail.s(\"must declare only one variable;\", (1/4) ); }\n    if (style.nUDV > 0) { fail.s(\"you used undeclared variable(s): declare all variables;\", (1/4) ); }\n    if (style.nUUDV > 0) { fail.s(\"you declared variable(s) that were not used: use what you declare;\", (1/4) ); }\n    if (!style.hasOTAOBE) { fail.s(\"one call to alert, with an expression parameter containing a variable;\", (1/4) ); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n      ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick><b>\nWrite this program by modifying your previous program. Using the variable \"profAge\" you made earlier, print out how many months old I am.  \nAll we need to see is the number of months. \n</b></font>\n</p>\n<p>\nThis program will show that more complicated expressions can contain variable names as well at constant data values. In your program, you will create an expression in your alert statement where you multiply by 12 the value stored in variable profAge. To evaluate the expression, JavaScript will retrieve the \ndata stored in \"profAge\" first, then combine that data with the 12 using the multiplication operator. \n</p>\n<p>\nRemember that you can reload your previous program by clicking on the previous problem, and clicking the \"Reload Last\" dark blue button above the editor window.\n</p>","type":"twit","updatedAt":{"$date":"2018-01-14T13:00:12.125Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/var.agemonths.mp4"},{"_id":{"$oid":"53e6e81c85bf71071c8c170f"},"createdAt":{"$date":"2014-08-10T03:33:48.94Z"},"folder":"53cef2574fae0fbd7f731234","language":"javascript","maxSubmissions":"","name":"Statement of age","num":5,"onSubmit":"// I/O points \nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [\"My prof is 348 months old.\"] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n  // if (ff) { fail.s(\"no style points since functional failed\"); }\n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (style.nDV == 0) { fail.s(\"you must declare and use a variable;\", (1/4) ); }\n    else if (style.nDV > 2) { fail.s(\"must declare no more than two variables;\", (1/4) ); }\n    if (style.nUDV > 0) { fail.s(\"you used undeclared variable(s): declare all variables;\", (1/4) ); }\n    if (style.nUUDV > 0) { fail.s(\"you declared variable(s) that were not used: use what you declare;\", (1/4) ); }\n    if (!style.hasOTAOBE) { fail.s(\"one call to alert, with a string expression parameter containing a variable;\", (1/4) ); }\n  }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n      ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Build this program by modifying the previous one. Use the variable \"profAge\" , and the computation of my age in months, and this time add an\nexplanatory message to the output along with the number.\n</b>\n</font>\n\n</p>\n<p>The format for the output is this: \n<pre>\n  My prof is 348 months old.\n</pre>\nNote the blanks before and after the 348, and the period at the end.  You will also produce the printed sentence by using the variable profAge and multiplying it in the alert.  In other words, you will compute 348 (as in the previous problem) in order to have that value appear in output.","type":"twit","updatedAt":{"$date":"2018-01-14T13:00:17.524Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/var.stateage.mp4"},{"_id":{"$oid":"53e6e8ce85bf71071c8c1710"},"createdAt":{"$date":"2014-08-10T03:36:46.356Z"},"folder":"53cef2574fae0fbd7f731234","language":"javascript","maxSubmissions":"","name":"Area of a circle","num":7,"onSubmit":"// I/O points\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [\"Area of a circle with radius 5.25 units is 86.590074375 units squared\"] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n  // if (ff) { fail.s(\"no style points since functional failed\"); }\n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (style.nDV != 3) { fail.s(\"you need only three variables;\", (1/4) ); }\n    if (style.nUDV > 0) { fail.s(\"you used undeclared variable(s): declare all variables;\", (1/4) ); }\n    if (style.nUUDV > 0) { fail.s(\"you declared variable(s) that were not used: use what you declare;\", (1/4) ); }\n    if (!style.hasOTAOBE) { fail.s(\"one call to alert, with a string expression parameter containing a variable;\", (1/4) ); }\n  }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);    ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that will compute the area of a circle with radius 5.25 units. Print out the result in the format show below.\n</b>\n</font>\n</p>\n<p>\nIn your program, first create a variable \"pi\" and assign to it the value of pi to 5 decimal places (3.14159). Create another variable named \"radius\" and assign to it the value 5.25. Now using variables \"pi\" and \"radius\" compute the area of a circle and assign that to a new variable \"area\" ( area is pi * radius * radius ). \n<p>\nIn this program, we learn how to mix variables with strings using concatenation to make readable and explanatory output.\nYou must print out the value \"area\" embedded in a message explaining it. \nThe final output will look this way: \n<pre>\n  Area of a circle with radius 5.25 units is 86.590074375 units squared\n</pre>\nwith no period at the end.  The numbers in the output must be computed by expressions using the variables.\n</p>\n","type":"twit","updatedAt":{"$date":"2018-01-14T13:00:28.164Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/var.areacirc.mp4"},{"_id":{"$oid":"53e6e98d85bf71071c8c1711"},"createdAt":{"$date":"2014-08-10T03:39:57.671Z"},"folder":"53cef2574fae0fbd7f731234","language":"javascript","maxSubmissions":"","name":"<b>DIY</b>: Circumference of a circle","num":8,"onSubmit":"// I/O points\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [\"A circle with radius 5.25 units has a circumference that is 32.986695 units.\"] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n  // if (ff) { fail.s(\"no style points since functional failed\"); }\n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (style.nDV != 3) { fail.s(\"you need to declare 3 and only 3 variables;\", (1/4) ); }\n    if (style.nUDV != 0) { fail.s(\"you used undeclared variable(s): declare all variables;\", (1/4) ); }\n    if (style.nUUDV != 0) { fail.s(\"you declared variable(s) that were not used: use what you declare;\", (1/4) ); }\n    if (!style.hasOTAOBE) { fail.s(\"use one alert, with a string expression parameter using a variable;\", (1/4) ); }\n  }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);    ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that will compute the circumference of a circle with radius 5.25 units. Print out the result in the format show below.\n</b>\n</font>\n</p>\n<p>\nThe formula for circumference is pi * radius * 2 . For pi use 3.14159.  You can build this program by modifying the Area of a circle program.\n</p> \n<p>\nThe output should look like this: \n<pre>\n  A circle with radius 5.25 units has a circumference that is 32.986695 units.\n</pre>\n","type":"diy","updatedAt":{"$date":"2018-01-14T13:00:34.133Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"53e6ea1485bf71071c8c1712"},"createdAt":{"$date":"2014-08-10T03:42:12.911Z"},"folder":"53cef2574fae0fbd7f731234","language":"javascript","maxSubmissions":"","name":"Quadratic equation 2","num":6,"onSubmit":"// I/O pairs\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [5, -10] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }\n  // if (ff) { fail.s(\"no style points since functional failed\"); }\n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (style.nDV < 5) { fail.s(\"you must use at least 5 variables;\", (1/10) ); }\n    if (style.nUDV != 0) { fail.s(\"you used undeclared variable(s): declare all variables;\", (1/10) ); }\n    if (style.nUUDV != 0) { fail.s(\"you declared variable(s) that were not used: use what you declare;\", (1/10) ); }\n    if (!style.hasTTAOV) { fail.s(\"need two alerts, each with a variable as parameter;\", (7/10) ); }\n  }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);      ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick><b>Write a program that prints out the roots of the quadratic equation  for the specific case of a:2, b:10, and c:-100. Do this with two separate alert statements, each printing a single number. </b></font>\n</p>\n<p>\nLet's revisit the quadratic equation, but this time use variables to make the code easier to write and to understand.\nStart with the program you wrote for the Quadratic equation problem in the Expressions module.\n</p>\n<p>\nDeclare variables \"a\", \"b\", and \"c\". Give a the value 2, b the value 10, and c the value -100. Compute the two roots of the quadratic equation but use the variable names a, b, and c in the expressions. Assign one root to a variable \"root1\"; assign the other root to the variable \"root2\". Print out the two root variables using two separate alert statements.  Print the \"+\" root first, and then print the \"-\" root.  \n</p>\n<p>\nFor reference, the roots of the quadratic equations are  -b +/- square root of ( b^2 - 4ac )  all over 2a , and you can use Math.sqrt() to compute the square root.","type":"twit","updatedAt":{"$date":"2018-01-14T13:00:22.99Z"},"value":{"correct":"2","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/var.quadratic2.mp4"},{"_id":{"$oid":"53f26d9e41b3137f5880318c"},"createdAt":{"$date":"2014-08-18T21:18:22.625Z"},"folder":"53cef2444fae0fbd7f731233","language":"javascript","maxSubmissions":"","name":"<b>DIY</b>: Wheels","num":9,"onSubmit":"//I/O pairs to define functional behavior\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [314] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (!style.isJOTFC) { fail.s(\"use a single alert, nothing else\"); }\n  if (!style.hasOTAOBE) { fail.s(\"write one call to alert, using a number expression\"); }\n\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick><b>\nA parking lot has 53 cars in it (each with 4 wheels) and 17 trucks (each with 6 wheels).  Write a program that prints out the total number of wheels in that parking lot.  \n</b></font>\n</p>\n<p>\nUse a single alert statement with an expression to produce the correct number by multiplying and adding appropriately.\n</p>","type":"diy","updatedAt":{"$date":"2018-02-07T12:53:51.584Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"53f26f5041b3137f5880318d"},"createdAt":{"$date":"2014-08-18T21:25:36.788Z"},"folder":"53cef2444fae0fbd7f731233","language":"javascript","maxSubmissions":"","name":"<b>DIY</b>: Cake","num":10,"onSubmit":"// I/O pairs to define functional behavior\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [1.6153846153846154] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (!style.isJOTFC) { fail.s(\"use a single output, nothing else\"); }\n  if (!style.hasOTAOBE) { fail.s(\"write one call to alert, using a number expression\"); }\n\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick><b>\nA chocolate cake weighs 7 pounds.  It is cut into 13 equal pieces.  Write a program that will print out the weight (in pounds) of 3 pieces of cake.\n</b></font>\n</p>\n<p>\nUse a single alert statement to do this, and use an expression to compute the correct number by diving and multiplying appropriately.\n</p>","type":"diy","updatedAt":{"$date":"2018-02-07T12:53:51.585Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"53f29adc41b3137f58803190"},"createdAt":{"$date":"2014-08-19T00:31:24.303Z"},"folder":"53cef2444fae0fbd7f731233","language":"javascript","maxSubmissions":"","name":"<b>DIY</b>: Pythagoras","num":12,"onSubmit":"// I/O pairs to define functional behavior\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [7.615773105863909] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (style.nTLFC != 1) { fail.s(\"use a single output, nothing else\"); }\n  if (!style.hasOTAOBE) { fail.s(\"write one call to alert, using a number expression\"); }\n\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick><b>\nWrite a program that will print out the length of the hypotenuse of a right triangle with side lengths 3 and 7.  \n</b></font>\n<br/>Use a single alert statement and write an expression that computes the correct number by multiplying, adding, and square rooting appropriately.  \n</p>\n<p>\nThe Pythagorean theorem is used (among other things) to compute the length of the hypotenuse of a right triangle, given the lengths of its two shorter sides.  The equation is \n<font size=+1>\n<pre>\n   a^2 + b^2 = h^2 \n\n      where h is the hypotenuse.  If we do a little algebra, we get \n\n   h = square root of ( a^2 + b^2 )\n</pre>\n</font>\n</p>\n<p>\nLike we did in the Quadratic equation program, use Math.sqrt ( ) to find the square root.\n</p>","type":"diy","updatedAt":{"$date":"2018-02-07T12:53:51.587Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"53f2a5f641b3137f58803192"},"createdAt":{"$date":"2014-08-19T01:18:46.477Z"},"folder":"53f29f9a41b3137f58803191","language":"javascript","maxSubmissions":"","name":"Function calls a function","num":6,"onSubmit":"//console.log(\"checking Function calls a function\");\nvar soln_inputs = [ [ 17 ], [121] ];\nvar soln_outputs = [ [4.123105625617661], [11] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF > 0) { fail.s(\"use no while loop\"); }\n    if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n//console.log(\"end correctness check\");          ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that asks the user for a number, then computes and prints out the square root of that input.\n</b></font>\n</p> \n<p> Use the myMain format you learned in the previous problems.  To do this, the body of the myMain function will call another function: the Math.sqrt() function that is pre-defined for you in JavaScript. It will also be calling the function \"prompt\" to get input, and the function \"alert\" to produce output.\n</p>\n<p>\nFunctions can call other functions.  This is how smaller chunks of code organized as function definitions can be made to execute together as if they were a larger single program.\n</p>\n<p>\nWe term the order in which statements are executed in a program the \"control flow\".  Calling a function, and returning values, is an important\nkind of control flow that we will need to carefully understand.  When a function is executing (let's say myMain() for example), \nthe code for the function body will run statement by statement from the beginning of the body.  When a call to another function \n(let's say Math.sqrt for example) is encountered in myMain's body, the execution of myMain will pause... it will stop executing while Math.sqrt\nbegins to run.  Eventually Math.sqrt computes a value, and it stops executing; it sends that value back to myMain, and myMain begins executing\nagain at the point where Math.sqrt was called.  The value sent back in put in place of the call so myMain can continue.  We say that (in this\nexample) myMain is the \"calling\" function, and Math.sqrt is the \"called\" function.\n</p>\n<p>\nWe will see this control flow illustrated in the Memory Map chalk talks that are coming up in the next module.  We will also see how variables\nare laid out in memory and how execution causes those values to change.\n</p>","type":"twit","updatedAt":{"$date":"2018-01-16T19:54:03.905Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/simpfunc.funcCallsFunc.mp4"},{"_id":{"$oid":"53f2b77d41b3137f58803198"},"createdAt":{"$date":"2014-08-19T02:33:33.261Z"},"folder":"53cef2574fae0fbd7f731234","language":"javascript","maxSubmissions":"","name":"<b>DIY</b>: Gallons and  ounces","num":10,"onSubmit":"// I/O points\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [\"In 3.14 gallons there are 401.92 ounces\"] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n  // if (ff) { fail.s(\"no style points since functional failed\"); }\n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (style.nDV > 4) { fail.s(\"no need to declare more than 4 variables;\", (1/4) ); }\n    if (style.nUDV != 0) { fail.s(\"you used undeclared variable(s): declare all variables;\", (1/4) ); }\n    if (style.nUUDV != 0) { fail.s(\"you declared variable(s) that were not used: use what you declare;\", (1/4) ); }\n    if ( !( style.hasOTAOV || style.hasOTAOBE ) ) { \n      fail.s(\"use one alert, with a string expression parameter containing variables;\", (1/4) ); \n    }\n  }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick><b>\nWrite a program that computes the number of ounces in 3.14 gallons.\n</b>\n</font>\n</p>\n<p>\nTo get the result, we will produce an expression and save the evaluated value in a variable; we will use the facts that a gallon has 4 quarts, a quart has 32 ounces.   \nPrint out the results in a phrase (string) like this:\n<pre>\nIn 3.14 gallons there are 401.92 ounces\n</pre> \n(with no period at the end, and no blanks before the first \"In\" and no blanks after the ending \"ces\"). You will use string concatenation ( + ) to glue all the text strings and number expressions together inside an alert statement.\n</p>\n","type":"diy","updatedAt":{"$date":"2018-01-14T13:00:56.145Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"53f2bbb541b3137f5880319a"},"createdAt":{"$date":"2014-08-19T02:51:33.394Z"},"folder":"53cef2444fae0fbd7f731233","language":"javascript","maxSubmissions":"","name":"<b>DIY</b>: Easy as 1,2,3","num":8,"onSubmit":"// I/O pairs to define functional behavior\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [\"one,two,three\"] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (!style.isJOTFC) { fail.s(\"use a single output, nothing else\"); }\n  if (!style.hasOTAOBE) { fail.s(\"write one call to alert, using a string concatenation expression\"); }\n\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n\n        ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick><b>\nWrite a program that takes the string \"one\" the string \"two\" and the string \"three\" and prints out all of them concatenated with commas between. \n</b></font>\n</p>\n<p>\nUse the \"+\" string operator to do this. The result will be the string \"one,two,three\" .\n</p>","type":"diy","updatedAt":{"$date":"2018-02-07T12:53:51.583Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"53f8a514c2dd4a6c1786a0ad"},"createdAt":{"$date":"2014-08-23T14:28:36.194Z"},"folder":"53f8a24cc2dd4a6c1786a0ac","language":"javascript","maxSubmissions":"","name":"Overview","num":0,"onSubmit":"var soln_inputs = [ [] ];\nvar soln_outputs = [ [true, false ] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { truVec[i] || fail.f(\"failed functional correctness\"); }\n  }\n  // check for all fn format\n  if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n  if (style.nDV > 0) {fail.s(\"no need to declared and use variables\"); }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);      ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Comparisons\n</b></font>\n</p> \n<p>\nNow we return to study Boolean data in more detail.\nOne of the main uses for Boolean (true, false) data is to answer questions like \"is the value in this variable larger than the value stored in this other variable?\".\nIf we can get answers to questions like this we can make decisions that affect the control flow of our programs, and the final outcomes of them.\n</p>\n<p>\nWe ask questions like this using comparison operators (less than, equal to, greater than, etc.).  An expression using comparison operators\nwill \"answer\" the question by producing a boolean result (true, or false).\n</p>\n<p>\nTo complete this problem, type in this JavaScript program:\n<br/><b>\n&nbsp&nbsp&nbsp alert( 100 < 200 );\n<br/>\n&nbsp&nbsp&nbsp alert( 100 === 200 );\n</b><br/>\nThere are several ways you can interpret a boolean expression.  Consider the first expression here... 100 < 200.  We are in some sense stating \n\"100 is less than 200\" and asking \"is this true? or is it false?\".  Or, you may prefer to think of it as asking a question and wanting a YES or NO\nanswer: \"is 100 less than 200\" ?  Here, we expect YES (or true).\n</p>\n<p>\nSo we expect the first expression to evaluate to true, since 100 is less than 200.\nWe expect the second expression to evaluate to false, since it is not the case that 100 is the same numerical value as 200.\n</p>\n<p>\n</b>Remember to use the myMain function format for style points.<b>\n</p>","type":"twit","updatedAt":{"$date":"2018-01-24T15:47:21.081Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/compare.overview.mp4"},{"_id":{"$oid":"53faa4ab6a97a90071d00af6"},"createdAt":{"$date":"2014-08-25T02:51:23.321Z"},"folder":"53cef2574fae0fbd7f731234","language":"javascript","maxSubmissions":"","name":"<b>DIY</b>: Pythagoras 2","num":9,"onSubmit":"// I/O points\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [7.615773105863909] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n  // if (ff) { fail.s(\"no style points since functional failed\"); }\n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (style.nDV != 3) { fail.s(\"you need to declare 3 and only 3 variables;\", (1/10) ); }\n    if (style.nUDV != 0) { fail.s(\"you used undeclared variable(s): declare all variables;\", (1/5) ); }\n    if (style.nUUDV != 0) { fail.s(\"you declared variable(s) that were not used: use what you declare;\", (1/10) ); }\n    if (!style.hasOTAOV) { fail.s(\"use one alert, with a variable as parameter;\", (3/5) ); }\n  }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick><b>\nWrite a program that will print out the length of the hypotenuse of a right triangle with side lengths 3 and 7.  \n</b></font>\n</p>\nIn this problem we revisit the Pythagorean theorem: a^2 + b^2 = h^2.  As before we need to compute the square root of the sum of the squares of the shorter sides of an right triangle.  This time we will declare three variables a, b, and c.  Assign the value 3 to a; assign the value 7 to b.  Then write an expression using variables a and b that will produce the length of the hypotenuse and assign that value to h.  Print out the value of h (just the number). \n</p>\n<p>\nWe need a single alert statement, and that statement will simply print the value of the variable h after you have computed and stored into h the\nproper result.\n</p>","type":"diy","updatedAt":{"$date":"2018-01-14T13:00:50.39Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"53fdf6e9139cbac8319db314"},"createdAt":{"$date":"2014-08-27T15:19:05.769Z"},"folder":"53f29f9a41b3137f58803191","language":"javascript","maxSubmissions":"","name":"Quadratic equation 4","num":4,"onSubmit":"//console.log(\"checking Function calls function\");\nvar soln_inputs = [ [2,10,-100], [5,-6,1] ];\nvar soln_outputs = [ [5,-10], [1,0.2] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }\n  // if (ff) { fail.s(\"no style points since functional failed\"); }\n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesn't follow myMain function format\", (3/5)); }\n    if (style.nDV > 6) { fail.s(\"you dont need more than 6 variables\", (1/5) ); }\n    if (style.nUDV != 0) { fail.s(\"you used undeclared variable(s): declare all variables\", (1/10) ); }\n    if (style.nUUDV != 0) { fail.s(\"you declared variable(s) that were not used: use what you declare\", (1/10) ); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n//console.log(\"end correctness check\");","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Let's do the quadratic equation program yet again again, this time in our new myMain format.\n</b></font>\n</p> \n<p>\nYes, yet again.  Whatever else you learn in this course, you will remember the quadratic equation :) .\nTake the program you wrote for Quadratic 3 (in folder \"Input\") and put it into proper myMain function format.  \nIt will behave the same as before, it will just be structured differently.  The user will still be giving values for a, b, and c as \nprompt input.\n</p>\n<p>\n<b>Testing notes:</b> Obviously, since we knows what results to expect, try running your program and giving the inputs\na as 2, b as 10, and c as -100.  Try some other values as well... google up some solutions to the quadratic equations and see that\nyour code gives those answers.  In testing any program, we will always have the issue of an \"oracle\" -- we will need something that\ntells us what output to expect from a correct program.  We will design a set of test cases... inputs that exercise the full range of input\nvalues that the program is built to handle, matched with the proper output for each input.\n</p>","type":"twit","updatedAt":{"$date":"2018-01-16T19:53:52.242Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/simpfunc.quadratic4.mp4"},{"_id":{"$oid":"53fe5b9e139cbac8319db41d"},"createdAt":{"$date":"2014-08-27T22:28:46.295Z"},"folder":"53f29f9a41b3137f58803191","language":"javascript","maxSubmissions":"","name":"<b>DIY</b>: Pythagoras 4","num":10,"onSubmit":"//console.log(\"checking DIY: Pythagoras 4\");\nvar soln_inputs = [ [1,1], [3,4], [4.12,6.54] ];\nvar soln_outputs = [ [1.4142], [5], [7.7295] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesn't follow myMain function format\", (1/4)); }\n    if (style.nTNC < 2) { fail.s(\"must convert both input strings to number with calls to Number()\", 1/4); }\n    if (style.nDV > 4) { fail.s(\"you dont need more than 4 variables\", (1/8) ); }\n    if (style.nUDV != 0) { fail.s(\"you used undeclared variable(s): declare all variables\", (1/16) ); }\n    if (style.nUUDV != 0) { fail.s(\"you declared variable(s) that were not used: use what you declare\", (1/16) ); }\n    if (style.hasOTAOL) { fail.s(\"need one alert, with a variable or expression as parameter\", (1/4) ); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n//console.log(\"end correctness check\");","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that will print out the length of the hypotenuse of a right triangle with side lengths given by the user as input from the keyboard. \n</b></font>\n</p> \n<p>\nYet again.  Take the program you wrote for Pythagoras 3 (in folder \"Input\") and put it into proper myMain function format. \nIt will behave the same: it will be getting values of a and b from the user via prompts.  The only change will be in structural style.\n</p>","type":"diy","updatedAt":{"$date":"2018-01-16T19:54:27.825Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"53fe5dc1139cbac8319db420"},"createdAt":{"$date":"2014-08-27T22:37:53.929Z"},"folder":"53f29f9a41b3137f58803191","language":"javascript","maxSubmissions":"","name":"Double Quad","num":5,"onSubmit":"//console.log(\"checking Double Quad\");\nvar soln_inputs = [ [2,10,-100,2,10,-100], [5,-6,1,5,-6,1] ];\nvar soln_outputs = [ [5,-10,5,-10], [1,0.2,1,0.2] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!(style.nTFD==1 && style.nTFC==2)) { fail.s(\"doesnt follow the modified myMain function format (2 calls)\", (3/5) ); }\n    // if (!style.isAFD1C) { fail.s(\"doesn't follow myMain function format\", (3/5) ); }\n    if (style.nDV > 6) { fail.s(\"you dont need more than 6 variables\", (1/5) ); }\n    if (style.nUDV != 0) { fail.s(\"you used undeclared variable(s): declare all variables\", (1/10) ); }\n    if (style.nUUDV != 0) { fail.s(\"you declared variable(s) that were not used: use what you declare\", (1/10) ); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n//console.log(\"end correctness check\");","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that will find roots for the quadratic equation, and make it do that solving twice.\n</b></font>\n</p> \n<p>\nTake the code you just wrote for Quadratic 4 as a starting point for this problem.  Modify your code to simply run the function twice.  We will define the function once (as we did before), but we will run that function twice by putting two calls to myMain() at the end, one after the other.  This will cause the code that performs the Quadratic equation computation to execute, and then execute a second time right after the first. \n<br/><br/>\n<b>Notice:this violates our format rules </b> (which call for a single function call to myMain() at the end) but for this problem the violation is ok... we are learning the point that you can call a function as many times as you like, but you declare (define) it only once..","type":"twit","updatedAt":{"$date":"2018-01-16T19:53:58.351Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/simpfunc.dubquad.mp4"},{"_id":{"$oid":"53fe61e1139cbac8319db427"},"createdAt":{"$date":"2014-08-27T22:55:29.565Z"},"folder":"5902b4167bb0b09c0d2a6422","language":"javascript","maxSubmissions":"","name":"<b>W.Stats (10pts):</b> Stacking some basic bricks","num":24,"onSubmit":"var soln_inputs = [ \n   [1, 2, 3, 4, 5], \n   [7, 10, 8, 101, 18], \n   [3, 4, 6, 11, 17] \n];\nvar soln_outputs = [ \n   [\"sum: 15\",  \"average: 3\",    \"max: 5\",   \"min: 1\", \"ratio: 5\" ], \n   [\"sum: 144\", \"average: 28.8\", \"max: 101\", \"min: 7\", \"ratio: 14.42\" ],\n   [\"sum: 41\",  \"average: 8.2\",  \"max: 17\",  \"min: 3\", \"ratio: 5.66\" ] \n];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { truVec[i] || fail.f(\"failed functional correctness\"); }\n  }\n  // check for all fn format\n  if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n  if (style.nAFL>0 || style.nAWL>0) { fail.s(\"no loops in this problem\"); }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);","phase":2,"testMode":true,"text":"Let's do a problem using what we have learned (up through simple functions).  \nGet 5 numbers from the user.  Compute and print (in this order) these things (each a separate alert statement):\n<ul>\n<li>the sum of the 5 numbers</li>\n<li>the average of the 5 numbers</li>\n<li>the largest of the 5 numbers</li>\n<li>the smallest of the 5 numbers</li>\n<li>the largest number divided by the smallest, truncated to 2 decimal places <b><i>(USE Math.floor. DO NOT use Math.trunc)</i></b></li>\n</ul>\nTo do this before we have learned conditional statements you will need the Math.max() function.\nIf you call Math.max(a,b) it will return the larger value.  Math.max() can take many arguments; for example, Math.max(a,b,c) will return the largest of the three values stored in variables a, b, and c.  There is a corresponding Math.min() function to use for finding the smallest.\n<br/><br/>\n<b>Output format:</b> Let's say the user gives these numbers: 6, 3, 11, 17, 4. Then the output should look this way (Each line is an alert, and pay attention to blanks etc.):\n<pre>\n   sum: 41\n   average: 8.2\n   max: 17\n   min: 3\n   ratio: 5.66\n</pre>\n<b>Remember</b> to put your program in proper myMain function format.","type":"wall","updatedAt":{"$date":"2018-01-05T18:59:04.579Z"},"value":{"correct":"8","style":"2"},"vidURL":""},{"_id":{"$oid":"54067f6d139cbac8319db764"},"createdAt":{"$date":"2014-09-03T02:39:41.635Z"},"folder":"53f29f9a41b3137f58803191","language":"javascript","maxSubmissions":"","name":"<b>DIY</b>: User height in cm 2","num":11,"onSubmit":"//console.log(\"checking DIY: User height in cm 2\");\nvar soln_inputs = [ [0,10], [5,3], [6,7], [2,11] ];\nvar soln_outputs = [ [25], [160], [201], [89] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesn't follow myMain function format\", (1/4)); }\n    if (style.nTNC < 2) { fail.s(\"must convert both input strings to number with calls to Number()\", 1/4); }\n    if (style.nDV > 5) { fail.s(\"you dont need more than 5 variables\", (1/8) ); }\n    if (style.nUDV != 0) { fail.s(\"you used undeclared variable(s): declare all variables\", (1/16) ); }\n    if (style.nUUDV != 0) { fail.s(\"you declared variable(s) that were not used: use what you declare\", (1/16) ); }\n    if (style.hasOTAOL) { fail.s(\"need one alert, with a variable or expression as parameter\", (1/4) ); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n//console.log(\"end correctness check\");             ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that will convert a person's height from feet and inches into centimeters.  Print out the centimeter height as a single number.\n</b></font>\n</p> \n<p>\nLet's revisit the \"User height in cm\" problem from module \"Input\".  Write a program that will functionally do the same thing, but is in proper myMain function format.\n</p>","type":"diy","updatedAt":{"$date":"2018-01-16T19:54:32.69Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"5408a4388c3b19243be5d259"},"createdAt":{"$date":"2014-09-04T17:41:12.054Z"},"folder":"53f8a24cc2dd4a6c1786a0ac","language":"javascript","maxSubmissions":"","name":"Greater than","num":1,"onSubmit":"var soln_inputs = [ [21, 7], [7, 21], [ 10,10 ] ];\nvar soln_outputs = [ [true], [false], [false] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { truVec[i] || fail.f(\"failed functional correctness\"); }\n  }\n  // check for all fn format\n  if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                  ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program to get two numbers from the user, and print out the answer to this question: \nIs the first number given greater than the second number given?\n</b></font>\n</p> \n<p>\nThe lesson to learn here is that an expression using a comparison operator \"turns into\" a true or a false when it is evaluated.\n</p>\n<p>\nRemember to use the proper myMain function style.\n</p>","type":"twit","updatedAt":{"$date":"2018-01-24T15:47:27.002Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/compare.gt.mp4"},{"_id":{"$oid":"5408a5ca8c3b19243be5d25e"},"createdAt":{"$date":"2014-09-04T17:47:54.277Z"},"folder":"53f8a24cc2dd4a6c1786a0ac","language":"javascript","maxSubmissions":"","name":"Less than or equal to","num":2,"onSubmit":"var soln_inputs = [ [21, 7], [7, 21], [ 10,10 ] ];\nvar soln_outputs = [ [false], [true], [true] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { truVec[i] || fail.f(\"failed functional correctness\"); }\n  }\n  // check for all fn format\n  if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                  ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program to get two numbers from the user, and print out the answer to this question: \nIs the first number given less than or equal to the second number given?\n</b></font>\n</p> \n<p>\nHere the operator we are working with is \"less that or equal to\".  It will be written as \"<=\" and it will produce true is the left operand is less than the right, and it will also\nproduce true if the left operand is equal to the right operand.\nRemember to use the proper myMain function style.\n</p>","type":"twit","updatedAt":{"$date":"2018-01-24T15:47:33.201Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/compare.lte.mp4"},{"_id":{"$oid":"5408a6448c3b19243be5d25f"},"createdAt":{"$date":"2014-09-04T17:49:56.834Z"},"folder":"53f8a24cc2dd4a6c1786a0ac","language":"javascript","maxSubmissions":"","name":"Equal to (with strings)","num":3,"onSubmit":"var soln_inputs = [ [\"hello\",\"hello\"], [\"hello\",\"goodbye\"], [ \"hi\",\"high\" ] ];\nvar soln_outputs = [ [true], [false], [false] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { truVec[i] || fail.f(\"failed functional correctness\"); }\n  }\n  // check for all fn format\n  if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                  ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program to get two <i>strings</i> from the user (no call to Number() around the prompt), and print out the answer to this question: \nIs the first string the same as the second string given?\n</b></font>\n</p> \n<p>\nHere we are learning that comparison operators work for string data as well as number data.  The only question is: what does it mean for two strings to be equal?\nSimilarly, we will need to know how to decide if one string is less than another (and greater than).\n</p>\n<p>\nWhen comparing strings we use alphabetic order (dictionary order) to answer questions of less than or greater than.  If a string S comes before a string T in the dictionary, then we say that S < T is true.  For two strings to be equal, they must both have exactly the same number of characters, the same characters in the same order.  \nThe full set of rules for string comparison is in your text, or on-line and easily found.  You should take the program you write here and try the different\noperators ( <=,  <,  >=,  >,  ===, !== ) on strings and see how they behave.  See if upper case characters come before lower, for example.\nSee where special characters like +, !, #, : etc. come compared to alphabetic characters.  Where do the digits 0-9 fit in?\n</p>","type":"twit","updatedAt":{"$date":"2018-01-24T15:47:38.293Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/compare.eqstrings.mp4"},{"_id":{"$oid":"5408a8ae8c3b19243be5d260"},"createdAt":{"$date":"2014-09-04T18:00:14.231Z"},"folder":"53f8a24cc2dd4a6c1786a0ac","language":"javascript","maxSubmissions":"","name":"Not equal ","num":4,"onSubmit":"var soln_inputs = [ [21, 7], [7, 21], [ 10,10 ] ];\nvar soln_outputs = [ [true], [true], [false] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { truVec[i] || fail.f(\"failed functional correctness\"); }\n  }\n  // check for all fn format\n  if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                  ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program to get two numbers from the user and print out the answer to this question: \nIs the first number given different from the second number given?\n</b></font>\n</p> \n<p>\nTo answer \"different from\" we will use the \"not equals\" operator, written \" !== \".  The ! is used in many programming languages to mean \"not\",\nand in JavaScript it is an operator all by itself (the logical NOT operator).  Putting it in front of the == makes the not equals operator.\nIt may be obvious, but two numbers (and two strings) are not equal if the === question (equality) would be answered false.  \n<pre>\n if ( S1 === S2 ) is false, then (S1 !== S2 ) is true\n</pre>\nThe opposing senses that happen when\nusing not on boolean can take some getting used to.\n</p>","type":"twit","updatedAt":{"$date":"2018-01-24T15:47:43.637Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/compare.neq.mp4"},{"_id":{"$oid":"5408a99e8c3b19243be5d261"},"createdAt":{"$date":"2014-09-04T18:04:14.713Z"},"folder":"53f8a24cc2dd4a6c1786a0ac","language":"javascript","maxSubmissions":"","name":"Less than (with strings)","num":5,"onSubmit":"var soln_inputs = [ [\"hi\", \"hi there\"], [\"user\", \"user\"], [ \"xray\", \"machine\"], [\"apple\", \"beta\" ], [\"4\", \"40\" ], [\"5\",\"40\"] ];\nvar soln_outputs = [ [true], [false], [false], [true], [true], [false] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { truVec[i] || fail.f(\"failed functional correctness\"); }\n  }\n  // check for all fn format\n  if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                  ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program to get two strings from the user and print out the answer to this question: \nDoes the first string come before the second string in alphabetic order?\n</b></font>\n</p> \n<p>\nWe will use the less than operator to answer this question.  Comparing strings for less than (or greater than) uses alphabetic order to make the decision.\nIf string S1 appears in a dictionary before another string S2, then we say that S1 < S2 .  You can think of \"less than\" for strings as \"precedes\". \n</p>\n<p>\nJust like in a dictionary, if one string is a proper prefix of another, then the shorter word precedes.  For example, \"tar\" < \"tarheels\" .\nYou can explore on your own how the UPPER CASE characters are related to lower, where the special characters like # and * fit in, and\nwhere the numeric digits 0 to 9 appear in the ordering.  See if you can use your program here to map out an order for upper case, lower case, digits, and special characters.\nThis order is fairly standard and can be googled up as well, but it's always more fun and instructional to explore it out yourself.\n</p>\n<p>\nThere is one further warning about strings made up of digits (that look like numbers).  This issue illustrates why we must be careful to convert\nkeyboard input to numeric data if the user is trying to input numbers.\nConsider this:  is \"450\" < \"50\" ?  Try it... see that the answer is yes... true... because this is string comparison.  Since \"4\" comes before \"5\", the sting beginning\nwith \"4\" precedes the one beginning with \"5\".  Strings are not numbers even if they look like it.\n</p>","type":"twit","updatedAt":{"$date":"2018-01-24T15:47:49.573Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/compare.ltstrings.mp4"},{"_id":{"$oid":"5408b8188c3b19243be5d262"},"createdAt":{"$date":"2014-09-04T19:06:00.388Z"},"folder":"53cef2744fae0fbd7f731236","language":"javascript","maxSubmissions":"","name":"Overview","num":0,"onSubmit":"var soln_inputs = [ [] ];\nvar soln_outputs = [ [\"the loop body runs\",\"the loop body runs\", \"the loop body runs\" ] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nAFL != 1) { fail.s(\"use one for loop\"); }\n    if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);      ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Repetition: Loops\n</b></font>\n</p> \n<p>Loops give us major problem solving power.  Without them programs would be useful for solving only small problems, like we have been doing.  Loops allow us to write a finite number of statements but to have them executed many many (possibly infinite) times, by repeating at run-time rather than at write-time.  \n</p>\n<p>\nA \"for loop\" is designed to be used when we know we need to repeat a block of statements a specific number of times.  We call this <b>definite looping</b>; we know <i>when we write the code</i> how many times to repeat.\nWe designate the code block to repeat, and we specify a variable to count the repetitions (called the <b>loop index</b>); we give that variable a starting value (often 0); we write a boolean comparison expression to answer the question \"do we repeat again?\", and we write an expression telling how to change the value of the index at the end of each repetition (often increment by 1).\n<br/>\nTo complete this problem, type in this JavaScript program (in proper myMain format):\n<pre>\n  for ( var i=0;  i<3;  i++ ) { \n    alert(\"the loop body runs\"); \n  }\n</pre>\n</p>\n<p>\nHow many times will the alert statement get executed? \n</p>","type":"twit","updatedAt":{"$date":"2018-01-24T15:48:41.084Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/forloop.overview.mp4"},{"_id":{"$oid":"5408c8203f84d4d07b6d0962"},"createdAt":{"$date":"2014-09-04T20:14:24.557Z"},"folder":"53cef2744fae0fbd7f731236","language":"javascript","maxSubmissions":"","name":"Accumulator: Sum of nums","num":4,"onSubmit":"// define I/O function points\nvar soln_inputs = [ [] ];\nvar soln_outputs = [ [4950] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    if (style.nAFL != 1) { fail.s(\"use one for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);      ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that will print out the sum of the integers from 1 to 99, including 1 and 99. \n</b></font>\n</p> \n<p>\nWe will use a for loop to do this.\nYou will also need an \"accumulator\", a variable that has its value bumped up each time you go through the loop body.\nSince we are summing, the accumulator will be initialized to 0 (the additive identity) outside the loop.  With a counter, the variable is bumped by some\nfixed amount (often 1).  With an accumulator, the variable is bumped up by perhaps different amounts each time it is increased.\nThink of an accumulator as a bucket.  We will accumulate a final value by adding into the bucket parts of the final amount, many times.\n</p>\n<p>\n<b>Lesson here:</b> the loop index is a variable that can be used inside the loop body; it is often used to generate a sequence of numbers, or to count how many times the loop body has run.\n</p>\n<p>\n<b>Style:</b> Use one for loop and no other loops.\n</p>","type":"twit","updatedAt":{"$date":"2018-01-24T15:49:08.443Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/forloop.accumsum.mp4"},{"_id":{"$oid":"5408cfc38350a2377e10f9e8"},"createdAt":{"$date":"2014-09-04T20:46:59.711Z"},"folder":"53cef2744fae0fbd7f731236","language":"javascript","maxSubmissions":"","name":"<b>DIY</b>: Accumulator: Sum of inputs","num":9,"onSubmit":"var soln_inputs = [ [1,2,3,4,5], [-3, -2, -1, 1, 2 ] ];\nvar soln_outputs = [ [3], [-0.6] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    if (style.nAFL != 1) { fail.s(\"use one for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);      ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that will request the user to input 5 numbers (one per prompt) and print the average of the inputs.\n</b></font>\n</p> \n<p>\nDo this by creating a for loop that will run 5 times, and put a prompt statement inside the loop body.\nEvery time the user inputs a number (remember to make it a Number() ) add it into an accumulator.  When the loop is done, compute the average (outside and after the for loop).\nFor output, just alert the number that is the average.\nSince we are summing, the accumulator will be initialized to 0 before the loop.\n</p>\n<p>\n<b>Style:</b> Use one for loop and no other loops.\n</p>","type":"diy","updatedAt":{"$date":"2018-01-24T15:49:40.101Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"5408e1ca8975017b032db923"},"createdAt":{"$date":"2014-09-04T22:03:54.24Z"},"folder":"53cef2744fae0fbd7f731236","language":"javascript","maxSubmissions":"","name":"Sequence of numbers","num":1,"onSubmit":"// define I/O function points\nvar soln_inputs = [ [] ];\nvar soln_outputs = [ [1,2,3,4,5] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    if (style.nAFL != 1) { fail.s(\"use one for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that will print out the first 5 positive integers (one per alert).  \n</b></font>\n</p> \n<p>\nTo do this we set up a for loop and use the loop index as a variable that will contain the numbers in this sequence successively as we repeat the loop body.  \nThis means one good use for a for loop is to generate a sequence of numbers.\n</p>\n<p>\nStart the loop index at 1, end it when we have done the 5th body execution; we bump up the value of the loop index by 1 each time we loop.\nInside the loop body we simply alert the value of the loop index variable.  Since we start the index at 1, the first time the body executes we will get the 1 in the number sequence.  Since we increment the index by one, we will get a 2 the next time we do the loop body... and then 3, ... and so on.\n<br/><br/>\nThe lesson we want to learn in this program is: the loop index (the loop control variable) is a variable like any other in your program,\nand it's value can be accessed inside the loop body.  This is a very helpful feature for solving problems.\n<br/><br/>\n<b>Style:</b> Use one for loop and no other loops.","type":"twit","updatedAt":{"$date":"2018-01-24T15:48:46.244Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/forloop.seqnum.mp4"},{"_id":{"$oid":"540e5d21cd837ce46e7d8963"},"createdAt":{"$date":"2014-09-09T01:51:29.218Z"},"folder":"53cef2744fae0fbd7f731236","language":"javascript","maxSubmissions":"","name":"Sum of odds","num":5,"onSubmit":"var soln_inputs = [ [] ];\nvar soln_outputs = [ [10340] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    if (style.nAFL != 1) { fail.s(\"use one for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);         ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Compute and print out the sum of all the odd integers from 17 to 204.\n</b></font>\n</p> \n<p>\nUse only one for loop and no other loops.\n</p>\n<p>\nThe lesson in this program is that the for loop index variable does not always have to be incremented by 1.\nIf we want to increment it by 2, or 5, or 10, or whatever we can specify that in the loop control information.\nTo generate odd numbers, then, we could start the loop index at 1, and increment it by 2 each time the loop \nbody executes.  This would create the sequence of values 1, 3, 5, 7, 9, etc. in the loop index variable.\n</p>","type":"twit","updatedAt":{"$date":"2018-01-24T15:49:16.263Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/forloop.sumodds.mp4"},{"_id":{"$oid":"540e5dcacd837ce46e7d8966"},"createdAt":{"$date":"2014-09-09T01:54:18.588Z"},"folder":"53cef2744fae0fbd7f731236","language":"javascript","maxSubmissions":"","name":"Product of evens","num":6,"onSubmit":"var soln_inputs = [ [] ];\nvar soln_outputs = [ [5160960] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    if (style.nAFL != 1) { fail.s(\"use one for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);         ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Compute and print out the product of all the even integers from 4 to 16.\n</b></font>\n</p> \n<p>\nUse one for loop and no other loops.\n</p>\n<p>\nThe lesson we are learning in this program is that an accumulator can accumulate by multiplication also.\nThe previous accumulator was being increased by addition, so we started it with the value of 0.\nIn this program, since we will be accumulating by multiplying we will initialize the accumulator variable to 1 (the multiplicative identity for numbers).\n</p>","type":"twit","updatedAt":{"$date":"2018-01-24T15:49:21.599Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/forloop.prodevens.mp4"},{"_id":{"$oid":"540e606fcd837ce46e7d8980"},"createdAt":{"$date":"2014-09-09T02:05:35.461Z"},"folder":"53cef2744fae0fbd7f731236","language":"javascript","maxSubmissions":"","name":"Factorial","num":7,"onSubmit":"var soln_inputs = [ [4], [1], [2], [10] ];\nvar soln_outputs = [ [24], [1], [2], [3628800] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    if (style.nAFL != 1) { fail.s(\"use one for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);         ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that will prompt the user for a positive integer, and then print out the factorial of that number.\n</b></font>\n</p> \n<p>\nYou can Google it if you need more detail, but factorial of N is defined as the product of all integers from 1 to N.  In math notation, N factorial is written \" N! \" .\nHere the ! is not to be confused with the logical NOT operator... it is a different thing in this context.\n</p>\n<p>\nLater (soon later) we will worry about the fact that users are not perfect and might give erroneous data (like a negative number); for now let's continue to assume users make no mistakes.  \n</p>\n<p>\n<b>Style:</b> Use one for loop and no other loops.\n</p>\n<p>\n<b>A brief math note is warranted here</b>.  Factorial is a function that grows very rapidly.  Due to the limitations of Javascript, you will not be able to compute the factorial for integers that are larger than some value.  On my computer at this writing, the limit is about 170.  These factorial values quickly become unimaginably huge.  \nFor example, 5! is 120, but 20! is more than a trillion millions.  \nThe number of different shuffles possible in a deck of 52 cards is 52!, and this number is larger than the number of atoms in the known universe.\n</p>\n<p>\nOnce you blow out Javascript's ability to maintain numerical precision properly, it will simply report \"Infinity\" as a result.  This really means \"oops... its just a really big number I can't properly deal with.\"  So try running your program with different larger input numbers and see for yourself where the limits are for your Javascript on your computer.\n</p>\n<p>\nSo, in practical terms, your program asks the user for a positive integer as input, but we secretly hope the user gives us a small positive integer.\n</p>","type":"twit","updatedAt":{"$date":"2018-01-24T15:49:28.041Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/forloop.factorial.mp4"},{"_id":{"$oid":"540e6754cd837ce46e7d899d"},"createdAt":{"$date":"2014-09-09T02:35:00.692Z"},"folder":"53cef2744fae0fbd7f731236","language":"javascript","maxSubmissions":"","name":"<b>DIY</b>: Loop index as counter","num":8,"onSubmit":"var soln_inputs = [ [5 ] ];\nvar soln_outputs = [ [\"body: 0\",\"body: 1\", \"body: 2\", \"body: 3\", \"body: 4\"] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    if (style.nAFL != 1) { fail.s(\"use one for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);         ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that will prompt the user for a positive integer, and then produce output that looks like this:\n<pre>\nbody: 0\nbody: 1\nbody: 2\n . . .\nbody: N-1\n</pre>\nwhere N is the number the user gave.\n</b></font>\n</p> \n<p>\nFor example, if the user gives number 4 as input, then the program produces 4 lines of output, with the lines numbered 0 through 3.\n</p>\n<p>\nIt's no secret you will do this with a for loop. Each time the body executes it will print out (alert) the message \"body:  \" followed by the appropriate\ninteger.  You should use the loop index variable as your body execution counter. The main issue is to get the start/stop/increment loop parameters set up \nto count properly.\n</p>\n<p>\n<b>Style:</b> Use one for loop, and no other loops.\n","type":"diy","updatedAt":{"$date":"2018-01-24T15:49:33.731Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"540e7eefcd837ce46e7d89d9"},"createdAt":{"$date":"2014-09-09T04:15:43.12Z"},"folder":"53cef2744fae0fbd7f731236","language":"javascript","maxSubmissions":"","name":"<b>DIY</b>: Truncated square roots","num":10,"onSubmit":"var soln_inputs = [ [] ];\nvar soln_outputs = [ [9.949, 10, 10.049, 10.099, 10.148, 10.198] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    if (style.nAFL != 1) { fail.s(\"use one for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);         ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that will print the square root of each integer between 99 and 104 (inclusive). Print the square roots truncated to 3 decimal places.\n</b></font>\n</p> \n<p>\nUse one for loop and no other loops.  Output should be only numbers (no string data explaining the numbers).  Print one square root per alert statement, so your output will be \n6 numbers, one per alert.\n</p>","type":"diy","updatedAt":{"$date":"2018-01-24T15:49:47.983Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"540e8250cd837ce46e7d89e0"},"createdAt":{"$date":"2014-09-09T04:30:08.673Z"},"folder":"53cef2744fae0fbd7f731236","language":"javascript","maxSubmissions":"","name":"<b>DIY</b>: Powers of 2","num":11,"onSubmit":"var soln_inputs = [ [] ];\nvar soln_outputs = [ [2,4,8,16,32,64,128,256,512,1024] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    if (style.nAFL != 1) { fail.s(\"use one for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);         ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that will print the first 10 powers of 2, starting with 2^1.\n</b></font>\n</p> \n<p>\nDo not use the Math.pow function.  Instead, use the\nloop index tp count body executions (you will do 10 of those), and use an accumulator to build the powers you need at each step.\nWe can start the accumulator at 2 (2^1).  After printing the value in the accumulator in the loop body, we double the value stored in \nthe accumulator (we multiply it's value by 2).  When we are done, the accumulator will have accumulated the value 2^10, but along the way\nin each loop iteration it will have accumulated 2^1, 2^2, 2^3, ... 2^i  (for the ith iteration), etc.\n</p>\n<p>\nAnother way to do this is use the loop index as an accumulator, but this is a bit more obscure.\nStart the loop index at 2, and then when it is time to increment the index, instead of the common i++ (increment by 1) we\ncan double the loop index ( i *= 2 ).  The \nlesson here is that the loop index does not have to be incremented by 1... it can be changed in any way you need it to be.\nSo loop index starts at 2 (and gets printed).  It then becomes 2*2, and then (2*2)*2... and so forth.\nDoing the problem this way, the loop has to end when it goes past 2^10.\n</p>\n<p>\nBy the way, 2^10 is 1024.  This is the value we means in \"computer speak\" when we say 1K.  The K means roughly 1000,\nbut really is 2 to the 10th power.  We do everything in binary (base 2).\n</p>\n<p>\n<b>Output:</b> Your output should be numbers only, no string data explaining the numbers.  You will have 10 numbers, one per alert.\n</p>\n<p>\n<b>Style:</b> Use one for loop and no other loops.","type":"diy","updatedAt":{"$date":"2018-01-24T15:50:01.748Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"540f19e9be40eb027e6d8421"},"createdAt":{"$date":"2014-09-09T15:16:57.414Z"},"folder":"53cef2804fae0fbd7f731237","language":"javascript","maxSubmissions":"","name":"If then","num":1,"onSubmit":"var soln_inputs = [ [152], [30], [100], [100.0000001], [-5], [12.3] ];\nvar soln_outputs = [ [\"over 100\", \"done\"], [\"done\"], [\"done\"], [\"over 100\",\"done\"], [\"done\"], [\"done\"] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    if (style.nAFL != 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                         ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that will prompt the user for a number; if that number is greater than 100 print out \"over 100\".  Then print \"done\" no matter what\nnumber the user gives.\n</b></font>\n</p> \n<p>\nThe \"if-then\" conditional statement is the simplest one we have in Javascript.  \nThe syntax of an if-then specifies a condition (a boolean comparison) and a one code block (a sequence of statements inside curly braces).\nThe flow of control it creates can be thought of as \n<br/>\n<i><b>\"based on the truth of the condition, we will either execute the code block, or we will skip it\"</b></i>\n</p>\n<p>\nFor this program, note that we are still counting on our users to be nice and error-free when typing in input value.\nPrompt the user for a number and store it in a variable.\nThat variable will be the one used in the boolean comparison used in the conditional statement.\n</p>\n<p>\nTry testing the program with inputs 152 and 30.\n</p>\n<p>\nStyle: do this program using one simple <i>if-then</i> statement (no <i>else</i> part).\n</p>","type":"twit","updatedAt":{"$date":"2018-02-01T15:53:52.492Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/cond.ifthen.mp4"},{"_id":{"$oid":"540f1c01be40eb027e6d8427"},"createdAt":{"$date":"2014-09-09T15:25:53.084Z"},"folder":"53cef2804fae0fbd7f731237","language":"javascript","maxSubmissions":"","name":"If then else","num":2,"onSubmit":"var soln_inputs = [ [152], [48], [100], [-4.321] ];\nvar soln_outputs = [ [\"100 or over\", \"done\"], [\"under 100\", 6,\"done\"], \n                     [\"100 or over\",\"done\"], [\"under 100\", -0.540125,\"done\"] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    if (style.nAFL != 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                         ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write the following program: first, prompt the user for a number; print out \"100 or over\" if the user gave a number that is greater than or equal to 100;\nif the number is less than 100, print out \"under 100\" and then print the number divided by 8 (two separate alerts);\neither way, the last thing to do is print out \"done\" and end.\n</b></font>\n</p> \n<p>\nThe \"if-then-else\" conditional statement specifies a conditional (boolean comparison expression), \nand two code blocks (call them the \"then-block\", and the \"else-block\").  \nThe flow of control allows us to execute either one block, or the other, but not both.  \nWe will execute one of them, and skip the other, based on the answer we get from the question posed in the condition.\n</p>\n<p>\nIf the condition evaluates to true, the then-block executes and the else-block is skipped.  If the condition evaluates to false,\nthe opposite happens -- we skip the then-block and execute the else-block.\nEither way, we continue program execution with the statement that follows the entire if-then-else statement.\n</p>\n<p>\nStyle: do this problem with one <i>if-then-else</i> statement.  Try testing the code with 153, and then test again with -88.\nTest with 100 as well, to make sure you got the boundary conditions correct.","type":"twit","updatedAt":{"$date":"2018-02-01T15:53:57.559Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/cond.ifthenelse.mp4"},{"_id":{"$oid":"540f1cbebe40eb027e6d842e"},"createdAt":{"$date":"2014-09-09T15:29:02.98Z"},"folder":"540fbc9d54b9a690402df1d9","language":"javascript","maxSubmissions":"","name":"Type checking: isNaN( )","num":2,"onSubmit":"var soln_inputs = [ [\"hello\"], [-5], [0], [152], [48], [100], [97.3] ];\nvar soln_outputs = [ [\"error\"], [\"negative\"], [0], [\"over 100\"], [6], [12.5], [12.162] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLAP != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLF != 0) { fail.s(\"use no for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                         ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that asks the user to input a number between 0 and 100 inclusive; if the user gave something that is not a number, print \"error\" and end the program. \nIf the number is less than 0, print \"negative\" and end execution; if the number is greater than 100 print \"over 100\" and end. \nIf all validations pass, print the user's number divided by 8, truncated to 3 decimal places.\n</b></font>\n</p> \n<p>\nWe are now adding validation checks to see if the input is a number, as opposed to something else ( like text, or numeric error ).  \nYou will find the function isNaN() useful here.  This function returns <b>true</b> if the argument given is... NOT a number (a string, or some other value like NaN or null).  It returns <b>false</b> if the argument IS a number.  This \"backwards\" sense can be tricky to think it out clearly.\n</p>\n<p>\nIn summary, this program is first doing validation checks to make sure we get a number.  Once we are sure its a number, we do validation checks to make sure the number\nfits in the needed range.  Once we are sure we have a \"good\" number, we get on with the actual computation.  In this case the actual computation is nothing much\nbecause the goal it to understand the validation checks.\n</p>","type":"twit","updatedAt":{"$date":"2018-02-01T15:56:24.249Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/valid.type.mp4"},{"_id":{"$oid":"540f2406be40eb027e6d8454"},"createdAt":{"$date":"2014-09-09T16:00:06.266Z"},"folder":"540fbc9d54b9a690402df1d9","language":"javascript","maxSubmissions":"","name":"Range checking","num":1,"onSubmit":"var soln_inputs = [ [125],      [1134.56],             [50],        [100],      [12.5],      [34.4], \n                    [-4],             [0],              [-44.556] ];\nvar soln_outputs = [[4,\"done\"], [\"fractional\",\"done\"], [10,\"done\"], [5,\"done\"], [40,\"done\"], [14.534883720930234,\"done\"],\n                    [\"not positive\"], [\"not positive\"], [\"not positive\"] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLAP != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLF != 0) { fail.s(\"use no for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                         ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that will ask the user to input a positive number; if it is not positive then print \"not positive\" and end execution.\nIf this validation passes, then if the number is over 500 print \"fractional\"; otherwise print 500 divided by the number.  Either way print \"done\" as the last thing.\n</b></font>\n</p> \n<p>\nFor this program, we will assume we get a number from the user and not a string like \"go heels\", so we will only be validating that the number is greater than 0.\nHere is a pattern you can use for \"<i>if something is wrong in the input data, then end the program</i>\":\n<pre>\nif ( <i>boolean condition on input data</i> ) { \n  alert(\"error message\"); \n  return; // ends execution\n}\n</pre>\nWe use the return statement to cause myMain to stop executing when the input data is bad. This validation code will go right after the prompt \nstatement that gets the user input.\nThe remaining code -- after the validation -- looks a lot like a previous conditional program we wrote.\n</p>","type":"twit","updatedAt":{"$date":"2018-02-01T15:56:12.995Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/valid.range.mp4"},{"_id":{"$oid":"540f2f43be40eb027e6d8488"},"createdAt":{"$date":"2014-09-09T16:48:03.456Z"},"folder":"540fbc9d54b9a690402df1d9","language":"javascript","maxSubmissions":"","name":"Format checking: Factorial 2","num":3,"onSubmit":"var soln_inputs = [  [\"heels\"], [-5], [0], [472], [40.1], [121], [119.001], [120.00001],\n                     [1], [6], [13]];\nvar soln_outputs = [ [\"bad\"], [\"bad\"], [\"bad\"], [\"bad\"], [\"bad\"], [\"bad\"], [\"bad\"], [\"bad\"],\n                     [1], [720], [6227020800] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLAP != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLF != 1) { fail.s(\"use exactly one for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                         ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that will get from the user a positive integer not greater than 120.  Validate the input;  if any validation fails, simply print \"bad\" \nand quit executing. Finally, if all validations pass, then print out the factorial of the number.\n</b></font>\n</p> \n<p>\nNow we will add some format checking to our validations.  We will be checking to see if a number is as integer (along with the other checks). \nWe will build on the previous factorial program (in module \"for loops\") by adding to it input validation.\nWe are prompting the user for a positive integer not greater than 120. We now have several things to check... is it numeric? is it in the right range? is it an integer?  The integer check is the new lesson in this program.\n</p>\n<p>\nValidate the input first to make sure it looks like a number (not a string like \"tarheels\").  We saw how to do this in a previous program.  \nThen, as before, convert it to internal numeric form, and make sure it is greater than 0 and less than or equal to 120.\nFinally, validate it to make sure it is an integer.  If any validation fails, we simply print \"bad\"  and quit executing. \n</p>\n<p>\n<b>To test a number to see if it is an integer</b>, you can use modular arithmetic (the % operator).  If N is an integer, then\n(N%1) will be 0.  This says if we divide the number by 1, there is no remainder.  For example if we divide 6 by 1 it goes 6 times evenly.\nIn contrast, if we divide 14.3 by 1 it goes 14 times and the remainder is 0.3, so 14.3 it is not an integer.\n</p>\n<p>\nAnother way to test a positive number N for being an integer is to compare N to Math.floor(N).  If N is an integer these will be equal.  For example let N be 7.3 which makes Math.floor(N) be 7.  These are not the same so 7.3 is not an integer (note, this method only works for positive numbers). Use whichever method you like for this program, since we are making sure the user gives positive numbers.\n</p>","type":"twit","updatedAt":{"$date":"2018-02-01T15:56:30.739Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/valid.format.mp4"},{"_id":{"$oid":"540f4d6abe40eb027e6d84f6"},"createdAt":{"$date":"2014-09-09T18:56:42.562Z"},"folder":"53cef2804fae0fbd7f731237","language":"javascript","maxSubmissions":"","name":"If then else if else (cascade)","num":3,"onSubmit":"var soln_inputs = [ [0], [65], [66], [80], [80.001], [100], [100.001] ];\nvar soln_outputs = [ [\"legal\"], [\"legal\"], [\"excessive\"], [\"excessive\"],\n                     [\"reckless\"], [\"reckless\"], [\"insane\"] \n                   ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    //if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    //if (style.nAFL != 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                         ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that will decide the level of violation a person will be charged with when caught speeding. Get the user to input a number 0 or greater (the speed).  The input does not have to be an integer.  If the number is over 100, print \"insane\". If the number is greater than 80 but 100 or less, print \"reckless\". If the number is greater than 65 but 80 or less, print \"excessive\". If the number is 65 or under, print \"legal\". \n</b></font>\n</p> \n<p>\nWe have seen that the if-then-else conditional statement allows us to do one of two alternate blocks of code (and skip the other).\nThis can be generalized to create several blocks of code, and select one of them to execute (and all others skipped).  To do this, we\nchain if-then-else statements together one after another in a \"cascade\".  \n</p>\n<p>\nWe will use this conditional structure when we have 3, 4, 5 or more different data situations to detect and something to do for each situation, as in the program here.\n</p>\n<p>\nTry testing the program with inputs 25, 65, 66, 80, 81, 100, 121, and 0.\n</p>\n<p>\nStyle: do this using one cascading conditional statement, of the form if-then-else where the else part is another if-then-else.\n</p>","type":"twit","updatedAt":{"$date":"2018-02-01T15:54:44.057Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/cond.cascade.mp4"},{"_id":{"$oid":"5410f5af6ce162e538725621"},"createdAt":{"$date":"2014-09-11T01:06:55.603Z"},"folder":"540fbc9d54b9a690402df1d9","language":"javascript","maxSubmissions":"","name":"<b>DIY:</b> Speed levels with validation","num":4,"onSubmit":" var soln_inputs = [ [\"hi\"], [-5], [-0.0000001], [\"twenty\"], [0], [65], [66], [80], [80.001], [100], [100.001] ];\nvar soln_outputs = [ [\"error\"], [\"negative\"], [\"negative\"], [\"error\"],\n                     [\"legal\"], [\"legal\"], [\"excessive\"], [\"excessive\"],\n                     [\"reckless\"], [\"reckless\"], [\"insane\"] \n                   ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLAP != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLF != 0) { fail.s(\"use no for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                                ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Let's revisit the speed violation problem we did in a prior folder.  Add some input data validation to make the program more robust. Follow the specifications following. \n</b></font>\n</p> \n<p>\nThe problem we will build on is \"If then else if else (cascade)\" in module \"Conditionals\". \nWe will do the same speed determinations as before, and we will do 2 kinds of input validation: check to make sure the user gives a number, and check the number for being in the proper value range.\n</p>\n<p>\nWhen the user gives the input, first check to make sure the input is a number ( use isNaN( ) ); if the user gave something that is not a number print \"error\" and end execution.  Then check the input (we know its a number at this point) to make sure it is 0 or greater; if the user gave a number less that 0, print \"negative\" and end execution.\nWe do not need to check for integer, as speeds can have fractional parts.\n</p>\n<p>\nOnce we know the user gave us a good number -- 0 or greater -- proceed with the speed level determination as before.\nIf the number is over 100, print \"insane\". If the number is greater than 80 but 100 or less, print \"reckless\". If the number is greater than 65 but 80 or less, print \"excessive\". If the number is 65 or under, print \"legal\".  Try testing the program with inputs 25, 65, 66, 80, 81, 100, 121, and 0.\n</p>\n","type":"diy","updatedAt":{"$date":"2018-02-01T15:56:38.633Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"5411058747e9b1024089aa59"},"createdAt":{"$date":"2014-09-11T02:14:31.92Z"},"folder":"53cef2804fae0fbd7f731237","language":"javascript","maxSubmissions":"","name":"Switch ","num":4,"onSubmit":"var soln_inputs = [ [1],[2],[3],[4],[5],[6],[7],\n                    [0],[8],[-5],[2.2] ];\nvar soln_outputs = [ [\"Sunday\"],[\"Monday\"],[\"Tuesday\"],[\"Wednesday\"],[\"Thursday\"],[\"Friday\"],[\"Saturday\"],\n                      [\"no such day\"],[\"no such day\"],[\"no such day\"],[\"no such day\"] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    //if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    //if (style.nAFL != 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                                ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program where the user is asked for an integer between 1 and 7. Assuming day 1 of the week is Sunday, print out the\nname of the day of the week that corresponds to the number the user gave. Print \"no such day\" for any number that\nis not what was asked for.\n</b></font>\n</p> \n<p>\nThe \"switch\" is one other conditional statement in JavaScript that you may find useful in some situations. In a switch\nthe value of a variable (or expression) is used to jump directly to a chunk of code.  A switch is a compact way to express\na cascade if your condition is a simple === comparison on values.\n</p>\n<p>\nFor example, if the user gives 1, we print \"Sunday\"; if the user gives 5, we print \"Thursday\".\nIf the user gives 8, we print \"no such day\".  If the user gives 2.3 we print \"no such day\".  Same for -4.\n</p>\n<p>\n<b>Notice</b> that with this switch program, we are beginning to do some input validation... notifying the user when input is given that the program \ncannot properly use.\n</p>\n","type":"twit","updatedAt":{"$date":"2018-02-01T15:54:58.538Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/cond.switch.mp4"},{"_id":{"$oid":"541237e5c1d09f9e478c5e9b"},"createdAt":{"$date":"2014-09-12T00:01:41.941Z"},"folder":"53cef2804fae0fbd7f731237","language":"javascript","maxSubmissions":"","name":"<b>DIY:</b> Absolute value and sqrt","num":6,"onSubmit":"var soln_inputs = [ [152], [-30], [100], [-4], [1.21], [0], [-1.21] ];\nvar soln_outputs = [ [12.328828005937952], [\"converting\",5.477225575051661], [10], [\"converting\",2], [1.1], [0], [\"converting\",1.1] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    //if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    //if (style.nAFL != 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                                        ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Prompt the user for a number, then print the square root of the absolute value of the number.  If the number is negative, change it to a positive number\nwith the same absolute value and print \"converting\".  Then print the square root of the number (with a second alert statement). Do not use Math.abs() to do this.\n</b></font>\n</p> \n<p>\nHere is sample execution:\n<pre>\ninput:  -16  \noutput:  converting\n         4\ninput:   100    \noutput:  10\ninput:   0\noutput:  0\ninput:  -1.21\noutput:  converting\n         1.1\n</pre>\n</p>\n<p>\nTo do this program use a simple <i>if-then</i> statement (with no <i>else</i> part).  How will we convert a negative number to a positive with\nthe same absolute value?  Take the variable (let's call it N) and negate it ( -N ).  You can also multiply it by -1.  Do not use Math.abs( ) absolute value function, as this would not require you to write the <i> if-then</i> test... which is the point of this exercise.\n</p>","type":"diy","updatedAt":{"$date":"2018-02-01T15:55:20.015Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"54123ea0c1d09f9e478c5eae"},"createdAt":{"$date":"2014-09-12T00:30:24.255Z"},"folder":"53cef2804fae0fbd7f731237","language":"javascript","maxSubmissions":"","name":"<b>DIY:</b> Even, sorta odd","num":7,"onSubmit":"var soln_inputs = [ [152], [21], [-2], [-13], [0] ];\nvar soln_outputs = [ [\"even\"], [\"not even\"], [\"even\"], [\"not even\"], [\"even\"] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    //if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    //if (style.nAFL != 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                                        ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Prompt the user for a number, then check the number to see if it is even.  If it is print \"even\".  If not, print \"not even\".\n</b></font>\n</p> \n<p>\nTo do this program use an <i>if-then-else</i> statement.  How shall we decide is an integer is even? \nNote that if we divide an even number by 2, there is no remainder.  In other words, 2 divides into an even number \"evenly\".\nThe mod operator ( % ) will produce the remainder for us when we divide one number by another.  For example, if N contains\na number then the expression ( N % 2 ) gives the remainder when N is divided by 2.  If that remainder is 0, then N is even.\n</p>\n<p>\nNote we do not print \"odd\" if the number is not even. Think this over... if a number is not even, it may also be not odd. How?\n</p>","type":"diy","updatedAt":{"$date":"2018-02-01T15:55:26.363Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"5412600ec1d09f9e478c5ee2"},"createdAt":{"$date":"2014-09-12T02:53:02.626Z"},"folder":"53cef2804fae0fbd7f731237","language":"javascript","maxSubmissions":"","name":"<b>DIY:</b> Lord of the Rings","num":8,"onSubmit":"var soln_inputs =  [ [0],[47],                [48],[49],[59],           [60],[61],[71],\n                     [72],[73],[83],            [84],[85],[95],\n                     [96],[97],[119],                    [120],[121]                   \n                   ];\nvar soln_outputs = [ [\"hobbit\"],[\"hobbit\"],  [\"orc\"],[\"orc\"],[\"orc\"],   [\"wizard\"],[\"wizard\"],[\"wizard\"],\n                     [\"elf\"],[\"elf\"],[\"elf\"],   [\"beorning\"],[\"beorning\"],[\"beorning\"],\n                     [\"wraith\"],[\"wraith\"],[\"wraith\"],   [\"ent\"],[\"ent\"]\n                   ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    //if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    //if (style.nAFL != 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                                    ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Get a positive number as input from the user; it will represent a height in inches.  \nDetermine what sort of LOTR character type we have based on these measurements (with apologies to Tolkien).\nFor output follow the specifications following.\n</b></font>\n</p> \n<p>\nUse these specification to decide:\n<pre>\nIf the number is greater than or equal to 120 print \"ent\"   \nIf the number is less than 120 but greater than or equal to 96 print \"wraith\" \nIf the number is less than 96 but greater then or equal to 84, print \"beorning\"   \nIf the number is less than 84 but greater then or equal to 72, print \"elf\"   \nIf the number is less than 72 but greater then or equal to 60, print \"wizard\"  \nIf the number is less than 60 but greater then or equal to 48, print \"orc\"   \nIf the number is less than 48, print \"hobbit\"   \n</pre>\n</p>\n<p>\nYou will use the cascading <i>if-then-else-if-else</i> structure to do this.\nNote we are asking the user for a positive number (height cannot be negative) but we are not yet verifying what the \nuser gives to see if it is in compliance.  This is what the validation module coming up will be about.\n</p>","type":"diy","updatedAt":{"$date":"2018-02-01T15:55:47.156Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"5412687ec1d09f9e478c5eef"},"createdAt":{"$date":"2014-09-12T03:29:02.899Z"},"folder":"53cef2804fae0fbd7f731237","language":"javascript","maxSubmissions":"","name":"<b>DIY:</b> Clockface to compass","num":9,"onSubmit":"var soln_inputs = [ [1], [2], [3], [4], [5], [6], \n                    [7], [8], [9], [10],[11],[12],\n                    [0], [13], [-5] ];\nvar soln_outputs = [ [\"NNE\"],[\"ENE\"],[\"E\"],\n                     [\"ESE\"],[\"SSE\"],[\"S\"],\n                     [\"SSW\"],[\"WSW\"],[\"W\"],\n                     [\"WNW\"],[\"NNW\"],[\"N\"],\n                     [\"error\"],[\"error\"],[\"error\"]\n                   ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    //if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    //if (style.nAFL != 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                                    ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Get a positive number from the user; it will represent an hour integer on a clock face.\nPrint out the compass direction that corresponds to the clock hour.\n</b></font>\n</p> \n<p>\nUse these values: 1 is NNE, 2 is ENE, 3 is E, 4 is ESE, 5 is SSE, 6 is S, 7 is SSW, 8 is WSW, 9 is W, 10 is WNW,\n11 is NNW, and 12 is N.  Any other number should get \"error\" printed our\n</p>\n<p>\nYou will use the <i>switch</i> statement to do this, and it will have a default case at the end of it.\nRemember to put the <i>break</i> at the end of each case.\n</p>","type":"diy","updatedAt":{"$date":"2018-02-01T15:55:53.809Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"54162fca6ba011bd0533f703"},"createdAt":{"$date":"2014-09-15T00:16:10.203Z"},"folder":"540fbc9d54b9a690402df1d9","language":"javascript","maxSubmissions":"","name":"<b>DIY:</b> Sum of odds with validation","num":5,"onSubmit":"var soln_inputs = [ [15,\"hi\"], [-5,13], [17,10], [2.5,\"go\"], [\"goheels\",3], [4,3], [-3.4, 144],\n                    [1,7], [13,21], [223,119], [11, 7] \n                  ];\nvar soln_outputs = [ [\"error\"], [\"range\"], [\"format\"], [\"format\"], [\"error\"], [\"format\"], [\"range\"],\n                    [16],  [85],    [9063],  [27]          \n                   ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLAP != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLF > 1) { fail.s(\"use one for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                  ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>  Write a program that will ask the user for 2 odd integers, and then print the sum of all odd integers from\nthe smallest user number to the larger.  Validate the input data, using the specifications following. \n</b></font>\n</p> \n<p>\nAsk the user to input two numbers, each an odd integer than is greater than 0.\nOnce validated, compute and print the sum of the sequence of odd integers from the smaller input to the larger one (including each).\n</p>\n<p>\nFor this problem we will do all three forms of validation we have looked at, <b>and in this order</b>:\n<ul>\n<li>If the user gives something that is not a number, print \"error\" and end execution.</li>\n<li>If the user gives a number that is less than or equal to 0 print \"range\" and end execution.</li>\n<li>If the user gives a number that is not an odd integer print \"format\" and end execution.</li>\n</ul>\nNote that the user might give the larger number first, and that both numbers given might be the same value.  Make sure your program deals with\nall possibilities.  It is not complicated to do this, but you must write code to figure out which number is the smaller, and make sure your\nfor loop works to give the proper sum if both numbers are the same.\n</p>\n<p>\nHow are you going to check to see if a number is odd?  Remember in previous problems we had to check to see if a number is an integer,\nand we used the \"%\" mod operator.  We said that for an integer, the expression ( num % 1 ) will produce a remainder of 0.\nWe can do something similar to test for odd.  Odd numbers are 1 more than an even number (which is a number exactly divisible by 2).\nThis means that the expression ( num % 2 ) should give a remainder of 1 if num is odd (and a remainder of 0 is num is even).\n</p>\n<p>\n<b>Sample Executions:</b> Here are some sample executions to show output format. Prompt text is blue.  User input is in red.  Black is alert output.\nGreen (in parens) is my comment and not part of the program behavior\n<pre>\n<font color=blue>Give an odd number:</font> <font color=red>3</font>\n<font color=blue>Give another odd number:</font> <font color=red>9</font>\n<b>24</b>   <font color=green>( this is 3+5+7+9 )</font>\n</pre>\n<pre>\n<font color=blue>Give an odd number:</font> <font color=red>11</font>\n<font color=blue>Give another odd number:</font> <font color=red>7</font>\n<b>27</b>   <font color=green>( this is 7+9+11 )</font>\n</pre>\n<pre>\n<font color=blue>Give an odd number:</font> <font color=red>10</font>\n<b>format</b>    <font color=green>( it's not odd )</font>\n</pre>\n<pre>\n<font color=blue>Give an odd number:</font> <font color=red>13</font>\n<font color=blue>Give another odd number:</font> <font color=red>-3</font>\n<b>range</b>    <font color=green>( it's not positive )</font>\n</pre>\n<pre>\n<font color=blue>Give an odd number:</font> <font color=red>seven</font>\n<b>error</b>    <font color=green>( it's NaN )</font>\n</pre>\n</p>\n<p>\n<b>Style:</b> use the validation method where you return (end execution) on errors.\nAlso use one for loop to do this.\nAsk the user for the first input, and validate it completely before asking for the second input.\nThen validate the second input.\nAfter all validations you have 2 good inputs, so proceed with the summation.\n</p>","type":"diy","updatedAt":{"$date":"2018-02-01T15:56:45.308Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"541646a76ba011bd0533f7c0"},"createdAt":{"$date":"2014-09-15T01:53:43.976Z"},"folder":"53cef2c54fae0fbd7f731238","language":"javascript","maxSubmissions":"","name":"Overview","num":0,"onSubmit":"var soln_inputs = [ [] ];\nvar soln_outputs = [ [1,4,9,16,25,\"while loop is done\"] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF != 1) { fail.s(\"use one while loop\"); }\n    if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                  ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Repetition: While Loops\n</b></font>\n</p> \n<p>\nA second type of loop statement in JavaScript is the <b>while</b> loop.  \nA while loop is less rigidly structured than a for loop; \nin a while loop we have to manually set up and maintain any loop index variables, counters, etc. we might need as part of the code in the loop body.\nWe use while loops primarily for what we call <b>indefinite looping</b>, where we do\nnot know (when we write the code) how many times the loop body will need to execute.  \n</p>\n<p>\nIt should be noted that these loop forms (for, while) are notational conveniences.  We use for loops <i>primarily</i> for definite looping,\nand we use while loops <i>primarily</i> for indefinite looping; the syntax of each is set up to help create these patterns easily.  \nHowever, computationally they are equivalent in their capabilities.\nAnything we can do with a <i>for</i> loop, we can do with a <i>while</i> loop as well, and <i>vice versa</i>.\nThis means we can do definite loops with <i>while</i> ( but a <i>for</i> loop would be more convenient ). We can also do indefinite looping with a for loop (but\na while would be easier).  It is a bit more common to use a while loop for definite looping than it is to use a for loop for indefinite.\nWe will see this in the problems in this folder.\n</p>\n<p>\nAs with <i>for</i> loops we will write a boolean comparison expression to answer the question \"should we execute the loop body another time?\" ; this expression will usually examine the variables being used in the loop body.\n</p>\n<p>\nTo complete this problem, type in this JavaScript program (remember to use the myMain function format for style points):\n<pre>\n  var x = 1; // loop index varible\n  while ( x <= 5 ) { \n    alert ( x*x ) ; \n    x = x + 1 ;  // increment the loop index\n  }\n  alert(\"while loop is done\");\n</pre>\n\nThis is a definite loop; it is set up to execute the loop body 5 times. Note that the loop index variable (x) we had to set up and \nincrement ourselves.  We started x at 1, and stopped when it became larger than 5. In a <i>for</i> loop, this bookkeeping is done automatically for us.\nFor this while loop, we print the square of the index variable each time we execute the loop body.  Thus, the output is a sequence of \nthe squares of the first 5 positive integers.\n</p>","type":"twit","updatedAt":{"$date":"2018-02-07T13:02:50.131Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/while.overview.mp4"},{"_id":{"$oid":"54164e156ba011bd0533f7f6"},"createdAt":{"$date":"2014-09-15T02:25:25.665Z"},"folder":"53cef2c54fae0fbd7f731238","language":"javascript","maxSubmissions":"","name":"Indefinite looping: summing inputs","num":2,"onSubmit":"var soln_inputs = [ [1,2,3,4,5,0], [-2,-1,1,2,3,4,-3,-4,-8,0], [0] ];\nvar soln_outputs = [ [15], [-8], [0] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF != 1) { fail.s(\"use one while loop\"); }\n    if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                  ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that asks the user to input numbers repeatedly, sums up all the user inputs and prints the final sum.\nStop looping when the use gives a 0 as the input number.\n</b></font>\n</p> \n<p>\nFor now, we will go back to assuming that the user can properly type good numbers... so there is no need to validate the input.  \nThis way we can concentrate on learning the loop structure.\n</p>\n<p>\nMost of the time we will use <i>while</i> loops for <i>indefinite</i> repetitions, when we need to repeat a block of code \nan unknown number of times.  \nIn an indefinite loop, we don't know <i>a priori</i> the specific number of loop iterations that will be needed.\nOne common pattern it to ask the user for some input inside the loop body and\nkeep looping until the user gives us some special \"flag\" value that signals us to stop looping.  This means\nthe boolean condition that controls the loop will be examining the user input variable and checking for the\nspecial flag value.\n</p>\n<p>\nHere, the stop flag is the number value 0. If the user gives 0 as the very first input, let's assume the sum will also be 0.  \nTechnically, in this case there have been no numbers to add, so there would be no sum to report, but we will define it as 0 as\na special case.  Many programs have one or more such special cases.\n</p>\n<p>\n<b>Style:</b> Use a while loop.  Use no for loops.\n</p>\n\n","type":"twit","updatedAt":{"$date":"2018-02-06T15:21:25.89Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/while.indefsum.mp4"},{"_id":{"$oid":"54165ffe11cf07bf1d5ff0c6"},"createdAt":{"$date":"2014-09-15T03:41:50.715Z"},"folder":"53cef2c54fae0fbd7f731238","language":"javascript","maxSubmissions":"","name":"Definite looping: Factorial 3","num":1,"onSubmit":"var soln_inputs = [  [\"heels\"], [-5], [0], [472], [40.1], [121], [119.001], [120.00001],\n                     [1], [6], [13]];\nvar soln_outputs = [ [\"bad\"], [\"bad\"], [\"bad\"], [\"bad\"], [\"bad\"], [\"bad\"], [\"bad\"], [\"bad\"],\n                     [1], [720], [6227020800] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    //if (style.nWLAP != 1) { fail.s(\"use one while loop\"); }\n    if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                     ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that asks the user to input a positive integer 120 or smaller.  Validate the input to make sure it is a number, that it is in range, and that\nit is an integer. If any validation fails print \"bad\" and end execution. \nOnce you have a valid input, compute and print the factorial of the number.\n</b></font>\n</p> \n<p>\nLet's see one significant example of using <i>while</i> loops to do definite looping. After that we will concentrate on using them\nfor indefinite looping. \nAs noted before, a <i>for</i> loop is usually a better choice for definite looping, but we want to illustrate that <i>while</i> loops can also do it.... \nand illustrate how doing all the loop index bookkeeping manually is more cumbersome \nand error prone than letting a <i>for</i> loop do it automatically.\n</p>\n<p>\nGo to the program \"<i>Format checking: Factorial 2</i>\" in module \"<i>Input validation</i>\" and reload your working code for that problem.  Now we will\nchange the for-loop to a while-loop and see that the program produces the same functional behavior.\nTo do this we will need to directly declare a variable to use as loop index, and initialize it to 1 (since we are accumulating\nvia multiplication).  We need to remember to put an increment of that variable as the last statement in the while loop body.\nFinally, we need to write a boolean comparison to use as the condition that determines if we repeat the loop body another time.\n</p>\n<p>\n<b>Style:</b> Use a while loop. Do not use any for loops.\n</p>","type":"twit","updatedAt":{"$date":"2018-02-06T15:21:19.401Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/while.factorial3.mp4"},{"_id":{"$oid":"54179cfcf4c3c15867b3c1ff"},"createdAt":{"$date":"2014-09-16T02:14:20.52Z"},"folder":"54179a21f4c3c15867b3c1fe","language":"javascript","maxSubmissions":"","name":"Overview","num":0,"onSubmit":"var soln_inputs = [ [] ];\nvar soln_outputs = [ [10] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 0) { fail.s(\"use no for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                            ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>More about Functions\n</b></font>\n</p> \n<p>\nWe now revisit the abstraction called a function.  We have been writing and using a simple function ( myMain ) for a week or two now.  We have also been using functions that come with JavaScript (Math.sqrt, Math.floor, etc.) since nearly the beginning.  We will now learn more about how to write and use function like Math.sqrt() where we pass in some information and get a result back.  \nWe wrote one back in module on simple functions (it cubed its parameter and returned it).  Now we will practice more.\n</p>\n<p>\nWe will call the functions we write here simple <i>utility functions</i>.  They will be handy for asking (and answering) small but useful questions like \"is this number an integer\" or \"is this number odd\" in our programs as we progress.\n</p>\n<p>\nWe write a simple utility function in a way very similar to how we are writing <i>myMain</i>.  However, since we are passing information\nin (like we do when we call Math.sqrt(4) for example) for the function to use while computing a result, we will have to specify a\n<i>parameter</i>.  Also, since the point of a utility function is to get some result back, we will need to add a <i>return</i> \nstatement to the body of the function when we define it.\n</p>\n<p>\nTo complete this problem, type in and execute this code:\n<pre>\n\"use strict\";\n\nfunction myMain ( ) {\n   var x = 5;\n   var dubx = double(x);\n   alert(dubx);\n}\n\nfunction double ( num ) {\n   var val = num*2;\n   return val;\n}\n\nmyMain();\n</pre>\nNote that to do these programs with our own functions, we will need to write the myMain( ) function as we have been, and we will also write\nanother function (or several more).  These extra functions will be called by the code in the body of myMain.\n</p>","type":"twit","updatedAt":{"$date":"2018-02-13T15:52:16.769Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/utility.overview.mp4"},{"_id":{"$oid":"5417a20af4c3c15867b3c200"},"createdAt":{"$date":"2014-09-16T02:35:54.734Z"},"folder":"54179a21f4c3c15867b3c1fe","language":"javascript","maxSubmissions":"","name":"Function isInt ( n )","num":1,"onSubmit":"var soln_inputs = [ [4], [10], [-6], [\"unc\"], [21.5] ];\nvar soln_outputs = [ [24], [3628800], [\"bad\"], [\"bad\"], [\"bad\"] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { truVec[i] || fail.f(\"failed functional correctness\"); }\n  }\n  // check for all fn format\n  if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                            ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a function called \"isInt\" that will be passed a number as parameter. \nIf that number is an integer the function will return true; if the number \npassed in is not an integer, the function will return false. \n</b></font>\n</p> \n<p>\nThis function should remind you of \"isNaN\", and will be used in similar ways (for similar purposes) as isNaN.\n</p>\n<p>\nYour function \"isInt\" can be used (called) in myMain whenever you need to validate some input.  For this problem, get the \"Factorial 3\" program your wrote in folder \"While loops\".  Replace the part that validates the input as an integer with your function and\ncall it for the validation.  It should work the same way as before.\n</p>","type":"twit","updatedAt":{"$date":"2018-02-13T15:52:22.777Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/utility.isInt.mp4"},{"_id":{"$oid":"5417b56bf4c3c15867b3c201"},"createdAt":{"$date":"2014-09-16T03:58:35.313Z"},"folder":"54179a21f4c3c15867b3c1fe","language":"javascript","maxSubmissions":"","name":"Function isEven ( n )","num":2,"onSubmit":"var soln_inputs = [ [4,3,-6,-17,0] ];\nvar soln_outputs = [ [16,\"nope\",36,\"nope\"] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { truVec[i] || fail.f(\"failed functional correctness\"); }\n  }\n  // check for all fn format\n  if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                            ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a function called \"isEven\" that will be passed a number as parameter. \nIf that number is an even integer the function will return true; otherwise the function returns false.\n</b></font>\n</p> \n<p>\nThis function is similar in structure and in use to \"isInt\" that we just wrote.  We can also use the mod operator to determine even; remember that\nis a number is even, it is divisible by 2 with no remainder.\n</p>\n<p>\nOnce you have written and tested isEven, write a myMain function to exercise your isEven function.\nIn myMain write a loop that will ask the user for a number (don't worry about validating\nthe input, just assume the user gives a number).\nPrint the square of the number if it is even.\nIf it is not even, print \"nope\" and go to the next input.  Stop looping when the user gives 0 as input.  Make sure that when the user does give a 0, the program stops without printing the square of that 0... in other words, do not\ntreat that 0 as an even number before stopping.\n</p>\n<p>\n<b>Style:</b>Use one while loop, and no for loops.  \n</p>\n<p>\nFood for thought... how would you do this with a for loop?  It seems better to use a while, since we dont know how many\ntimes we need to loop before the user gives a 0.\n</p>\n<p>\nMore food for thought... if isEven(n) tells me \"false\" meaning n is not even, is it odd?\n</p>","type":"twit","updatedAt":{"$date":"2018-02-13T15:52:29.005Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/utility.isEven.mp4"},{"_id":{"$oid":"5417bc55f4c3c15867b3c202"},"createdAt":{"$date":"2014-09-16T04:28:05.372Z"},"folder":"54179a21f4c3c15867b3c1fe","language":"javascript","maxSubmissions":"","name":"Function power ( a, b )","num":3,"onSubmit":"var soln_inputs = [ [5,0], [-3,4], [5.5,3], [\"one\",3], [3,-2], [3,4.4] ];\nvar soln_outputs = [ [1], [81], [166.375], [\"bad base\"], [\"bad expo\"], [\"bad expo\"],  ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { truVec[i] || fail.f(\"failed functional correctness\"); }\n  }\n  // check for all fn format\n  if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                            ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a function called \"power\" that will be passed two numbers as parameters.\nThe function will compute and return the first number raised to the second number.\n</b></font>\n</p> \n<p>\nIn this problem, we will learn how to write a function that takes more than one input parameter.\n</p>\n<p>\nFor example, power(2,5) will produce 2 raised to the 5th power, or 2 * 2 * 2 * 2 * 2, or 32.\nThis is similar to the Math.pow function, but our power function will be limited to work with only integer exponents.\nYou may write the function assuming only good numbers are passed to it.\n<br/><br/>\nYou will also need the normal myMain function to call your new power function.\nTo make sure we only work with integer exponents, we will do some data validation in myMain before we \ncall power.   In myMain ask the user for a number, the base.  Validate that input to make sure it is actually a number\nand not some random string like \"okiedokie\". If it is not a number print \"bad base\" and end execution.\n</p>\n<p>\nNext ask the user for a positive integer ( >= 0 ).  Validate this input to make sure it is an integer, and 0 or greater.\n If it is not, print \"bad expo\" and end execution.\n</p>\n<p>\nFinally, if the validations pass, then compute the base raised to the exponent power.  Do not use Math.pow to do this.\nInstead, use your power function.  In power, use a for loop (we know exactly how many times the loop needs to run).  Use an accumulator, and since we\nare going to accumulate by multiplying we will initialize the accumulator to 1.  Remember to make sure your power function\nworks correctly for an exponent of 0.  Anything raised to the power 0 is 1.\n</p>\n<p>\n<b>Style:</b>\nUse one for loop.  Do not use any while loops. You will need to use your isInt function from an earlier problem, so paste that code into this\nprogram.  You will have 3 total functions: myMain, power, isInt.  Do not use Math.pow in your power function, or in myMain.\n</p>\n","type":"twit","updatedAt":{"$date":"2018-02-13T15:53:04.597Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/utility.power.mp4"},{"_id":{"$oid":"5418a948beba045e4ed3400d"},"createdAt":{"$date":"2014-09-16T21:19:04.179Z"},"folder":"53cef2c54fae0fbd7f731238","language":"javascript","maxSubmissions":"","name":"Indefinite loop: Breaking out","num":3,"onSubmit":"var soln_inputs = [ [1,2,3,4,5,0], [-2,-1,1,2,3,4,-3,-4,-8,0], [0] ];\nvar soln_outputs = [ [15], [-8], [0] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF != 1) { fail.s(\"use one while loop\"); }\n    if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                     ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that asks the user to input numbers repeatedly, sums up all the user inputs and prints the final sum.\nStop looping when the use gives a 0 as the input number.\n</b></font>\n</p> \n<p>\nThis is the same program we just wrote, but this time we are going to structure the while loop a little differently We are going to use a common \"break out\" pattern that allows \nus to have one prompt line rather than two. Here we will specifically set up an \"infinite\" loop and put a special if-then statement in the \nbody that will decide if it is time to jump out of the loop (thereby ending it).  Until that condition is met, the loop will\ncontinue to go back and repeat the loop body again.\n</p>\n<p>\nAn \"infinite\" while has this form:\n<pre>\n  while (true) {\n     // loop body code...\n     // conditional... should we break out?\n    //  code ...\n  }\n</pre>\nSince the boolean expression \"true\" will never evaluate to false, this loop will never stop repeating... unless we jump out of it to whatever follows... unless we \"break\" out.\n</p>\n<p>\nLet's revisit the previous loop where we summed inputs from the user. This time we will use the <b>break</b> statement\nto end the loop when the flag (0 from the user) is seen.  It looks like this:\n<pre>\n  if ( num === 0 ) { break; }  // if you leave this out your browser will wedge\n</pre>\nThis goes inside the while, right after asking the user for input.  The \"break\" makes the program stop\nthe loop and continue executing at the statement after the closing \" } \" for the while loop.\n</p>\n<p>\n<b>Annoyance notes:</b> As you will probably discover, there is a small danger in using an \"infinte\" loop with the break-out pattern.\n\"Infinite\" means something.  It means that if you do not break out, then the loop will never stop repeating.\nYou will experience this as your browser wedging... locking up... as the JavaScript engine runs endlessly and consumes all the browser horsepower.\nHow can you fail to break out?  You might get the condition logic wrong and write a boolean expression that will not evaluate to true and so will not trigger the \"break\".\nYou might forget to update the user input, so the loop keeps testing the first input and never gets more.\nThere are several ways to mess it up.  Once you do it a few times you will get accustomed to checking carefully.\n</p>\n<p>\nEven in while loops that are not the infinite form... that have some condition like ( k <= 100 )... if you forget to put the k++ statement into the loop\nbody, it can run forever as well.  For loops help avoid this with their control parameters.\n</p>\n<p>\n<b>Style:</b> Use a while loop.  Use no for loops.\n</p>\n\n","type":"twit","updatedAt":{"$date":"2018-02-06T15:21:43.071Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/while.breakout.mp4"},{"_id":{"$oid":"5418aea75326921e25fef90f"},"createdAt":{"$date":"2014-09-16T21:41:59.484Z"},"folder":"53cef2c54fae0fbd7f731238","language":"javascript","maxSubmissions":"","name":"<B>DIY</b>: Sum until 1000","num":6,"onSubmit":"var soln_inputs = [ [] ];\nvar soln_outputs = [ [45, 1035] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF != 1) { fail.s(\"use one while loop\"); }\n    if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that will add up consecutive integers starting at 1 and print out the integer that causes the sum to go over 1000 when it is added in.  \nThen print out the sum in a second alert statement.\n</b></font>\n</p> \n<p>\nIn this program, we are not stopping after a set number of repetitions (like in a for loop) and we are not stopping when the user signals to end.\nRather, we will end the loop when some condition on the program data becomes true.  In this case, we will watch an accumulator variable (the sum)\nto see when it's value exceeds some limit (1000).\n</p>\n<p>\nFor example, let's say we wanted to do this problem using 12 rather than 1000 as our sum to watch for.\nWe are going to sum up 1, 2, 3, 4, 5, 6, 7, etc. until our sum becomes larger than 12. \n<pre>\nWe start with 1, add it in and get sum of 1 (not larger than 12)\nthen add 2 to get sum of 3 (not larger than 12)\nthen add in 3 to get sum of 6 (not larger than 12)\nthen add in 4 to get sum of 10 (not larger than 12)\nthen add in 5 to get sum of 15 (... IS larger than 12 so stop summing / looping) \n\nthen print 5 (the number that when added in made the sum go over 12) \nthen print 15 (the sum when we stopped).\n</pre>\n</p>\n<p>\nYou must do this with a while loop.  \nYou can end the loop with whatever method you prefer.\nYou will need to set up a counter variable to use for generating the sequence of integers that you are summing.\nYou will need an accumulator variable for the sum.\n</p>\n<p>\n<b>Style:</b> Use a while loop.  Use no for loops.  There is no user input, so we won't need data validation.\n</p>","type":"diy","updatedAt":{"$date":"2018-02-06T15:22:13.597Z"},"value":{"correct":"2","style":"1"},"vidURL":""},{"_id":{"$oid":"5418b1735326921e25fef91a"},"createdAt":{"$date":"2014-09-16T21:53:55.961Z"},"folder":"53cef2c54fae0fbd7f731238","language":"javascript","maxSubmissions":"","name":"<b>DIY:</b> Cubes","num":5,"onSubmit":"var soln_inputs = [ [0],  [4, -3, 0],  [-1.234567, 2.321, 0],\n                    [\"hello\",-8,\"howdy\",0], [5,\"tarheels\",-2, 5.6, 0], \n                    [87.654321,0.06789,0.0654321,0],\n                  ];\nvar soln_outputs = [ [],  [64, \"negative, try again\"],   [\"negative, try again\", 12.5033],\n                     [\"error, try again\",\"negative, try again\",\"error, try again\"], [125,\"error, try again\",\"negative, try again\",175.6159],\n                     [673472.6905,0.0003,0.0002]\n                   ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n    for(var i=0; i<truVec.length; i++) { \n      if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n    }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF != 1) { fail.s(\"use one while loop\"); }\n    if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that will repeatedly ask the user for a number and print the cube of that number (truncated to 4 decimal places).\nIf the user gives 0 as input, exit the loop.\n</b></font>\n</p> \n<p>\nWe will do input validation for this program. \n</p>\n<p>\nWe will use a while loop to repeatedly ask the user for a non-negative number. \nFirst validate the input to make sure the user gives something numeric; if the data is not a number, print the error message \"error, try again\"\nand repeat the loop so that the user is asked to input again.\nIf the user gives a good numeric data value, then check it for 0, which will make the loop stop repeating.\nThen validate the number to be sure it is not negative; if it is negative print \"negative, try again\" and repeat the loop so that the user is asked to input again.\nFinally, if the input is a valid non-negative number, cube the number, truncate it to 4 decimal places, and print the result.  \nUse Math.floor to do the truncating, since we are validating that the input number is non-negative.\n</p>\n<p>\nPlease note the special case of the user giving 0 as the very first number.  In this case, your program should produce no output.\nRemember to test your program on non-integer numbers to make sure it is truncating correctly. \nFor example, 12.34567 should produce 1881.6723 and 0.0654321 should produce 0.0002 as output. \n</p>\n<p>\n<b>Style:</b> Use a while loop.  Use no for loops.\n</p>","type":"diy","updatedAt":{"$date":"2018-02-06T15:22:03.257Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"5418b3cb5326921e25fef921"},"createdAt":{"$date":"2014-09-16T22:03:55.235Z"},"folder":"53cef2c54fae0fbd7f731238","language":"javascript","maxSubmissions":"","name":"<b>DIY:</b> Shrinking squares","num":7,"onSubmit":"var soln_inputs = [ [0.95], [0.00001], [0.0001], [0.001], [0.01], [0.5], [0.25],\n                    [12,-1,0], [\"hello\", 6.789, 0]\n                  ];\nvar soln_outputs = [ [8], [0], [1], [1], [2], [4], [3],\n                     [\"error, try again\",\"error, try again\",0], [\"error, try again\",\"error, try again\",0]\n                   ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF != 2) { fail.s(\"use two while loops\"); }\n    if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that asks the user to input a number between 0 and 1 (including 0, excluding 1).\nThen repeatedly square the number, saving it back into itself (like the accumulator pattern).\nStop when the value becomes smaller that 0.0001. Print out how many squarings it took to get below that tolerance.\n</p>\n</b></font>\n</p> \n<p>\nIn this program we will use a while loop to continually square a fractional number until it comes \"close to\" zero.  We define \"close to\" to be\nsmaller than 0.0001, so not really 0 but \"close enough\" for our purposes.  Remember that when we square a number between 0 and 1,\nthe square is smaller than the number we squared.  For example, 0.5 * 0.5 is 0.25.  Then 0.25 * 0.25 is 0.0625.\n</p>\n<p>\nNote that if the user gives a number that is less than the tolerance (less than 0.0001) then we do not square at all... we simply stop and report that we\ndid 0 squarings.\n<p>\nHere is some sample execution data:\n<pre>\nuser input: 0.25                                   0th squaring, 0.25 is larger that the tolerance 0.0001\n0.25 * 0.25               is 0.0625                1st squaring,  0.0625 is larger than the tolerance 0.0001\n0.0625 * 0.0625           is 0.00390625            2nd squaring, 0.00390625 is larger than the tolerance 0.0001\n0.00390625 * 0.00390625   is 0.0000152587890625    3rd squaring, 0.0000152587890625 is SMALLER than the tolerance 0.0001 \nso we are done\nit went smaller than .0001 with the 3 squaring so we print 3\n</pre>\n<pre>\nuser input: 0\nsince this is already less than the tolerance 0.00001 we stop immediately, and do no squarings so we print 0\n</pre>\n<pre>\nuser input: 0.0000001\nsince this is already less than the tolerance 0.00001 we stop immediately, and do no squarings so we print 0\n</pre>\n</p>\n<p>\nThis further illustrates indefinite looping, since we have no idea in advance how many times we will have to square the number before \nit gets to our \"near zero\" threshold.  So we will use a while loop that squares, checks for \"near zero\", and repeats if needed.\n</p>\n<p>\nWrite a program to do the following things.\nFirst ask the user to input a number between 0 and 1. It will be very important in this program to validate that\nthe user has given us what we asked for because if the number is 1 or larger, your program will loop infinitely and you will be very irritated.\nSo validate two things: if the input is not a number, or if the number is not in the range 0 to 1 (smaller than 1), print \"error, try again\"\nand re-ask the user for correct input.\n</p>\n<p>\nOnce you get a good number, use a while loop to do the repeated squaring we need to do.\nIn the while loop body, square the number by multiplying it by itself and storing it back into the variable (like the accumulator pattern). \nWrite the loop to stop this repeated squaring when the variable value is smaller than the tolerance ( 0.0001 ).\n</p>\n<p>\nCount how many times we had to square the user number to get smaller than the tolerance. Print out this count after the loop ends.\nTo do this, we will be counting loop body executions, with attention to special cases.  For example, if the user gives an initial number\nthat is already smaller than 0.0001, then we want to report 0 as the output, since there is no need to square it at all.\nIf the user gives 0.01 as input, then the square is 0.0001 (not smaller than 0.0001) after 1 squaring, and we would square it a second time\nto get under the tolerance; output would be 2.\n</p>\n<p>\n<b>Style:</b> Use two while loops -- one for validating user input, and a second while loop for repeated squaring. Use no for loops.\nThere is no user input, so there is no validation code needed.\n</p>","type":"diy","updatedAt":{"$date":"2018-02-06T15:22:28.978Z"},"value":{"correct":"2","style":"1"},"vidURL":""},{"_id":{"$oid":"5418b9ec5326921e25fef92b"},"createdAt":{"$date":"2014-09-16T22:30:04.611Z"},"folder":"53cef2c54fae0fbd7f731238","language":"javascript","maxSubmissions":"","name":"Validation with 'continue'","num":4,"onSubmit":"var soln_inputs = [ [2,3,4,5,'q'], ['q'], [0,0,-1,0,'q'], [-1,-2,-3,-4,0,'q'], [1, 4,\"hi\", -6,\"lo\", 10, 'q'], [\"hello\",'q'] ];\nvar soln_outputs = [ [14], [0], [-1], [-10], \n                     [\"non numeric, try again\",\"non numeric, try again\",9], [\"non numeric, try again\",0] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF != 1) { fail.s(\"use one while loop\"); }\n    if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that asks the user to input numbers repeatedly, sums up all the user inputs and prints the final sum.\nStop looping when the use gives the character \"q\" as input.\n</b></font>\n</p> \n<p>\nNow let's combine the earlier summing inputs program with some validation.  We will base this program on the one we just wrote, and make a change or two.\nOne change is in the stopping signal.  Here we will use a string (character 'q') as our stop signal rather than the number 0 as before.\n</p>\n<p>\nThis time, when we prompt the user and get some input, we will have two tests to perform before we can do summation/accumulation.\nFirst we must check the input string to see if it is the special \"q\" signal to stop looping and end the program.\nIf it is not \"q\", then we validate that input to make sure it is a number (and not some string other than \"q\").\nIf it is not a number, we print the error message \"non numeric, try again\" and then\nmake the loop go around again so the user is asked again for another input.  In this way, nothing is summed into the accumulator if the input is not a number;\nIf the input is a valid number, we add it to the sum we are accumulating..\n</p>\n<p>\nTo make a loop go on to the next iteration and go again, use the <b>continue</b> statement.  This is bit like \"break\", but\nit ends the <b>current loop body only</b>; break ends the entire loop. The continue essentially says \"let's skip the rest of this loop body\nand go back around again\".  If the user gives a non-number we don't want to execute the rest of the body; we want to repeat the\nrequest for input and let the user try again.  This is the beginnings of a validation strategy that is a little better than printing \"bad\" and ending execution.\nWe will develop this \"re-ask the user\" strategy more fully in a later module.\n</p>\n<p>\n<b>Testing notes:</b> Remember that the numbers the user gives can be negative... there is nothing in the specifications that requires positive input.\nTry testing with a sequence of negative and positive numbers to see that the sum is happening as it should.  The number 0 is also\nvalid input and should not change the sum.\n</p>\n<p>\n<b>Style:</b> Use a while loop.  Use no for loops.\n</p>","type":"twit","updatedAt":{"$date":"2018-02-06T15:21:50.349Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/while.continue.mp4"},{"_id":{"$oid":"5418bb005326921e25fef930"},"createdAt":{"$date":"2014-09-16T22:34:40.855Z"},"folder":"53cef2c54fae0fbd7f731238","language":"javascript","maxSubmissions":"","name":"<b>DIY:</b> Fizz Buzz","num":8,"onSubmit":"var soln_inputs = [ [] ];\nvar soln_outputs = [ [1,2,\"fizz\",4,\"buzz\",\"fizz\",7,8,\"fizz\",\"buzz\",\n                      11,\"fizz\",13,14,\"fizzbuzz\",16,17,\"fizz\",19,\"buzz\"] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF != 1) { fail.s(\"use one while loop\"); }\n    if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that will print out the integers from 1 to 20, with these exceptions: if the number is a multiple of 3 print \"fizz\" instead of the number, if the number is a multiple of 5 print \"buzz\" instead of the number, if the number is a multiple of both 3 and 5 print \"fizzbuzz\" instead of the number.\n</p>\n</b></font>\n</p> \n<p>\nUse a while loop for this program, and do NOT use the \"break out\" form of ending the loop.  Do it with a loop index variable and\nand condition that tests it for the stopping value. You will also be using the mod (%) operator to determine if a number is a multiple  of 3 and/or 5.  Don't forget to increment the index variable you are using to control the loop (or you will get an infinite loop).\n</p>\n<p>\nWe could (and most likely would) do this with a for loop (since there is a definite number of repetitions), but we want to \npractice while loops. So here you will do a definite loop with the while syntax.  \n</p>\n<p>\n<b>Style:</b> Use a while loop.  Use no for loops. Do not use the \"break\" out form of while loop. You will also need some form of\nconditional statement inside the loop; a cascade might be a good thing to look at (not a switch).\n</p>\n","type":"diy","updatedAt":{"$date":"2018-02-06T15:22:44.29Z"},"value":{"correct":"2","style":"1"},"vidURL":""},{"_id":{"$oid":"541f402ecf5f564e688beee6"},"createdAt":{"$date":"2014-09-21T21:16:30.621Z"},"folder":"54179a21f4c3c15867b3c1fe","language":"javascript","maxSubmissions":"","name":"<b>DIY:</b> Function cube ( n )","num":4,"onSubmit":"var soln_inputs =  [ [4,      3,  -6,    -17,    2.4,   0], [0], [-1,0] ];\nvar soln_outputs = [ [\"nope\", 27, \"nope\", -4913, 13.824  ], [], [-1] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF != 1) { fail.s(\"use one while loop\"); }\n    if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                           ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a function called \"cube\" that will be passed a number as parameter. \nIt will compute and return the cube of the number that is passed in.\n</b></font>\n</p> \n<p>\nThe previous functions isInt( ) and isEven( ) return a boolean value (true or false) when called.  This makes them \nuseful for controlling if-then statements and loops. Now we will write a function that returns a number ( like Math.sqrt( ) returns a number ) .\n</p>\n<p>\nWrite a myMain function to exercise your cube( )  function.\nIn myMain write a loop that will ask the user for a number and print the cube of the number if it is NOT even (this is backwards\nfrom the previous problem, which took action if the user's number was even).  Use your isEven( ) function\nfrom before, and based on what it says call your new cube( ) function.\nIf the user's input is even, print \"nope\" and go to the next input.  Stop looping when the user gives 0 as input.  \nMake sure that when the user does give a 0, the program stops without printing the cube of that 0.\n</p>\n<p>\n<b>Style:</b>\nDon't worry about validating the input in any other ways. \nUse a while loop, not a for loop (why?).\n</p>","type":"diy","updatedAt":{"$date":"2018-02-13T15:53:12.708Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"541f4438cf5f564e688beef1"},"createdAt":{"$date":"2014-09-21T21:33:44.464Z"},"folder":"54179a21f4c3c15867b3c1fe","language":"javascript","maxSubmissions":"","name":"<b>DIY:</b> Function isOdd ( n )","num":5,"onSubmit":"var soln_inputs =  [ [4,3,-6,-5,2.3,\"q\"], [\"q\"], [2,\"q\"], [-3,\"q\"] ];\nvar soln_outputs = [ [\"not odd\",27,\"not odd\",-125,\"not odd\"], [], [\"not odd\"], [-27] ];\n// call backs \nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF != 1) { fail.s(\"use one while loop\"); }\n    if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                           ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a function called \"isOdd\" that will be passed a number as parameter. \nIf that number is an odd integer the function will return true; otherwise the function returns false.\n</b></font>\n</p> \n<p>\nWrite a myMain function to exercise your isOdd function.\nWe will do something slightly different this time to signal end of input data: we will input a string \"q\" rather than a number.\nYou will need to prompt the used for the input and not convert it to Number before you check it for this ending value.\nSo, in myMain write a loop that will ask the user for input... either a number or \"q\".  If the input is \"q\" then end the program.\nIf the input is not \"q\" then assume it is a valid number (so convert it to a number at that point) and print the cube of the number if it is odd.\nIf it is not odd, print \"not odd\" and go to the next input.  \n</p>\n<p>\nBe sure to test your isOdd function well.  Does it work for positive numbers? For 0? For negative numbers?\n</p>\n<p>\n<b>Style:</b>\nDon't worry about validating the input in other ways.\nUse only the minimum number of while loops and no for loops.\n</p>","type":"diy","updatedAt":{"$date":"2018-02-13T15:53:20.757Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"541f4556cf5f564e688beef6"},"createdAt":{"$date":"2014-09-21T21:38:30.504Z"},"folder":"54179a21f4c3c15867b3c1fe","language":"javascript","maxSubmissions":"","name":"<b>DIY:</b> Function intMult ( a, b )","num":7,"onSubmit":"var soln_inputs = [ [2, 3.1, 4.4, -11, 8.7], [1,-34.5,10.4], \n                    [1.2], [-3], [\"hi\"], [1,3,\"hi\"], [2,2,-3.3,\"hi\"] ];\nvar soln_outputs = [ [12,-88], [-340], [\"bad\"], [\"bad\"], [\"bad\"], [\"bad\"], [-6,\"bad\"] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF != 0) { fail.s(\"use no while loops\"); }\n    if (style.nAFL > 1) { fail.s(\"use one for loop\"); }\n    if (style.nDF <4) { fail.s(\"must have 4 functions declared: intMult, isInt, trunc, myMain\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                           ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a function called \"intMult\" that will do integer multiplication.  The function will be passed two numbers as parameters.\nIt will truncate each input parameter to an integer and return the product of those two integers.\n</b></font>\n</p> \n<p>\nFor example, intMult(2.3, 5.12) will return 2 * 5, or 10.  Also, intMult(-3.4, 8.17) will return -24, which is -3*8.\n</p>\n<p>\nWrite a myMain function to exercise your new intMult function.\nIn myMain first ask the user for an integer 0 or greater.  Validate this number to make sure it is what you requested.\nIf it is not a number, not an integer or less than 0 simply print \"bad\" and end\nexecution of the entire program.\nIf it is valid input then use that number to tell how many pairs of numbers the user wants to multiply.\nSince we know this number, set up a for loop to run that many times.\n</p>\n<p>\nInside the for loop ask the user for two more numbers (validate each as you get it; make sure you get a number, but any \nnumber is fine... print \"bad\" and end execution is the input is not valid).  \nThen call your intMult function, pass in the two numbers the user gave\nand print out the result you get back from intMult.\n</p>\n<p>\n<b>Style:</b>\nUser a for loop in myMain; do not use while loops.\nUse your other utility functions as appropriate (isInt, isEven, isOdd, etc.).\nYou may assume inside function intMult that the two parameters passed to it are valid numbers (so no need for validation inside\nthe body of intMult).\n</p>\n<p>\n<b>Remember:</b> write small pieces of code and test, then add more code.\nIn this case, write intMult first and test it to make sure you are getting numbers out that seem correct.  Then go on to \nwrite myMain and use intMult there.\n</p>\n<p>\nUse your function \"trunc\" from the previous problem to do truncation.  This function will do proper truncation for both positive and negative numbers.\n</p>\n<p>\n<b>Sample executions</b>: These may help you see what kind of numbers and input the user should give, and how the program\nshould compute and respond.\nUser typing is in bold red, prompt messages in dark grey, alert output in bold green.\n<pre>\nHow many times?  <font color=red><b>3</b></font>\nFirst operand (a number)? <font color=red><b>6</b></font>\nSecond operand (a number)? <font color=red><b>2.5</b></font>\n<font color=green>12</b></font>\nFirst operand (a number)? <font color=red><b> -6.5</b></font>\nSecond operand (a number)? <font color=red><b>4.1</b></font>\n<font color=green>-24</b></font>\nFirst operand (a number)? <font color=red><b>hello</b></font>\n<font color=green>bad</b></font>\n</pre>\n<pre>\nHow many times? <font color=red>zillions</b></font>\n<font color=green>bad</b></font>\n</pre>\n<pre>\nHow many times? <font color=red>3.5</b></font>\n<font color=green>bad</b></font>\n</pre>\n<pre>\nHow many times? <font color=red>-5</b></font>\n<font color=green>bad</b></font>\n</pre>\n<pre>\nHow many times? <font color=red>0</b></font>\n</pre>\n<pre>\nHow many times? <font color=red>1</b></font>\nFirst operand (a number)? <font color=red>12.7</b></font>\nSecond operand (a number)? <font color=red>one</b></font>\n<font color=green>bad</b></font>\n</pre>\n<pre>\nHow many times? <font color=red>2</b></font>\nFirst operand (a number)? <font color=red>12.7</b></font>\nSecond operand (a number)? <font color=red>-2</b></font>\n<font color=green>-24</b></font>\nFirst operand (a number)? <font color=red>-3.5</b></font>\nSecond operand (a number)? <font color=red>-7.2</b></font>\n<font color=green>21</b></font>\n</pre>\n</p>\n","type":"diy","updatedAt":{"$date":"2018-02-13T15:53:33.445Z"},"value":{"correct":"2","style":"1"},"vidURL":""},{"_id":{"$oid":"5423f282cf5f564e688bf793"},"createdAt":{"$date":"2014-09-25T10:46:26.516Z"},"folder":"54179a21f4c3c15867b3c1fe","language":"javascript","maxSubmissions":"","name":"<b>DIY:</b> Function pythagoras ( a, b )","num":8,"onSubmit":"var soln_inputs = [  [3,4,\"yes\"],\n                     [12,5,\"n\",8,15,\"Y\"], \n                     [\"hi\"],           \n                     [3,\"yo\"],         \n                     [3,4,\"no\", 5,\"zap\"] \n                  ];\nvar soln_outputs = [ [\"hypot: 5\",\"ok, done\"], \n                     [\"hypot: 13\",\"hypot: 17\",\"ok, done\"], \n                     [\"not positive number\"],  \n                     [\"not positive number\"],  \n                     [\"hypot: 5\",\"not positive number\"] \n                   ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF != 1) { fail.s(\"use one while loop\"); }\n    if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n    if (style.nFD <2) { fail.s(\"need at least 2 functions declared\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                   12","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a function called \"pythag\" that will be passed two numbers as parameters.\nThese two parameters will be the lengths of the two sides of a right triangle.\nThe function will compute and return the length of the hypotenuse, using the Pythagorean theorem.\n</b></font>\n</p> \n<p>\nWe did this computation several times in earlier folders; we are essentially taking the code for one of these and wrapping it\nin a function here.\n</p>\n<p>\nYou may write the body of the function pythag assuming only valid numbers will be passed to it.  We will do input validation in function\nmyMain, where we will call function pythag.\n</p>\n<p>\nIn myMain we will loop repeatedly, asking the user for the pair of input values needed.  Since the data values are the lengths\nof triangle sides, we will need to validate them to be sure they are numbers, and positive (triangles cannot have\n0 or negative length sides). We will stop the loop with a special \"shall we quit?\" request.\n</p>\n<p>\nIn the loop body, first ask the user for a positive number.  \nValidate this input to be sure it is a positive number; if it is not print \"not positive number\" and end execution.  \nThen ask the use for a second number and validate it as well in the same way.\nOnce we have two valid values call your function pythag, \npass in those numbers as parameters, \nand print the result that comes back (output format shown below in Sample Execution).  \nThen ask the user this question: quit?  \nIf the user types any of these (\"y\",\"Y\",\"yes\",\"Yes\",\"YES\") print \"ok, done\" and end execution.\nOtherwise we loop back and do another hypotenuse computation.\n</p>\n<p>\n<b>Sample Executions</b>\n<pre>\nfirst number? 3            first number? 8\nsecond number? 4           second number? 15\nhypot: 5                   hypot: 17\nquit? no                   quit? hello\nfirst number? 12           first number? 4\nsecond number? 5           second number? 6\nhypot: 13                  hypot: 7.211102550927978\nquit? yes                  quit? Y\nok, done                   ok, done\n</pre>\n\nRemember to build your program a little at a time.  For this one write pythag first, and then write a simple myMain\nthat just calls pythag directly, passes in some simple data values (like 3 and 4) and print what pythag sends back; for 3 and 4 we would\nexpect a 5 to be returned.  In this way you test pythag before you go on to write the more complicated myMain requested in this specification.\n</p>\n<p>\n<b>Style:</b> Use the proper loop (while or for) for this situation (is it definite, or indefinite?). Your program will follow myMain format \nand will have at least two functions in it (myMain and pythag).\nYou can write more if you wish; for example, you could write a boolean function that will tell you \nif the user's response to \"quit?\" is one of the acceptable strings.  Or you can write a function isPosNum,\nreturning true if the parameter sent to it is a number AND positive.\n</p>\n","type":"diy","updatedAt":{"$date":"2018-02-13T15:53:56.517Z"},"value":{"correct":"2","style":"1"},"vidURL":""},{"_id":{"$oid":"54289167c8b4714e17ed8caf"},"createdAt":{"$date":"2014-09-28T22:53:27.367Z"},"folder":"5428968fc8b4714e17ed8cc7","language":"javascript","maxSubmissions":"","name":"Overview","num":0,"onSubmit":"var soln_inputs = [ [\"unc\"] ];\nvar soln_outputs = [ [\"unc: OK\"]  ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                       ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Overview: Encapsulating validation\n</b></font>\n</p> \n<p>\nWe will now put our new knowledge of simple functions to work making input validation look cleaner in our programs.\nThe idea is that instead of asking 2 or 3 individual questions (like is this an integer? is this odd? etc.) in our main program\nwhen the user gives input, we will put the questions together in the body of a new function named something like \"validate\".\nWe will pass the input from the user into the validate function as a parameter; the function will return a message indicating\nwhat went wrong (or something like \"ok\" if all went right).\n</p>\n<p>\nTo complete this overview write the following program and run it:\n<pre>\n\"use strict\";\nfunction myMain() {\n   var inp = prompt(\"input?\");\n   var result = validate(inp);\n   alert(result);\n}\n\nfunction validate ( userInput ) {\n   var retVal = userInput + \": OK\" ;\n   return retVal;\n}\n\nmyMain();\n</pre>\nNow this program is simply declaring all inputs to be OK, but it shows the basic structure we will need.\n</p>","type":"twit","updatedAt":{"$date":"2018-02-19T13:44:23.899Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/validate2.overview.mp4"},{"_id":{"$oid":"54289afcdc18cbb77de72c9f"},"createdAt":{"$date":"2014-09-28T23:34:20.453Z"},"folder":"5428968fc8b4714e17ed8cc7","language":"javascript","maxSubmissions":"","name":"Function validate","num":1,"onSubmit":"var soln_inputs =  [ [2,21,10,16,25,50,70], [-4], [3,17,10,2,\"hi\"], \n                     [2,\"hi\"], [2.3], [2,12,4,10,2,5,3.4] \n                   ];\nvar soln_outputs = [ [\"avg: 18.5\",\"avg: 60\"], [\"not pos\"], [\"avg: 13.5\",\"not num\"], \n                     [\"not num\"], [\"not int\"], [\"avg: 11\",\"not int\"] \n                   ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP > 1) { fail.s(\"use one for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                       ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that uses a validate function that checks for non-numeric input, non-integer input, and non-positive input.\n</b></font>\n</p> \n<p>\nLet's now take the function \"validate\" from Overview and add some sensible behavior to it.\nWrite a myMain program that will first ask the user for a positive integer (meaning > 0).\nThis positive integer will be the number of data cases the user has for processing.\nSet up the appropriate loop using this input so that each execution of the loop body will\nprocess one data case.\n</p>\n<p>\nInside the loop body your program will ask the user for 3 more inputs (one per prompt).\nEach input must be a positive integer.  Find the largest two of the inputs, compute the\naverage of them and print it out (format below in the Sample Execution).\n</p>\n<p>\nEach user input must be validated.  In each case we require a positive integer.\nWe will do this with the function \"validate\".  We will pass the user input to the\nfunction as a parameter.  In the function body the value will be checked for\nseveral conditions.  First check to see if it is a number; if it is not return the string \"not num\".\nThen check to see if the value is an integer; if it is not return the string \"not int\".\nFinally, check the parameter to see if it is positive; if it is not return the string \"not pos\".\nIf all three checks pass, return the string \"ok\".\n</p>\n<p>\nIn myMain the function \"validate\" will be called for each input and\nthe return value checked.  If the return value is not \"ok\" then your program should\nprint the return value and end execution.\n</p>\n<p>\n<b>Sample Execution</b>\n<pre>\nHow many data cases? 2\nnum 1? 23\nnum 2? 17\nnum 3? 19\navg: 21\nnum 1? hello\nnot num\n</pre>\n<b>Sample Execution</b>\n<pre>\nHow many data cases? 3\nnum 1? 17\nnum 2? -3\nnot pos\n</pre>\n</p>","type":"twit","updatedAt":{"$date":"2018-02-19T13:44:23.9Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/validate2.validate.mp4"},{"_id":{"$oid":"5428c10249d874450e0c6191"},"createdAt":{"$date":"2014-09-29T02:16:34.415Z"},"folder":"5428968fc8b4714e17ed8cc7","language":"javascript","maxSubmissions":"","name":"Re-ask the user","num":2,"onSubmit":"var soln_inputs = [ [4.5,-3,\"hi\",5], [4], [\"go\",\"heels\",1.123, 88], [-123,3.14159,100] ];\nvar soln_outputs = [ [\"not int: try again\",\"not pos: try again\",\"not num: try again\",\"good: 5\",\"computing ...\"], \n                     [\"good: 4\",\"computing ...\"],\n                     [\"not num: try again\",\"not num: try again\",\"not int: try again\",\"good: 88\",\"computing ...\"],\n                     [\"not pos: try again\",\"not int: try again\",\"good: 100\",\"computing ...\"]\n                   ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF != 1) { fail.s(\"use one while loops\"); }\n    if (style.nFLAP != 0) { fail.s(\"use no fors loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);       ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that uses an encapsulated validate function and implements the \"re-ask the user\" policy.\n</b></font>\n</p> \n<p>\nUp to now we have usually ended execution when the user gave invalid input.\nWe will now up the game a bit.  Another strategy is to re-ask the user for valid input\nwhen invalid input is given, and keep on asking until we get something valid.  \nWe will use the \"validate\" function from the previous problem\nand implement the <b>re-ask strategy</b> in myMain.\n</p>\n<p>\nWe will simplify things a bit so we can concentrate on making the input validation loop.\nIn myMain ask the user for a positive integer.  Call validate and pass the input to it as the\nvalue of the parameter.  When the result message is returned from validate, if it is \"ok\" then\nwe will print \"good: \" along with the number the user gave (see the format below in Sample\nExecution). If validate returns something that is not \"ok\" then print the return message with \": try again\" and\nloop back to ask for input again.  Keep asking until the user gives a number that validates as \"ok\".\n</p>\n<p>\nThis means that in this program, myMain is not really computing anything, it is just allowing us to see how to do a \"re-ask\"\nstrategy for input validation.  So we represent the entire rest of the program with the output \"computing ...\"\n</p>\n<p>\n<b>Sample Execution </b>\n<pre>\npositive integer? 4.5\nnot int: try again\npositive integer? -3\nnot pos: try again\npositive integer? go heels\nnot num: try again\npositive integer? 5\ngood: 5\ncomputing ...\n</pre>\n</p>","type":"twit","updatedAt":{"$date":"2018-02-19T13:44:23.901Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/validate2.reaskuser.mp4"},{"_id":{"$oid":"5428d34d5a923ecc12179750"},"createdAt":{"$date":"2014-09-29T03:34:37.832Z"},"folder":"5428968fc8b4714e17ed8cc7","language":"javascript","maxSubmissions":"","name":"Fully abstracted validation","num":3,"onSubmit":"var soln_inputs = [ [4.5,-3,\"hi\",5], [4], [\"go\",\"heels\",1.123, 88], [-123,3.14159,100] ];\nvar soln_outputs = [ [\"not int: try again\",\"not pos: try again\",\"not num: try again\",\"good: 5\",\"computing ...\"], \n                     [\"good: 4\",\"computing ...\"],\n                     [\"not num: try again\",\"not num: try again\",\"not int: try again\",\"good: 88\",\"computing ...\"],\n                     [\"not pos: try again\",\"not int: try again\",\"good: 100\",\"computing ...\"]\n                   ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    //if (style.nWLF != 2) { fail.s(\"use 2 while loops\"); }\n    if (style.nFLAP > 0) { fail.s(\"use no for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);       ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that will use a fully abstracted validation function, one which requests user input, checks it for validity, and re-asks until the input is good... all in one function.\n</b></font>\n</p> \n<p>\nWe will now change the form we use to implement the re-ask-the-user strategy.\nThe basic program will remain the same, compute the same outputs.  This current program\nwill behave the same as the previous one.  This is why I say we are altering the \"form\".  We\nare going to restructure the functions and how they call each other, what part of the whole\neach one does... but the behavior is the same... it uses the same inputs and produces the \nsame outputs.\n</p>\n<p>\nWe will keep the \"validate\" function we already have (and the isInt function it calls).\nWe will write one more function, named \"getGoodInput ( ) \" .\nThe purpose of getGoodInput will be to do the looping and re-asking we had in myMain in the last program.\nWe will call getGoodInput with no arguments.  It will ask the user for input, call validate to see if it is\nok, and keep looping and asking until the user gives a good value.  It then returns the good value\nback to myMain.\n</p>\n<p>\nThis means myMain can simply call getGoodInput() and wait for it to return a positive integer.  All looping and \nre-asking is done in getGoodInput so there is no validation looping showing in myMain.\nThis makes myMain easier to read and makes the process of getting validated input fully abstracted.\n</p>\n<p>\n<b>Sample Execution (same as previous)</b>\n<pre>\npositive integer? 4.5\nnot int: try again\npositive integer? -3\nnot pos: try again\npositive integer? go heels\nnot num: try again\npositive integer? 5\ngood: 5\ncomputing ...\n</pre>\n</p>","type":"twit","updatedAt":{"$date":"2018-02-19T13:44:23.902Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/validate2.fullyabs.mp4"},{"_id":{"$oid":"542948635a923ecc12179772"},"createdAt":{"$date":"2014-09-29T11:54:11.853Z"},"folder":"5902b4167bb0b09c0d2a6422","language":"javascript","maxSubmissions":"","name":"<b>DIY:</b> Array and averages","num":13,"onSubmit":"var soln_inputs = [ [1,3,4,7,10,0], [-6,-1,1,2,3,4,6,7,0], [12,6,-6,-18,24,48,-36,30,0] ];\nvar soln_outputs = [ [5,5.5], [2,0.5], [7.5,6] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL > 1) { fail.s(\"use no more than one while loops\"); }\n    if (style.nFLAP > 3) { fail.s(\"use no more than 3 for loops\"); }\n    if (style.nAFD < 3) { fail.s(\"need at least 3 functions declared\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                       ","phase":1,"testMode":true,"text":"(6-2 pts.) Write the following program here in class.  You have 30 minutes to get it completed. Do your own work. \nYou may refer back to the other bricks and walls you have written. \n<br/><br/>\nNo need to validate user inputs.\n<br/><br/>\nWrite a program that will create an array and fill it with numbers from the user.  When the user gives a 0\nend the input loop (and do not put the 0 into the array).\n<br/><br/>\nCompute and print the average of all the elements in the array.\nThen compute and print the average of the largest element and the smallest element.\n<br/><br/>\n<b>Style:</b>\nUse myMain format, as always.  Use no global variables.  \nAlso, use the appropriate loops for the various situations needing loops.\nDeclare and use at least two functions other than myMain (3 functions total or more).\n\n","type":"diy","updatedAt":{"$date":"2018-01-05T18:59:04.563Z"},"value":{"correct":"8","style":"2"},"vidURL":""},{"_id":{"$oid":"542b74383d0530c93309a382"},"createdAt":{"$date":"2014-10-01T03:25:44.143Z"},"folder":"542b73843d0530c93309a381","language":"javascript","maxSubmissions":"","name":"Overview","num":0,"onSubmit":"var soln_inputs = [ [] ];\nvar soln_outputs = [ [5, 5] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  //if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  //else {\n    //if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    //if (style.nWLF != 2) { fail.s(\"use 2 while loops\"); }\n    //if (style.nFLAP > 0) { fail.s(\"use no for loop\"); }\n  //}\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                        ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Scope\n</b></font>\n</p> \n<p>\n\"Scope\" is the term we use for the parts of a program in which a particular declared variable is visible (useable).  \"Scope rules\" are the decision procedures \nthat allow us to determine what storage location in memory is denoted when we see a variable name in our code.  \nIn other words, when you see a variable used in an expression,  you can decide which \"var\" declaration is being used. \n</p>\n<p>\nIt is possible, for example, to have several lines that look like \"<b>var x ;</b>\" in your code.   \nWhen we see something like  \"<b>x = 5 ;</b>\" we need to know which of the several \"<b>var x ;</b>\" lines is the variable being referenced in the expression.\nIn JavaScript we have two main scopes: <b>global</b>, and <b>local</b>. \n</p>\n<p>\n<b>Global scope</b> is the collection of variables and names (function names) declared outside of all function definitions.\n<br/>\nWe can have code statements at the global level, and\nwe can have variable declarations at the global level. A global variable can be seen and used inside any function, as well\nas in code at the global level.\n</p>\n<p>\n<b>Local scope</b> is the collection of variables and names declared inside a function definition (this includes the parameters).\n<br/>\nA local variable can be seen and used by any code that is inside the function it is declared in, but it is invisible (undefined) \nin code that is global, or inside other function declarations.\n</p>\n<p>\nWe are not going to use global code in most of our programs.  For these in this section, where we are specifically learning about\nglobal vs. local, we will write and use some.\n</p>\n<p>\nTo complete this overview, type in and run this program:\n<pre>\n\"use strict\"; \n\nvar gx = 5; // global var declaration\n\nfunction myMain() {\n  alert( gx ); // use of global var from inside local function scope\n}\n\nalert(gx);  // use of global var from global scope\nmyMain();\n</pre>\nHere the variable \"gx\" is in the global scope (we say \"gx is a global variable\") because it is declared not inside any function.\nSince it is global, we can use it inside any function.  Hence, we can print our its value from inside of myMain.  We can also print its value\nat the global level.  \n</p>\n<p>\nNote also that the name \"myMain\" is also a global name; this is why the call to myMain is outside any function as well.\nThat call is a global code statement.  For most of our programs, that is the only global executable statement we will have.\nIn this code, we have two global executable statements: the alert, and then the call to myMain.\n</p>","type":"twit","updatedAt":{"$date":"2018-02-13T15:56:06.185Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/scope.overview.mp4"},{"_id":{"$oid":"542b785b3d0530c93309a385"},"createdAt":{"$date":"2014-10-01T03:43:23.534Z"},"folder":"542b73843d0530c93309a381","language":"javascript","maxSubmissions":"","name":"Using global","num":1,"onSubmit":"var soln_inputs = [ [2], [10], [0], [-6], [1.25] ];\nvar soln_outputs = [ [4], [100], [0], [36], [1.5625] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  //if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  //else {\n    //if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    //if (style.nWLF != 2) { fail.s(\"use 2 while loops\"); }\n    //if (style.nFLAP > 0) { fail.s(\"use no for loop\"); }\n  //}\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                        ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that gets a number as input from the user, then prints that number squared.\n</b></font>\n</p>\n<p>\nThere is no need to validate the user input; we will assume the user gives a good number.\n</p>\n<p>\nThe program is simple sounding, but we are going to do it using a global variable and two functions, both of which access the one global variable.\nDeclare a global variable ( outside myMain() ) and then write function myMain.  In myMain, get the user input and assign that to the global variable.\nAlso in myMain call a function named \"helper\" <b>that takes no parameters</b>.\nWrite helper to access the global variable and print out the square of the value stored inside it.\n</p>\n<p>\nNote that using global variables violates our \" myMain format\" style convention. We are suspending that convention\nfor a few programs in order to learn about global and local scope.\n</p>\n","type":"twit","updatedAt":{"$date":"2018-02-13T15:56:23.649Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/scope.useGlobal.mp4"},{"_id":{"$oid":"542b7b763d0530c93309a387"},"createdAt":{"$date":"2014-10-01T03:56:38.829Z"},"folder":"542b73843d0530c93309a381","language":"javascript","maxSubmissions":"","name":"Local hides global","num":2,"onSubmit":"var soln_inputs = [ [10], [1.3], [0], [-14.321] ];\nvar soln_outputs = [ [25], [25], [25], [25] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  //if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  //else {\n    //if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    //if (style.nWLF != 2) { fail.s(\"use 2 while loops\"); }\n    //if (style.nFLAP > 0) { fail.s(\"use no for loop\"); }\n  //}\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                        ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Let's modify the previous program that uses a global variable to show how a local variable with the same name can hide the global variable.\n</b></font>\n</p>\n<p>\nWrite a program that has function myMain() and function helper().\nIn myMain ask the user to input a number (no need to validate) and assign that number to a global variable \"num\".\nCall function helper() and then print the value of global variable \"num\" squared.\n</p>\n<p>\nDon't submit the program yet... just run it and see that it behaves like the one we did just before this.  It *is* the one we just did.\nThe global variable \"num\" can be seen and used inside the helper function.\n<p>\nNow for the win... inside function helper\n declare a local variable \"num\". Assign to the local num the value 5,\nright before the code you already have to square variable num and return.  Now no matter what value the user gives as input, the program\nproduces 25 as output; the local \"num\" has a 5 in it, and that local hides the global \"num\" containing the user's input value.\n</p>\n<p>\nThis program shows that when a function has a declared local variable with the same name as a global variable,\nthe global variable is not visible inside the function.  No assignment to the local variable will change the global. No reference to the\nlocal name can retrieve the value from the global storage location.\n</p>\n<p>\n<b>Scope Rules:</b> The rules that allow us to determine what storage location (var declaration) matches some used of a variable (an expression or assignment) are called <b>scope rules</b>.  In JavaScript,  these are the rules.  \n<pre>\n<b>JavaScript Scope Rules</b>\n\nWhen a name is encountered (variable or function), to find the declaration that it references\n\n1) look inside the function that the name is used in, to see if there is a local declaration for the name \n    (var declaration, function declaration, parameter); if there is one locally, then that is the correct declaration\n\n2) if there is nothing local, then look globally for a declaration matching the name (either a global variable declaration, \n    or a function declaration)\n\n3) if there is no local declaration for the name, and no global declaration, then the name is undeclared; \n    nothing declared inside one function is visible inside some other function\n</pre>\n</p>","type":"twit","updatedAt":{"$date":"2018-02-13T16:06:24.016Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/scope.localHidesGlobal.mp4"},{"_id":{"$oid":"54321c8d5132c62a2a2c5ba9"},"createdAt":{"$date":"2014-10-06T04:37:33.763Z"},"folder":"542b73843d0530c93309a381","language":"javascript","maxSubmissions":"","name":"Local vs. local","num":3,"onSubmit":"var soln_inputs = [ [] ];\nvar soln_outputs = [ [10] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  //if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  //else {\n    //if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    //if (style.nWLF != 2) { fail.s(\"use 2 while loops\"); }\n    //if (style.nFLAP > 0) { fail.s(\"use no for loop\"); }\n  //}\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                           ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that shows how locals in one function are not seen in another function.\n</b></font>\n</p>\n<p>\nThe local variables in one function cannot be seen or used in another function.  Scope rules says resolving a name\nlooks locally in the function where the name is used, and then globally.  Use of a name in one function cannot refer to storage\ncreated inside another function.\n</p>\n<p>\nWhen we need to communicate values from one function to another , we do it  with parameter passing (and the return statement).\n</p>\n<p>\nIn this program we will create in myMain a variable \"num\" and put 5 into it.\nWe will declare a variable \"num\" at the global lever and put 10 into it.\nThen write a function \"helper\" that takes no arguments; helper will print the value of \"num\" and return.\nCall helper in myMain.  When it runs you will see that in function helper, the \"num\" in myMain is not seen.\nRather, helper see the global \"num\".\n","type":"twit","updatedAt":{"$date":"2018-02-13T16:06:33.607Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/scope.localVsLocal.mp4"},{"_id":{"$oid":"543463355132c62a2a2c5edb"},"createdAt":{"$date":"2014-10-07T22:03:33.007Z"},"folder":"542b73843d0530c93309a381","language":"javascript","maxSubmissions":"","name":"<b>DIY:</b> Use global","num":4,"onSubmit":"var soln_inputs = [ [10,-5], [-5,21.21], [0,-1], [-1,100], [1.2,2.1], [5,-5.5] ];\nvar soln_outputs = [ [100,100], [5,5], [0,0], [1,1], [1.44,1.44], [25,25] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  //if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  //else {\n    //if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nTFD < 3) { fail.s(\"must have at least 3 top level function definitions\"); }\n    //if (style.nWLF != 2) { fail.s(\"use 2 while loops\"); }\n    //if (style.nFLAP > 0) { fail.s(\"use no for loop\"); }\n  //}\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                                     ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that explores the relationship between the local and global scopes.\n</b></font>\n</p>\n<p>\nWrite a program that declares a global variable named \"gNum\".  \nWrite the normal myMain function and in there get a number from the user (no need to validate).\nStore the user input number into the global \"gNum\".\nThen call a function named \"masher\" that takes no parameters.\nAfter masher returns, print out the value in the global variable.\nThen call a function named \"mushy\" that takes no parameters;\nWhen mushy returns, print out the value in the global variable.\n</p>\n<p>\nFunction \"masher\" should do this: access the global variable and test its value to see if it is less than zero.  If it is less than zero, negate it (and store the\nnew value back into the global).  If it is 0 or greater, square it and store it back.\nThen return from the function (note that we are not returning a value, just ending execution of masher and going back to where it was\ncalled in myMain). Function masher also does no output.\n</p>\n<p>\nFunction \"mushy\" should do this: declare a local variable \"gNum\" and then\nget the user to input a number; store that number in the local gNum (no need to validate the input).\nThen do the same to the local gNum that you did in \"masher\".  Test the value of gNum to see if it is less than zero.  If it is less than zero, negate it (and store the\nnew value back into gNum).  If it is 0 or greater, square it and store it back. You can cut and paste the if-then-else from masher into mushy to do this.\nThen return from the function (note that we are not returning a value, just ending execution of masher and going back to where it was\ncalled in myMain). Function mushy also does no output.  All output is done from alerts in myMain.\n</p>\n<p>\nThis exercise shows that a global variable can be read and written in all functions (as long as there is no\nlocal variable with the same name in a function).  Here, we name it and use it both in myMain and in masher. In mushy, we have local\nwith the same name that hides the global variable.\n</p>","type":"diy","updatedAt":{"$date":"2018-02-13T16:06:53.937Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"543463ce5132c62a2a2c5edc"},"createdAt":{"$date":"2014-10-07T22:06:06.563Z"},"folder":"53cef3104fae0fbd7f73123d","language":"javascript","maxSubmissions":"","name":"Overview","num":0,"onSubmit":"var soln_inputs = [ [] ];\nvar soln_outputs = [ [5,\"hello\"] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                 ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Basic Objects: Structured data\n</b></font>\n</p> \n<p>\nObjects are collections of data with \"tags\" to identify the components.\nYou can think of an object as a container full of named data items.  The components of an object are called its \"fields\" or \"properties\".\nLater we will see that objects can contain functions as well as data, but for now we will think of them as a wrapper around a\ncollection of named data items.  Although the data items in an object are called \"fields\" or \"properties\" we can also think of them\nas variables.  They will behave like variables... we will be able to store data into them, and retrieve data from them, and use them in\nexpressions.\n</p>\n<p>\nWe will start with object literals.  An object literal is a way of specifying an object value directly, like a constant... like 5 is a number literal or\n\"go heels\" is a string literal.\n</p>\n<p>\nTo complete this problem type in and run this code:\n<pre>\n\"use strict\";\n\nfunction myMain() {\n   alert( {a:5, b:\"hello\"}.a );\n   alert( {a:5, b:\"hello\"}.b );\n}\n\nmyMain();\n</pre>\nHere, the object literal (value) is  {a:5, b:\"hello\"} which contains two fields, tagged \"a\" and \"b\".  The \"dot notation\" is used to select a field.\nThus,  {a:5, b:\"hello\"}.a says to select the value of the field tagged \"a\" from the object, and the alert will print 5.\n</p>\n<p>\nNow type in the following code:\n<pre>\n\"use strict\";\n\nfunction myMain() {\n  var obj = {a:5, b:\"hello\"};\n  alert( obj.a );\n  alert( obj.b );\n}\n\nmyMain();\n</pre>\nIf you run this (or submit it for score) you will see that it does the same thing as the first form.  In this second form, we create a variable and store the object\nliteral into it (same as doing \"var x = 5;\" with a number literal).  We now see that the dot notation, to select a field from an object, can be used after a variable name also.\nThis second form is by far the more heavily used way to create and access objects.\n</p>\n<p>\nEven though we saw that objects do have literal values (like the {a:5, b:\"hello\"} ) there is a difference between a literal object and a literal number data value.  A number literal does not\nhave parts, or components; it is unstructured ... it has only one part.  In contrast, objects have parts -- they are constructed from components (the fields) and they are organized.\nThey are what we call <b>structured data</b>.  We will see that you can used an object as an abstract collection (by referring to the variable containing the object) or you can\nuse a piece of an object... you can access portions of the structure.  This is what the dot notation does.\n</p>","type":"twit","updatedAt":{"$date":"2018-02-19T13:24:38.61Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/basicobjs.overview.mp4"},{"_id":{"$oid":"543464055132c62a2a2c5edd"},"createdAt":{"$date":"2014-10-07T22:07:01.566Z"},"folder":"53cef3104fae0fbd7f73123d","language":"javascript","maxSubmissions":"","name":"Return 2 items: Quadratic 5","num":3,"onSubmit":"var soln_inputs = [ [2,10,-100], [5,-6,1] ];\nvar soln_outputs = [ [5,-10], [1,0.2] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nTFD < 2) { fail.s(\"must have at least 2 top level function definitions\"); }\n    if (style.nWLF != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                 ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that will do Quadratic again, but using an object to contain both roots grouped together.\n</b></font>\n</p> \n<p>\nLet's start this program with your code for Quadratic 4, back in folder \"SImple Functions\".  Take the basic code that computes the 2 roots\nand put it in a function that takes 3 parameters.  Let's call this function quadratic ( a, b, c ).  \n</p>\n<p>\nIn previous versions of Quadratic we were printing the roots when they were computed.  In this program, we are going to compute\nboth roots in function \"quadratic\" but instead of printing them inside the function, we will put both roots into an object literal and\nreturn the object literal as the return value of the function.  Make the field names \"plus\" and \"minus\".\n</p>\n<p>\nWe will need to take the lines that get user input\nout of the function quadratic and do them in function myMain.  Function myMain will first ask the user to input values for the coefficients a, b, and c (no need to validate).\nIt will then call function quadratic and pass the user inputs to it as parameters.\nFunction quadratic will return an object literal containing both roots with field names \"plus\" and \"minus\".\nPrint out in myMain both roots, with root plus being first.\n</p>\n<p>\n<b>Style:</b> Use myMain format, and you will write a second function \"quadratic\". We are back to using no globals.\n</p>\n","type":"twit","updatedAt":{"$date":"2018-02-19T13:25:09.673Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/basicobjs.quad5.mp4"},{"_id":{"$oid":"543464485132c62a2a2c5ede"},"createdAt":{"$date":"2014-10-07T22:08:08.988Z"},"folder":"53cef3104fae0fbd7f73123d","language":"javascript","maxSubmissions":"","name":"Create/use object variable","num":1,"onSubmit":"var soln_inputs = [ [3,4,5], [-2, 4.5, 0], [-7,-3.2,-19] ];\nvar soln_outputs = [ [5], [4.5], [-3.2] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                 ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that asks the user to input 3 numbers (no need to validate) and stores then in fields of an object; then \nprint out the largest of the 3 values in those object fields.\n</b></font>\n</p> \n<p>\nTo do this program first declare a variable that will be an object, like this:\n<pre>\nvar obj = { };\n</pre>\nThis creates the variable and puts an empty object in it., but does not create any fields or put any data values into the object itself.\n</p>\n<p>\nObject syntax and semantics in JavaScript is very flexible. There are several ways to create the object with the 3 fields.\nIn this problem we will illustrate that an object structure is dynamic -- we can add new fields when we need to.\nSo we start the object with no fields, and every time we as the user for an input we will create a new field to hold it.\nWe will ask the user 3 times for input, and put those values into fields tagged \"one\", \"two\", and \"three\" in that order (field \"one\" will hold\nthe first user input, etc.).\n</p>\n<p>\nOnce all inputs are obtained, we will then examine the values in the object fields and decide which is largest, and print out that value.\n</p>\n\n","type":"twit","updatedAt":{"$date":"2018-02-19T13:24:52.029Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/basicobjs.objvariable.mp4"},{"_id":{"$oid":"5434ad89ab63474c25ba17dd"},"createdAt":{"$date":"2014-10-08T03:20:41.274Z"},"folder":"53cef3104fae0fbd7f73123d","language":"javascript","maxSubmissions":"","name":"Car object","num":2,"onSubmit":"var soln_inputs = [ [\"ford\",\"ranger\",12345,\"red\",2005], [\"dodge\",\"caravan\",345678,\"blue\",2009] ];\nvar soln_outputs = [ [\"red, ford, ranger, 12345, 2005\"], [\"blue, dodge, caravan, 345678, 2009\"] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                       ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that make an object to represent an automobile. Input will be from the user; once all input is done, \nprint the fields of the object in alphabetic order by field name (tag).\n</b></font>\n</p> \n<p>\nWe will create 5 fields in the object, as follows.\nFirst ask the user to input the name of the manufacturer; store the input in the object field \"make\".\nNext ask the user to input the name of the model; store the input in the object field \"model\".\nNext ask the user to input the VIN; store the input in the object field \"vin\".\nNext ask the user to input the color; store the input in the object field \"color\".\nFinally ask the user to input the model year; store the input in field \"year\".\n</p>\n<p>\nFor this program, we will create the object first, with the fields defined at creation time, and with initial values put into those fields.  The initial values\nwe use will the null-ish, such as empty strings, or NaN for numbers.  Then we will change the field values\nwhen we get user input.\n</p>\n<p>\nFor output, we will use one alert statement, and put a \", \" (comma then space) between values, and we will not be\nprinting field names (only the values).  In order to get the output in alphabetic order by tag name, we will manually\norder the items in the alert (the program will not figure out the field names at run-time),\n</p>\n\n\n\n","type":"twit","updatedAt":{"$date":"2018-02-19T13:24:58.619Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/basicobjs.carobj.mp4"},{"_id":{"$oid":"544471b016e2d09e7a7e0db4"},"createdAt":{"$date":"2014-10-20T02:21:36.404Z"},"folder":"53cef3104fae0fbd7f73123d","language":"javascript","maxSubmissions":"","name":"Construct person object","num":4,"onSubmit":"var soln_inputs = [ [1234,\"smith\",32,15.75, 2345,\"jones\",17.5,10, 3456,\"miller\",25.60,40] ];\nvar soln_outputs = [ [504,175,1024] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nTFD < 2) { fail.s(\"must have at least 2 top level function definitions\"); }\n    if (style.nWLF != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                         ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that will created 3 objects to represent 3 different people (employees) and use those objects to compute \ntotal pay for each person.\n</b></font>\n</p> \n<p>\nIn this program we will see how a function can be used to create and return (manufacture) an object.  A function that manufactures\nobjects is called a \"constructor\".\n</p>\n<p>\nWrite a program that has two functions: myMain (with no arguments) and makePersonObject (with no arguments). In function makePersonObject you will first create an empty object and then query the user for 4 pieces of information: an id number, a name, number of hours worked (allow non-integer) and hourly pay rate (as a positive real number) in that order. No need to validate the user input. The user input values go into 4 fields in the object (with tags id, name, hours, payrate). When it is filled, makePersonObject will return the object. \n</p>\n<p>\nIn myMain call the makePersonObject function 3 times, and each time put the returned object into a new different variable.\nWhen that is done, print out the total pay for each person (using a separate alert statement for each person). Do this by accessing the hours fields and payrate fields and doing the math. \n</p>","type":"twit","updatedAt":{"$date":"2018-02-19T13:25:16.143Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/basicobjs.constructor.mp4"},{"_id":{"$oid":"54449cfe16e2d09e7a7e0dcc"},"createdAt":{"$date":"2014-10-20T05:26:22.322Z"},"folder":"53cef2e94fae0fbd7f73123b","language":"javascript","maxSubmissions":"","name":"Average of randoms","num":3,"onSubmit":"var soln_inputs = [ [] ];\nvar soln_outputs = [ [50] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 1) { fail.s(\"use one for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                         ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program to generate 1,000,000 random numbers between 0 and 100 (include 0, exclude 100) and compute the average.  \nPrint the average rounded to the nearest integer.\n</b></font>\n</p> \n<p>\nWe want to make sure the random numbers are floating point values (in other words, don't convert the output from the scaled Math.random to\ninteger).  We are not converting to integer until after the average is taken.\nNote that we are <b>rounding</b> the final average for output (not truncating).\n</p>\n<b>For thought:</b> given the uniform distribution, what do you think the average should be for a big pile of random numbers between 0 and 100?\n\n</p>","type":"twit","updatedAt":{"$date":"2018-03-01T21:04:54.877Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/rannum.ranavg.mp4"},{"_id":{"$oid":"5444a49216e2d09e7a7e0dcf"},"createdAt":{"$date":"2014-10-20T05:58:42.52Z"},"folder":"53cef2e94fae0fbd7f73123b","language":"javascript","maxSubmissions":"","name":"Overview","num":0,"onSubmit":"var soln_inputs = [ [] ];\nvar soln_outputs = [ [0.1] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                         ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Overview: Random numbers\n</b></font>\n</p> \n<P>\nRandom numbers are important mathematically for many problem solutions.  Statistical modeling depends on them to simulate the\nunpredictable behavior seen in physical systems that we study by writing computer programs -- we call such programs \"simulations\".  Programming languages contain the capability to generate\nrandom numbers when a program is executing.  In JavaScript, we use the function Math.random() to do this.\n</p>\n<p>\nMath.random will generate and return a single random number between 0 and 1.  It might return 0, but it will never return 1.\nRemember your interval notation from algebra? We write [0-1) for the range of the Math.random function, meaning it\nproduces a number x where 0 <= x < 1 .\n<p>\n<p>\nMath.random will return a different number every time it is called, but the value will always be in that range.  The numbers will be distributed uniformly (evenly) over that range, meaning the probability of getting any particular number with in the [0-1) range is the same as the probability or getting any other particular number.  \n</p>\n<p>\nIf you run a program that calls Math.random() many times, and graph the output with something like a bar chart, it will be flat (showing the uniformity)... it will NOT follow some other distribution shape such as a bell curve.\nIf you need a distribution other than uniform, you end up writing a program that uses Math.random but biases the output numbers as you need.\n</p>\n<p>\nType the following code into the Bricks editor window and execute it:\n<pre>\n\"use strict\";\n\nfunction myMain() {\n  var ranNum = Math.random();\n  alert(ranNum);\n}\n\nmyMain();\n</pre>\nRun this code several times locally to see how Math.random behaves.  Then submit it for score.","type":"twit","updatedAt":{"$date":"2018-03-01T21:04:39.099Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/rannum.overview.mp4"},{"_id":{"$oid":"5444a6ca16e2d09e7a7e0dd1"},"createdAt":{"$date":"2014-10-20T06:08:10.706Z"},"folder":"53cef2e94fae0fbd7f73123b","language":"javascript","maxSubmissions":"","name":"Alter upper end of range","num":1,"onSubmit":"var soln_inputs = [ [] ];\nvar soln_outputs = [ [5.0] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                         ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that will generate a single random number between 0 and 50 (but never quite being 50) and print it.\n</b></font>\n</p> \n<p>\nMath.random produces numbers in the range [0,1).  Here we need numbers in an expanded range [0,50), with the lower end still \nat 0. We want the distribution to remain uniform.  So to do this, we can simply generate a random number and multiply\nit by a factor that will expand the range upward.  The obvious factor (in this case) is 50.  All numbers generated \nby Math.random are then used as a percentage, telling how far into the range [0,50) to go to get the\nfinal random output.\n</p>\n<p>\nLet's reason about the range that results after this scaling.  Since Math.random might generate a 0, and since 0*50 is zero, the scaling might also generate 0 (as we wish).  Since Math.random with almost (but not quite) generate a 1, the scaling will generate (almost 1)*50, or almost but not quite 50 (as we wish).\n</p>\n<p>\nOne last comment... mathematically, we are talking about numbers with precision after the decimal point here (floating point, or real number values).  We are not trying to generate random integers in this program.  We will do that in later programs.\n</p>\n","type":"twit","updatedAt":{"$date":"2018-03-01T21:04:44.523Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/rannum.alterupper.mp4"},{"_id":{"$oid":"5444a94b16e2d09e7a7e0dd3"},"createdAt":{"$date":"2014-10-20T06:18:51.516Z"},"folder":"53cef2e94fae0fbd7f73123b","language":"javascript","maxSubmissions":"","name":"Random integers (and range change)","num":2,"onSubmit":"var soln_inputs = [ [] ];\nvar soln_outputs = [ [10,9] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                           ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that will generate a single random integer between 0 and 100 (including both) and print it. \nThen generate a single random integer between 5 and 25 (including both) and print it.\n</b></font>\n</p> \nThis problem illustrates two new capabilities: generating random <b>integers</b>, and <b>moving the lower range up from 0</b>. \n</p>\n<p>\nFor integers, we will use Math.floor to take a random real number and make it integer. Note the twist here... the integer range is [0,100], meaning we want to include the upper end (100). Since Math.random will never generate exactly 1, if we scale the range by multiplying by 100, we will never quite get 100 and then Math.floor will back that down to the integer 99. So if we want 100 as possible output, we must scale to (almost) 101 and let Math.floor truncate to 100.\n</p>\n<p>\nFor the second output, we note that we need to shift the range up 5 from 0. The high end of the range we want is 25, so if we generate a number between 0 and 20, then add 5 we get a range of 5 to 25. So we can scale the range by multiplying the output of Math.random, and we can shift the range by adding to the result of Math.random (or the result of Math.floor(scaled random).\n</p>\n","type":"twit","updatedAt":{"$date":"2018-03-01T21:04:49.927Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/rannum.ranint.mp4"},{"_id":{"$oid":"54470ca816e2d09e7a7e10c8"},"createdAt":{"$date":"2014-10-22T01:47:20.708Z"},"folder":"53cef2e24fae0fbd7f73123a","language":"javascript","maxSubmissions":"","name":"For loops for systematic access","num":2,"onSubmit":"var soln_inputs = [ [ ]  ];\nvar soln_outputs = [ [2,3,5,7,11,13,17,19,23,29] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 1) { fail.s(\"use one for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                   ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that will go through an array item-by-item, from the beginning, and print each element.\n</b></font>\n</p> \n<p>\nWe will create an array containing the first 10 prime numbers (with 2 being the first prime).\nDo this with a variable declaration and a <i>array literal</i> to initialize that variable.\n</p>\n<p>\nNeeding to access every element in an array, systemaically, is a very common and heavily used programming pattern.  We use a for loop to dom it, as we know the size of the array (we know\nexactly how many elements we need to access).  Inside the for loop body, we handle one element, and we use the loop index variable to designate which array slot number\nwe are dealing with each iteration.\n</p>\n<p>\nTo print the array elements, use a for loop that runs from 0 up to (but not including) the length\nof the array.  This means if the array length is 10, then the for loop runs from 0 to 9.\nHowever, we will use the length expression in loop control -- rather than the literal 9, or 10 -- since that is more general.\nThen in the loop body, we use the loop index variable as the expression in the subscript square brackets to get the value stored in the array slot.\n</p>","type":"twit","updatedAt":{"$date":"2018-03-01T21:03:58.036Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/arrays.sysaccess.mp4"},{"_id":{"$oid":"5447120816e2d09e7a7e10cf"},"createdAt":{"$date":"2014-10-22T02:10:16.032Z"},"folder":"53cef2e24fae0fbd7f73123a","language":"javascript","maxSubmissions":"","name":"Overview","num":0,"onSubmit":"var soln_inputs = [ [ ]  ];\nvar soln_outputs = [ [4, 7, \"smith\", -4.25, true, true, true, -29.75, -4.25, -4.25, 7 ] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                   ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Arrays: Organizing data\n</b></font>\n</p> \n<p>\nArrays are structured data, meaning a way to organize a collection of data so that the components\nmay be systematically accessed.\nIt also is an abstraction, meaning we can deal with the entire data collection as a unit (as well as access\nthe individual elements in the collection).\n</p>\n<p>\nWe can think of an array as a numbered collection of storage slots.  The numbers begin with 0, and go upwards by 1.  An array has a name, like a simple\nvariable, and is declared like a variable.  But unlike a simple variable, to store or retrieve a data value we must specify the slot number (called the \"index\").\nWith an array, we must keep separate the difference between the slot number and the data value stored in that slot.  Slot numbers are always integer (type number);\nthe data stored in the array slot itself can be any type (including an object, or even another array as we will see).\n</p>\n<p>\n<a target=\"blank\" href=\"http://www.unc.edu/~stotts/comp110/pix/arrayCar.jpeg\">\nHere is an array of cars</a> over at the Carolina Inn.  In slot 2 is a silver Volvo.  In slot 3 is a white Cadillac.  It's not difficult with physical cars to see the difference \nbetween the integer 2 (slot number) and a Volvo (\"data\" stored in the slot). There will be a bit more confusion when we want to store number data in array slots that\nare numbered. .\n</p>\n<p>\nWe can also think of an array as a row of mail boxes.  Each box has a number (address), and contents (the mail). We will have syntax in JavaScript to\nspecify the address, and different syntax to open the box at an address and put in (take out) the mail.  To open and use a mailbox (array slot) we\nput square brackets after the array variable name (like \" arr[ ... ] \" ).  To specify an address (slot number) we put an expression that evaluates to an integer\ninside the square brackets (like \" arr[ 5 ] \" or \" arr[ x+3 ] \" ).\n</p>\n<p>\nType in and execute this code (it is global code, that's ok here):\n<pre>\n\"use strict\";\n\nfunction myMain() {\n   var data = [ 7, \"smith\", -4.25, true ];\n   alert(data.length);  \n   alert(data[0]);\n   alert(data[1]);\n   alert(data[2]);\n   alert(data[3]);\n   alert(data[10-7]);\n   alert( data[10 - data[0] ] ) ;\n   alert(data[0] * data[2]);\n   alert(data[Math.sqrt(4)]);\n   var x = 2;\n   alert(data[x]);\n   var arr = data;  // copies the entire array as a whole\n   alert(arr[0]);\n}\n\nmyMain();\n</pre>\nTo know how many items are in an array, use the \"length\" property.  For the variable \"data\" above the \nexpression \"data.length\" tells how many items are stored in that array (in this case, 4 elements).\n</p>\n<p>\nTo access an array element we use an expression inside \"[\" \"]\" square brackets.\nThe expression must evaluate to a non-negative integer.\nIn this example we use mostly integer literals; in future programs we will use variable names, as well\nas more complex expressions like 2*x +1, etc.\n</p>\n<p>\nAlso, arrays subscripts (slots numbers) always begin with 0.  \nThis creates a bit of confusion until you are used to it, since\nthe first element in the array is at slot 0.  An array with 2 items in it will use subscripts 0 and 1.  Just\npay attention when you write code and think carefully about the expressions you use for subscripts.\nIn the example above, we see that arr has 4 elements and uses slot numbers 0 through 3.\n</p>","type":"twit","updatedAt":{"$date":"2018-03-01T21:03:46.096Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/arrays.overview.mp4"},{"_id":{"$oid":"5447224916e2d09e7a7e10d7"},"createdAt":{"$date":"2014-10-22T03:19:37.342Z"},"folder":"53cef2e24fae0fbd7f73123a","language":"javascript","maxSubmissions":"","name":"Average of primes","num":4,"onSubmit":"var soln_inputs = [ [ ]  ];\nvar soln_outputs = [ [12.9] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 1) { fail.s(\"use one for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                   ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that will print out the average of the first 10 primes (with 2 as first prime).\n</b></font>\n</p> \n<p>\nWe are going to use an array to do this.  As in an earlier problem, we will first\ncreate an array that contains the first 10 primes.\nThen we will systematically access every element in the array, from slot 0 to the last,\nand sum up all the values stored in the array.  This will be the same as an accumulator pattern we\nhave used many times before.\n</p>\n<p>\nOnce we have the sum, and the for loop ends, we compute the average by dividing the sum by the number of\nelements we summed up.  We will use the length of the array to divide (i.e.: we do not simply divide by the constant 10).\n</p>","type":"twit","updatedAt":{"$date":"2018-03-01T21:04:09.248Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/arrays.avgprimes.mp4"},{"_id":{"$oid":"5447254516e2d09e7a7e10db"},"createdAt":{"$date":"2014-10-22T03:32:21.042Z"},"folder":"53cef2e24fae0fbd7f73123a","language":"javascript","maxSubmissions":"","name":"Even numbers","num":3,"onSubmit":"var soln_inputs = [ [ ]  ];\nvar soln_outputs = [ [0, 2, 12, 398, 1996] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 1) { fail.s(\"use one for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                   ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that will put the first 1000 positive even numbers into an array, from smallest to largest (let's assume 0 is even\nand start with that). Print out selected elements when done.\n</b></font>\n</p> \n<p>\nWe saw that we can load up an array dynamically with input values given by the user.\nIn this program, we are going to compute values and store them one-by-one into successive array slots. \nWe will use a for loop to do the work, since we know we need to create and store 1000 data values.\nWe will use the loop index variable to tell us what slot number to store the even number into, and\nthe loop index variable will start at 0 and increment by 1 each iteration.\n</p>\n<p>\nWe will need a counter of some sort to generate the even numbers in order, and inside the body of the\nfor loop we will assign the current even number to the current array slot.  We will then compute the next even\nnumber.\n</p>\n<p>\nWhen done, print the first, second, seventh, 200th, and next-to-last elements\nfrom the array, one per alert statement.\n</p>","type":"twit","updatedAt":{"$date":"2018-03-01T21:04:03.124Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/arrays.evens.mp4"},{"_id":{"$oid":"5447297d16e2d09e7a7e10dd"},"createdAt":{"$date":"2014-10-22T03:50:21.429Z"},"folder":"53cef2e24fae0fbd7f73123a","language":"javascript","maxSubmissions":"","name":"User input saved to array","num":1,"onSubmit":"var soln_inputs = [ [100,5,-4,12,10,0], [5,0] ];\nvar soln_outputs = [ [5,100,10], [1,5,5] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF != 1) { fail.s(\"use one while loop\"); }\n    if (style.nFLAP != 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                   ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that will load user inputs into an array for internal storage; the user will signal end of input with a 0. Print the length of the array, the first array element, and the last array element with 3 separate alerts.\n</b></font>\n</p> \n<p>\nOne important use for arrays is the storage of input data so that we can access that data later in computation.\nIn this program we illustrate that technique.  The user has some numbers that out program needs to operate on, so we can get all those numbers first,\nand then access those inputs later by access the array slots they were stored into.\n</p>\n<p>\nWrite a program that will loop repeatedly (indefinite looping... use a while loop and we will make it an \"infinite\" loop with break-out) asking the user to input a number (no need to validate). \nAn input of 0 will end the loop. Store each number into an array in sequential slots. Do not store the terminating 0 into the array.\nSince this is a while loop, we will have to set up a counter to keep track of loop body executions.  We will used this counter as the array index indicator... the number of the array slot into which\nthe user input will be stored.  Since arrays start at index 0, we will start the counter at 0.\n</p>\n<p>\nWhen a user input is received, we must first check it for the 0 stop signal, and break out if we get that.\nIf the input is not the stop signal, we then assign the number to the array at the slot given by out counter.\nAfter that, we increment the counter (and the loop will repeat).\nNote that by checking for 0 first in the loop body, we do not end up assigning that 0 into an array slot.\n</p>\n<p>\nOnce we end the loop (break out on 0 input), we do the requested output.\nWe first print the length of the array; we use the length property that all arrays have to get that. If the user has given 12 inputs (let's assume the array variable is \"arr\") then\nthe expression \" arr.length \" will evaluate to 12.\nWe have to remember that array slot numbers start at 0; this means the 1st element stored in the array is found at slot 0, and the last element (by the same reasoning) is\nfound in slot \" arr.length-1 \".\n</p>","type":"twit","updatedAt":{"$date":"2018-03-01T21:03:51.33Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/arrays.userinput.mp4"},{"_id":{"$oid":"5447dc1264a365934bc46760"},"createdAt":{"$date":"2014-10-22T16:32:18.477Z"},"folder":"5447dac264a365934bc4675d","language":"javascript","maxSubmissions":"","name":"<b>DIY:</b> Random array 2","num":1,"onSubmit":"var soln_inputs = [ [] ];\nvar soln_outputs = [ [5,15] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL > 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP > 1) { fail.s(\"use no more than 1 for loops\"); }\n    //if (style.nAFD != 1) { fail.s(\"need at least 2 functions declared\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                  ","phase":1,"testMode":false,"text":"Write a program that creates an array and puts into it 7 integers randomly generated between 1 and 20 (make sure you can get 1 and 20 both). Use Math.random() to do this, but you will have to manipulate the random numbers it produces to get integers between 1 and 20. \n<br/><br/>\nPrint out the second element and the 6th element (separate alerts).","type":"diy","updatedAt":{"$date":"2018-03-27T15:35:32.06Z"},"value":{"correct":"2","style":"1"},"vidURL":""},{"_id":{"$oid":"544976c18afe161613542b75"},"createdAt":{"$date":"2014-10-23T21:44:33.08Z"},"folder":"544975e48afe161613542b74","language":"javascript","maxSubmissions":"","name":"Find largest element","num":1,"onSubmit":"var soln_inputs = [ [100,5,-4,12,10,0], [5,0], [-10,-5,-2,-3,-16,-77, 0], [-0.1,0.1,3.21,51.1,21.2,-6.6,9.0,0 ] ];\nvar soln_outputs = [ [\"value: 100\",\"slot: 0\"], [\"value: 5\",\"slot: 0\"], [\"value: -2\",\"slot: 2\"], [\"value: 51.1\",\"slot: 3\"] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }  \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL != 1) { fail.s(\"use one while loop\"); }\n    if (style.nAFL != 1) { fail.s(\"use only 1 for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                                 ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program to fill an array with numbers from the user (0 ends the input). \nAfter all inputs have been obtained and stored, find the largest element in the array and print out that value; in a separate alert, print out the slot number that the\nlargest value is stored in.\n</b></font>\n</p> \n<p>\nA while-loop is appropriate for filling the array with user inputs; this is an indeterminate situation, \nsince we do not know <i>a priori</i> how many data values the user will want to input.\nWe will not validate input data for this program; we will assume the user gives input that looks like valid numbers.\n</p>\n<p>\nTo find the largest element stored in the array after it is filled, we will need another loop to examine every element\nsystematically. This second loop is not nested in the body of the first one, but outside of it, and after it.\nA for-loop is appropriate for this second loop, since we know exactly how long the array is and we need to examine each element.\nWhen the user gives a 0 as input, signaling to stop, do not stored the 0 into the array.\n</p>\n<p>\nLooking for the largest uses a common programming pattern, one where we need to compute some quantity\nand must examine every array element in order to do so.  In this case, we want to find the value that\nis largest.  We are going to keep a separate variable to hold that value (much like an accumulator or counter is a separate variable).\nLet's call that variable \"biggestSoFar\" and we will think of it as holding the value that is (of the array elements examined so far) the largest.\nWe will start it with some very small number... something that will be exceeded by the very first array element we examine (the one in slot 0).\nThen we will compare the next element in the array to the largest, and everytime we find an array element that is\nlarger, we save the new \"biggest\" value.\n</p>\nWhen we have examined all array elements then \"biggestSoFar\" is biggest of all the array values.\n</p>\n<p>\nTo keep track of the slot number that the biggest value is stored in, we keep a second variable to hold an integer (like, say, \"slotNum\").  Everytime we\nfind a new \"biggest\", we copy the slot number it is stored in into the variable \"slotNum\".\n</p>\n<p>\n<b>Output format:</b> Let's say the user gives us an array of inputs and the largest number is 101, stored in array slot 7.  The output will look this way:\n<pre>\nvalue: 101\nslot: 7\n</pre>\n</p>","type":"twit","updatedAt":{"$date":"2018-03-27T15:33:23.228Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/arrSearch.findmax.mp4"},{"_id":{"$oid":"544977128afe161613542b76"},"createdAt":{"$date":"2014-10-23T21:45:54.097Z"},"folder":"544975e48afe161613542b74","language":"javascript","maxSubmissions":"","name":"Array contains element value","num":2,"onSubmit":"var soln_inputs = [ [100,5,-4,12,10,0,5], [5,0,3], [-10,-5,-2,-3,-16,0,-3] ];\nvar soln_outputs = [ [\"found it!\"], [\"nope, not there\"], [\"found it!\"] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL != 1) { fail.s(\"use one while loop\"); }\n    if (style.nAFL != 1) { fail.s(\"use only 1 for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                                    ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program to fill an array with numbers from the user (0 ends the input).\nThen ask the user for a single number.  No need to validate any of this input.  \nPrint \"found it!\" if the array contains this number and print \"nope, not there\" if it does not.\n</b></font>\n</p> \n<p>\n Build this one off the previous program.  The user input section that loads the array will be the same.\nWe will alter the for-loop that does the searching.  In particular, we will now ask the user for a single number (the \"target\" of our search), and then\nas we go through the for loop we will ask if each element we encounter is equal to the target.\n</p>\n<p>\nSearching large data collections (many hundreds of thousands of items) in this way can be inefficient.  There are better ways\nthan arrays to organize data collections for many problems.  These better organizations allow us to find items more rapidly by \nnot forcing us to examine every item in most cases.  As an example... if all the items in the array were in sorted order, and we were looking\nfor some specific number value (like, say, 100), then as soon as I came to an array item that was larger than 100, I would know that all the\nrest of the values are not the one i seek.  I could then end my search early, and announce \"nope, not there\" without looking at every element.\nThe study of how to organize, build, sort, and search data collection for efficient problem solution is what the \"Data Structures\" and \"Analysis\nof Algorithms\" classes in our curriculum are all about.  Once we learn some basic programming well, we then turn to learning efficient programming.\n</p>","type":"twit","updatedAt":{"$date":"2018-03-27T15:33:47.813Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/arrSearch.findeltval.mp4"},{"_id":{"$oid":"544977528afe161613542b77"},"createdAt":{"$date":"2014-10-23T21:46:58.771Z"},"folder":"544975e48afe161613542b74","language":"javascript","maxSubmissions":"","name":"Array of strings","num":3,"onSubmit":"var soln_inputs = [ [\"tar\",\"heels\",\"java\",\"unc\",\"campus\",\"done\"],  \n                    [\"alpha\",\"beta\",\"gamma\",\"zeta\",\"theta\",\"kappa\",\"iota\",\"done\"],\n                    [\"alpha\",\"beta\",\"gamma\",\"epsilon\",\"done\"]\n                  ];\nvar soln_outputs = [ [\"tar\",\"unc\"], [\"zeta\",\"theta\",\"kappa\"], [] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL != 1) { fail.s(\"use one while loop\"); }\n    if (style.nAFL != 1) { fail.s(\"use only 1 for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                                  ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that accepts words (input strings) from the user and stores each string into an array element.  An input of \"done\" will stop the input loop.\nAfter all input is received, print out all array elements that alphabetically come after the word \"javascript\".\n</b></font>\n</p> \n<p>\nIn this problem we will see that arrays can store string data as well as the numbers we have used up to now.\nActually, arrays can store objects as well, but they is for later programs.  Since we are on the topic of what we can store into an array slot, let me\nremind you that arrays do not have to be homogeneous.  Many -- perhaps most -- of our programs so far have been using arrays containing all number, for example.\nAn array can be heterogeneous -- it can contain a mix of data types as data values.  The array is the overview of the first array module was this way:\n<pre>\n   var data = [ 7, \"smith\", -4.25, true ] ;  // contains number, string, and boolean data values in one array\n</pre>\n</p>\n<p>\nNow, in this program, we will use a homogeneous array of string data. Your previous program is a good base to start with, and we will then alter it to deal with strings.\nThere is no real change needed in the indefinite while loop that gets user input, except we will not call function \"Number\" to convert the text input.\nWe request a single string from the user (the search target) and also do not covert that... we leave it as text data.\n</p>\n<p>\nThe main change we need is in the searching loop.  In the previous program, if we found the target we stopped looping, as all we needed to know was\nif the item was there or not.  In this search loop, we will not stop once we find a word that comes after \"javascript\"; rather we must keep on searching\nthe following array elements, to the end, as there can be more than one word that matches our search criterion.\nWe also will be using the \">\" operator to search, rather than equality.  We don't want a match for \"javascript\", we want to know if a word is beyond that\nin alphabetic order.  Each time we find a word that is beyond the target, we print that word.\n</p>","type":"twit","updatedAt":{"$date":"2018-03-27T15:34:07.832Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/arrSearch.strings.mp4"},{"_id":{"$oid":"544977e38afe161613542b79"},"createdAt":{"$date":"2014-10-23T21:49:23.725Z"},"folder":"544975e48afe161613542b74","language":"javascript","maxSubmissions":"","name":"Insert into order","num":4,"onSubmit":"var soln_inputs = [ [48], [1], [747], [21], [190], [291] ];\nvar soln_outputs = [ [12,0,20,30,48,50,70,110,130,170,190,230,290,1000,13], \n                     [12,0,1,20,30,50,70,110,130,170,190,230,290,1000,13],\n                     [12,0,20,30,50,70,110,130,170,190,230,290,747,1000,13],\n                     [12,0,20,21,30,50,70,110,130,170,190,230,290,1000,13],\n                     [12,0,20,30,50,70,110,130,170,190,190,230,290,1000,13],\n                     [12,0,20,30,50,70,110,130,170,190,230,290,291,1000,13]\n                   ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 3) { fail.s(\"use 3 for loops\"); }\n    if (style.nNFLF != 0) { fail.s(\"no need to have nested for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker); ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that will nsert a new element (input from the user) into an array of values that are in numerical order (smallest to largest).\nThe program will move array elements around, to make room for a new element to be placed in the proper place in the ordered sequence.  See details following.\n</b></font>\n</p> \n<p>\nCommonly, when using arrays, we will need to move values stored in array slots around, from one slot to another.\nWe do this, for example, when sorting elements into order.  We start out with the elements in one order, and end up shuffling the values\naround from slot to slot until we get a new order that meets our criteria.\n</p>\n<p>\nIn this program, we are seeing how this is done.  We start with an array containing some numbers in order, and we get a new number from the user.\nWe then will look at each item stored in the array to find the two array elements that the\nnew number belongs between (in numeric order).  We \"slide\" the remaining array elements to higher slots, opening up a \"hole\" in the array\nso there is then a slot that is free... so there is room to put the new number into the array in proper order.\n</p>\n<p>\nEver been to concert, and someone shows up at your row and the person next to you says \"can you all move down one so this person can sit here next to me\" ?\nWell that is what we are doing here... with array slots being like seats in the row.\n</p>\n<p>\n<b>Detailed specifications:</b> Write a program that declares an array and initializes it with 0, 20, 30, 50, 70, 110, 130, 170, 190,\n230, and 290 (the first 10 primes * 10); also put in 1000 as the last element. \nPrint the length of the array.\n</p>\n<p>\nThen ask the user to input a positive number that is less that 1000 (no need to validate). Insert the number into the array at the proper location so that all current elements remain in the array and the small-to-large order is maintained. \n</p>\n<p>\nWhen done print all elements in the array from slot 0 up, one alert per element.\nThen print the length of the array.\n</p>\n<p>\nTo do this you will need to pass through the array comparing the elements in the slots\nto the number the user gave.  When you find two slot numbers that have elements \nthat straddle the value being inserted, you will have to \"shove up\" the elements \nin the higher end of the array.  This means moving the last element to a slot one higher, then\nmoving the next-to-last into the slot that was the last, etc.\n</p>\n</p>\nNote that by printing the length of the array, before and after, you see that inserting the new element makes the array longer by one.\n<p>","type":"twit","updatedAt":{"$date":"2018-03-27T15:34:18.554Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/arrSearch.insert.mp4"},{"_id":{"$oid":"544989018afe161613542b7b"},"createdAt":{"$date":"2014-10-23T23:02:25.898Z"},"folder":"53cef3104fae0fbd7f73123d","language":"javascript","maxSubmissions":"","name":"<b>DIY:</b> Athlete object","num":6,"onSubmit":"var soln_inputs = [ [\"smith\",\"basketball\",3,10,13.5,\"guard\"], \n                    [\"jones\", \"soccer\", 4, 8, 0.5, \"wing\"] \n                  ];\nvar soln_outputs = [ [\"smith: 135 total points scored in basketball\"], \n                     [\"jones: 4 total points scored in soccer\"] \n                   ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 0) { fail.s(\"use no for loops\"); }\n  }\n\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);       ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that will create an object to represent a student athlete.  It will store name, year, sport, games played, and point averages information.\nUse the object to compute and print out how many points total the student has scored.\n</b></font>\n</p> \n<p>\nWrite a program that will make an object to represent a student athlete.  No need to validate\nthe user input in this program. The program should have a myMain function, and that's all. We are concentrating on learning object declaration and usage syntax (in the next problem we will have a second function, an object constructor).\n</p>\n<p>\nIn myMain, first ask the user to input the name of the student (a string); store the input in the object field \"name\".\nNext ask the student to input the sport played (a string); store this input in the object field \"sport\".\nNext ask the user to input the year in school (integer 1-5); store the input in the object field \"year\".\nNext ask the user to input the number of games played (integer >= 0); store the input in the object field \"games\".\nNext ask the user to input the scoring average (number >=0); store the input in the object field \"avg\".\nFinally ask the user to input position played (a string); store the input in field \"role\".\n</p>\n<p>\nOnce the input is done, print the the students name, a colon, and the total points scored, and the sport name.\ntotal points is computed by accessing the \"games\" field and multiplying by the scoring average.\nUse one alert statement, and make the output look like this example:\n<pre>\nsmith: 45 total points scored in soccer\n</pre>\n</p>\n<p>\n<b>Style:</b>\nUse myMain format, and this program will make and use a single object.\n</p>","type":"diy","updatedAt":{"$date":"2018-02-19T13:25:31.912Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"54498fea8afe161613542b7e"},"createdAt":{"$date":"2014-10-23T23:31:54.601Z"},"folder":"53cef3104fae0fbd7f73123d","language":"javascript","maxSubmissions":"","name":"<b>DIY:</b> Construct athlete objects","num":7,"onSubmit":"var soln_inputs = [ [\"smith\",\"basketball\",3,10,13.5,\"guard\", \n                     \"jones\", \"soccer\", 4, 8, 0.5, \"wing\",\n                     \"miller\",\"football\", 2, 10, 3.2, \"end\"]\n                  ];\nvar soln_outputs = [ [\"smith: 135 total points scored in basketball\", \n                      \"jones: 4 total points scored in soccer\",\n                      \"miller: 32 total points scored in football\"] \n                   ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);       ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that will call an object constructor to make 3 instances of the athlete object from the last program.\n</b></font>\n</p> \n<p>\nIn this program we will see how a function can be used to create and return (manufacture) an object.  A function that manufactures\nobjects is called a \"constructor\".\n</p>\n<p>\nWrite a program that has two functions: myMain (with no arguments) and makeAthleteObject (with no arguments). In function makeAthleteObject you will first create an object from user input as in the previous problem.  No need to validate the user input.  When the fields of the new object are filled, makeAthleteObject \nwill return the object back to myMain.\n</p>\n<p>\nIn myMain call the makeAthleteObject function 3 times, and each time put the returned object into a new different variable.\nWhen that is done, print out the total score for each athlete using the format we used before (see below). Use a separate alert statement for each object. \nPrint each person in the order they were created by the user.\n</p>\n<p>\nMake the output look like this:\n<pre>\nsmith: 45 total points scored in football\n</pre>\n</p>\n<p>\n<b>Style:</b>\nUse myMain format.  Note that the code from myMain in the last assignment (code that makes the object and gets information from the\nuser for the object fields) can be used as much of the body for the makeAthleteObject function in this program.  The myMain in\nthis program will call makeAthleteObject 3 times and save the objects sent back in 3 different variables.\nYou could do this by a for loop that runs 3 times; then in the loop body the object returned from the constructor call \nis immediately used to compute the points output.  However doing it with a loop will not preserve the 3 objects (representing\n3 different athletes).  \n</p>","type":"diy","updatedAt":{"$date":"2018-02-19T13:25:41.187Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"544a3ed88afe161613542b90"},"createdAt":{"$date":"2014-10-24T11:58:16.473Z"},"folder":"53cef2e24fae0fbd7f73123a","language":"javascript","maxSubmissions":"","name":"<b>DIY:</b> Array fizzbuzz","num":6,"onSubmit":"var soln_inputs = [ [ ]  ];\nvar soln_outputs = [ [\"fizz\", \"buzz\", 17, \"fizzbuzz\"] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 1) { fail.s(\"use one for loop\"); }\n    if (style.nDA < 1) { fail.s(\"declare and use an array\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                              ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Arrays: Organizing data\n</b></font>\n</p> \n<p>\nWrite a program to do the FizzBuzz problem (a former brick).  It is in the while loop section, but this time use a for loop to compute it.\nAlso this time, instead of printing out the numbers and \"fizz\" etc., put the values into an array.  Make an array of 31 items (slots 0 to 30).\nLet's also just put 0 into slot 0 so we dont have to worry about if 0 is a multiple of 3 or 5.  \nThen go from slot 1 on up and put either the number into the array location (if it is not a multiple\nof 3 or 5), or put the appropriate \"fizz\", \"buzz\", or \"fizzbuzz\" into the array location.\n</p>\n<p>\nWhen done, print out the 4th, 11th, 18th, and last elements (each with a separate alert).\n</p>\n","type":"diy","updatedAt":{"$date":"2018-03-01T21:04:19.559Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"544a421c8afe161613542b93"},"createdAt":{"$date":"2014-10-24T12:12:12.242Z"},"folder":"53cef2e24fae0fbd7f73123a","language":"javascript","maxSubmissions":"","name":"<b>DIY:</b> Lookup table","num":5,"onSubmit":"var soln_inputs = [ [ ] ];\nvar soln_outputs = [ [4.75682846, 21.8271672516, 137.1085570693, 177.6945533698] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 1) { fail.s(\"use one for loop\"); }\n    if (style.nDA < 1) { fail.s(\"declare an array\"); }\n    //if (style.nAU < 1) { fail.s(\"use an array\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                              ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program to create an array that has 1001 slots (index 0 to 1000) .  In each array slot store the value of a function (defined following)\ncomputed on the number that is the slot number. Using your completed array, print (in separate alerts)\nthe value in slot 8, the value in slot 61, the value in slot 707, and the value in slot 999.\n</b></font>\n</p> \n<p>\nThis program is similar to the VID brick we did called \"Even numbers\".\nHere we want to be able to store values for 0 to 1000, so the array has to contain 1001 elements (slots 0 to 1000).\nAs we go systematically through the array from slot 0 to slot 1000, for each slot i we compute the function and then store that result\ninto the array at slot i.\n</p>\n<p>\n<b>The function:</b> For each slot number n, compute n cubed, then take the 4th root of that, and then truncate the result to 10 decimal places.\nFor example, in array slot 5, we will store this:\n<pre>\ntrunc10 ( Math.pow( 5*5*5, 0.25 ) )     which is 3.343701524\n</pre>\nwhere trunc10 is a function you write that truncates a number to 10 decimal places. Math.pow ( num, 0.25 ) takes the 4th root (raises num to the 1/4th power), \nand the 4th root is also the same as taking the square root twice in succession.\n</p>\n<p>\nThis kind of data structure, and usage, is often called a <b>lookup table</b>.  The specific function we are computing here\n(4th root of a number cubed) is not particularly difficult, but some functions can be complicated to compute (expensive in time \nor memory used) so when we know we will need to compute those values a lot, it can be more efficient to compute a range of them\nin advance and same the values in an array, where they can be looked up very quickly (more quickly that it would take to re-compute the\nfunction).\nLookup tables are used in  CPU chip in your computer, for example, to make floating point arithmetic faster.\n</p>\n","type":"diy","updatedAt":{"$date":"2018-03-01T21:04:14.466Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"54503bb68afe16161354323f"},"createdAt":{"$date":"2014-10-29T00:58:30.442Z"},"folder":"5447dac264a365934bc4675d","language":"javascript","maxSubmissions":"","name":"<b>DIY:</b> Bubble Sort","num":0,"onSubmit":"var soln_inputs = [ [12,3,7,-5,21,101,-6.5,43,77.7,0.05,0],\n                    [-2,-2,-1,0.3,0.3,1,1,1,2,3,0],\n                    [10,9,8,7,6,5,4,3,2,1,0],\n                    [100,50,-4.444,0]\n                  ];\nvar soln_outputs = [ [-6.5,-5,0.05,3,7,12,21,43,77.7,101],\n                     [-2,-2,-1,0.3,0.3,1,1,1,2,3],\n                     [1,2,3,4,5,6,7,8,9,10],\n                     [-4.444,50,100]\n                   ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLAP > 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP > 4) { fail.s(\"use no more than 3 for loops\"); }\n    if (style.nAFD < 3) { fail.s(\"need at least 3 functions declared\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                   ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\nUsing Bubble Up (which you wrote in a previous module), implement Bubble Sort\n<b>\n</b></font>\n</p> \n<p>\nSorting is a very import category of algorithm, and bubble sort is an\neasy one to program.  However, bubble sort is very inefficient and is used almost exclusively as a programming\nexercise.  On large problems, bubble sort takes far too much time to be practical.\n<br/><br/>\nWe wrote \"Bubble Up\" in a previous module. It takes the largest element in an array\nand moves it to the highest slot.  If we were to do Bubble Up a second time on that array, we\nwould get the second largest element moved up to the next-to-last slot.  A third time would move\nthe next largest element up, etc.\n<br/><br/>\nSo make a function called bubbleSort that will be passed an array of numbers.  \nInside bubbleSort repeatedly call your bubbleUp function from the previous problem.\nYou will call bubbleUp once for each element in the array (minus one, because bubbleUp \nlooks at an element, and compares that to its neighbor one slot further along).\nThe function bubbleSort will return the array when it is all \"bubble up'ed\".\n<br/><br/>\nWrite the myMain function to do close to what the previous problem did... ask the user to input numbers (0 ends input) and\nstore them in an array.\nNo need to print anything at this point.\nThen call the bubbleSort function and pass in that array as a parameter.\nCapture the array that is returned and print all the elements in it, one \nat a time with separate alerts.\n<br/><br/>\nWhen done you will have 3 functions: myMain, bubbleUp, and bubbleSort.","type":"diy","updatedAt":{"$date":"2018-03-27T15:35:26.608Z"},"value":{"correct":"3","style":"1"},"vidURL":""},{"_id":{"$oid":"545049a28afe16161354324b"},"createdAt":{"$date":"2014-10-29T01:57:54.491Z"},"folder":"5902b4167bb0b09c0d2a6422","language":"javascript","maxSubmissions":"","name":"Array of objects","num":12,"onSubmit":"var soln_inputs = [ [ 123,\"smith\",10,20,\n                      \"yes\",234,\"jones\",20,30,\n                      \"yes\",345,\"miller\",20,25,\"no\" ] ];\nvar soln_outputs = [ [3, \"total payroll: 1300\", \"high rate: jones\"] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL < 1) { fail.s(\"use at least one while loop\"); }\n    if (style.nFLAP < 2) { fail.s(\"use 2 for loops\"); }\n    if (style.nAFD < 2) { fail.s(\"need at least 2 functions declared\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                        ","phase":1,"testMode":true,"text":"<p>\n<font color=firebrick>\n<b>Let's build and use an array of objects.\n</b></font>\n</p> \n<p>\nWe will start with the code from \"Construct person object\" from the \"Basic Objects\" folder.\nThis gives us the myMain function as well as a constructor function \"makePersonObject\" that\nmanufactures and returns objects after populating them with user input.\n</p>\n<p>\nIn myMain before we created 3 separate variables to store 3 objects.  This means the code works for exactly 3 persons, and if the user\nhad more (or less) to work with the code would have to be re-written (a little bit re-written).\n</p>\n<p>\nIn this new program we will make a loop and keep making objects until the user says we\nare done.  Each new object made an returned by the constructor will be stored in an array (in much the same way\nwe have created and used an array to store number input by the user in other programs).\nIn the loop, first call makePersonObject to manufacture a person object; store the object\nthat is returned in the next open array slot.  Then ask the user if another object needs to be made.\nIf the reply is \"no\" then we will break to end the input loop.  Any other reply will cause the \nloop to repeat and make another object.\n</p>\n<p>\nOnce the input loop is done and the array if filled with objects, we will use the objects to\ncompute some information. First, print the length of the array (which is the number of objects stored in the array).\nNext, compute the total payroll. To do this, go through the array and sum up all the amounts\npaid to each worker.  Print this out with this format: \"total payroll: 1234.56\"\n</p>\n<p>\nThen go through the array and find the name of the person with the highest hourly pay rate.\nPrint out the name in this format: \"high rate: smith\".\n</p>","type":"twit","updatedAt":{"$date":"2018-01-05T18:59:04.561Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"54505e1c8afe161613543269"},"createdAt":{"$date":"2014-10-29T03:25:16.825Z"},"folder":"544975e48afe161613542b74","language":"javascript","maxSubmissions":"","name":"<b>DIY:</b> Find string in array","num":5,"onSubmit":"var soln_inputs = [ \n  [\"alpha\",\"beta\",\"delta\",\"beta\",\"gamma\",\"zeta\",\"alpha\",\"epsilon\",\"done\",\"eta\"],  \n  [\"alpha\",\"beta\",\"delta\",\"beta\",\"gamma\",\"zeta\",\"alpha\",\"epsilon\",\"done\",\"zeta\"],  \n  [\"alpha\",\"beta\",\"delta\",\"beta\",\"gamma\",\"zeta\",\"alpha\",\"epsilon\",\"done\",\"beta\"],  \n  [\"alpha\",\"beta\",\"delta\",\"beta\",\"gamma\",\"zeta\",\"alpha\",\"epsilon\",\"alpha\",\"done\",\"alpha\"] \n                  ];\nvar soln_outputs = [ [0],[1],[2],[3] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL != 1) { fail.s(\"use 1 while loop\"); }\n    if (style.nFLAP != 1) { fail.s(\"use 1 for loop\"); }\n    //if (style.nNFLF != 1) { fail.s(\"need a nested for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                  ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that will build an array of strings from user input, and then count how many times a particular string appears\nin the array.  See details following.\n</b></font>\n</p> \n<p>\n<b>Detailed specifications:</b> Write a program to fill an array with words (strings) from the user (\"done\" ends the input). \nThe user is free to give a particular string more than once.\n</p>\n<p>\nThen ask the user for a single string.  No need to validate any of this input. \nSearch through the array and count how many times the words occurs.\nPrint this count.  Note that if the word is not in the array, the program will print 0.\n</p>","type":"diy","updatedAt":{"$date":"2018-03-27T15:34:34.209Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"545c37ac8afe1616135443a7"},"createdAt":{"$date":"2014-11-07T03:08:28.499Z"},"folder":"5902b4167bb0b09c0d2a6422","language":"javascript","maxSubmissions":"","name":"<b>EXAM:</b> (paired) Arrays and objects","num":18,"onSubmit":"var soln_inputs = [ \n      [ 123,\"smith\",10,20,\n        \"yes\",234,\"jones\",20,30,\n        \"yes\",345,\"miller\",20,25,\"no\" ],\n      [ 123,\"smith\",45,50,\n        \"yes\",234,\"jones\",30,60,\n        \"yes\",345,\"miller\",40,70,\"no\" ]\n];\nvar soln_outputs = [\n      [\"total payroll: 1300\",\"high rate: jones\", \"total tax: 78\" ],\n      [\"total payroll: 6975\",\"high rate: miller\", \"total tax: 577.5\" ]\n];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); }\n     }\n  }\n  if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n  if (style.nAWL > 1 ) { fail.s(\"Use only one while loops\"); }\n  if (style.nAFL > 3) { fail.s(\"We dont need more than 3 for loops\"); }\n  if (style.nTFD < 2) { fail.s(\"We need at least 2 functions declared and used\"); }\n  if (style.nBGD >0 || style.nBGU >0) { fail.s(\"dont use global variables\"); }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker); ","phase":1,"testMode":true,"text":"(4-1 pts) Start with the code from \"Method (function) in an object\".\n<br/><br/>\nFirst, add another data field to the person object.\nCall this field \"ot_hours\". This will be overtime hours worked.   You will have to alter the code in the constructor function\nti fill this field with a value.  If the user gives a number of hours that is greater than 40, then make\nhours be 40 and ot_hours the rest.  If the user gives a number of hours that is 40 or less, make ot_hours be 0.\n<br/><br/>\nWhen computing total pay, overtime hours earn 1.5 times the pay rate.\nYou will have to alter the \"pay\" method to properly compute and return  the correct total pay based on both normal\nhours and overtime hours.\n<br/<br/>\nFinally, add another method to the person object.\nThis method will be called \"taxes\" and will return the amount of income tax that the user will have withheld.\nThis amount will be 6% of the first $1000 of total pay, and 10% of total pay that is over $1000.\n<br/><br/>\nBack in myMain, print a 3rd item, the total taxes withheld.  This will be similar to the total payroll, except you will\nsum up the tax from each person.  Print it with this format: \"total tax: 234\"","type":"exam","updatedAt":{"$date":"2018-01-05T18:59:04.571Z"},"value":{"correct":"4","style":"1"},"vidURL":""},{"_id":{"$oid":"546044f9bcc28de248a902fd"},"createdAt":{"$date":"2014-11-10T04:54:17.456Z"},"folder":"5902b4167bb0b09c0d2a6422","language":"javascript","maxSubmissions":"","name":"<b>DIY:</b> makePersonObject 2","num":22,"onSubmit":"var soln_inputs = [ [ 123,\"smith\",10,20,\n                      \"yes\",234,\"jones\",20,30,\n                      \"yes\",345,\"miller\",20,25,\"no\" ] ];\nvar soln_outputs = [ [\"total payroll: 1300\",\"high rate: jones\"] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL != 1) { fail.s(\"use 1 while loop\"); }\n    if (style.nFLAP != 2) { fail.s(\"use 2 for loop\"); }\n    if (style.nAFD < 2) { fail.s(\"need at least 2 function declared\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                   ","phase":2,"testMode":true,"text":"Let's modify the previous program \"array of objects\". We will keep the same basic data and computed results, but we will change the structure of the two functions a bit. We are going to move the user input out of makePersonObject and relocate it to myMain. The values from the user will be passed to makePersonObject as arguments (4 arguments); then in makePersonObject the values of the arguments will be put into the fields when the object is manufactured. As before, makePersonObject will return the new object and in myMain that object will be put into an array. \n<br/><br/>\nOutput should be the same as before.  \nFirst, compute the total payroll. To do this, go through the array and sum up all the amounts\npaid to each worker.  Print this out with this format: \"total payroll: 1234.56\"\n<br/><br/>\nThen go through the array and find the name of the person with the highest hourly pay rate.\nPrint out the name in this format: \"high rate: smith\"","type":"diy","updatedAt":{"$date":"2018-01-05T18:59:04.577Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"54604df3bcc28de248a902ff"},"createdAt":{"$date":"2014-11-10T05:32:35.419Z"},"folder":"54603ea9bcc28de248a902fc","language":"javascript","maxSubmissions":"","name":"Anonymous function (bind to global var)","num":1,"onSubmit":"var soln_inputs = [ [] ];\nvar soln_outputs = [ [10] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 0) { fail.s(\"use no for loop\"); }\n    if (style.nAFD != 2) { fail.s(\"need 2 functions declared\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                   ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that creates a function value that is not bound to a name, and then bind that anonymous function value to a global name.\n</b></font>\n</p> \n<p>\nA function value with no name bound to it is called \"anonymous\".  An anonymous function can still be defined and later bound to a name (saved for later execution).\nIn this problem we illustrate function as first class values by creating a function with no name (an anonymous function)\nand then \"binding\" that function value to a name with \"=\" assignment.\n</p>\nTo create an anonymous function value, we use the \"function\" keyword as we are accustomed to doing, but we do not put a name\nafter the keyword.  We do create an argument list (in parentheses) and the code body (in curly braces).\nIt is identical to defining a named function except we do not give it a name.\nHere is an example (using the code from the previously defined named function \"double\"):\n<pre>\nfunction ( n ) {  return 2*n; }\n</pre>\nAgain, this is a function value... it is the same thing for type \"function\" as writing the number value \"5\" is for type \"number\".\nIt is valid JavaScript, and we must now decide what we wish to do with this value.  In this program we will take that\nfunction value, and bind it to a global name using assignment.  In the next program, we will see how to execute that\nfunction value without ever naming it.\n</p>\n<p>\n<b>Details.</b> First at the global level create an anonymous function value using the previous code for \"double\" with one argument (as shown\nin the previous pre-format box).  Assign that anonymous function to the global variable \"double\" using assignment.\nThen define the global function (myMain) as we usually do.  Inside myMain, call double(5) and print the returned result.\n</p>\n<p>\n<b>Notes.</b> This program illustrates that the \"normal\" way of defining functions -- using the \"function\" keyword and a name for the function --\nis actually a shorthand notation for doing what we are doing here... creating a nameless function value, and then binding it to a global name.\nBinding it to a global name is what makes us able to run the function from within our other functions.\nAlso, we must be careful to get our code in the right order.  Since we are explicitly creating a global variable (the name for the function) we\nmust do that declaration and binding <b>before</b> we call myMain.  If we do not, when myMain runs and tried to call the function bound to \nthe name \"double\", that global variable will not yet have been declared.  So do things in this order: \n<ol>\n<li> declare the global variable \"double\" and assign a function to it  </li>\n<li> declare function myMain , that calls \"double\"</li>\n<li> call myMain to kick it all off </li>\n</ol>\n</p>\n<p>\n<b>Relevance to objects.</b>\nWe will be (in the next module) putting functions inside objects (we call them \"methods\" for historical reasons).  \nTo put a function into an object, we will be using this form of definition... creating an anonymous function value and then\nbinding it to a field name inside the object.\n</p>\n\n","type":"twit","updatedAt":{"$date":"2018-03-20T13:08:24.123Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/advFunc.anonBind.mp4"},{"_id":{"$oid":"54604ef0bcc28de248a90300"},"createdAt":{"$date":"2014-11-10T05:36:48.86Z"},"folder":"54603ea9bcc28de248a902fc","language":"javascript","maxSubmissions":"","name":"Anonymous function (execute w/o name)","num":2,"onSubmit":"var soln_inputs = [ [] ];\nvar soln_outputs = [ [10] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    //if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 0) { fail.s(\"use no for loop\"); }\n    //if (style.nAFD != 1) { fail.s(\"need 1 function declared\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                   ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that creates a function value that is not bound to a name, and then executes that anonymous function.\n</b></font>\n</p> \n<p>\nIn this problem we illustrate function as first class values by creating a function with no name (an anonymous function)\nand executing it without binding it to a name.  This is advanced capability of JavaScript, and we are just doing it here to make\nyou familiar with the fact that is can be done.  We will not be using this capability in future program in this course.\nIn professional JavaScript programs, such as code for large websites, this \ntechnique is used a great deal.  It is also a characteristic of languages that are called \n\"functional languages\".\n</p>\n<p>\nFor this program, we wont even need a myMain function.\nAt the global level create an anonymous function value (using the previous code for \"double\" with one argument).\nAfter defining the value, supply an argument of 5 to it and execute it.  \nPrint the returned result.\n</p>\n<p>\n<b>Details.</b>\nWhat syntax shall we use to cause a function with no name to execute?  And how shall we pass it the argument 5 ?\nLet's consider how we call a named function.\nFirst we write the name, then we put the argument(s) in parentheses after the name.  For example, to run the \"double\" function we did this:\n<pre>\nvar result = double ( 5 );\n</pre>\nWhat actually happens in this case is the function value bound to the name \"double\" is retrieved and executed on the arguments in the parenthesized list.\n</p>\n<p>\nWhen we have the function value directly, we have no need to evaluate a name to find it.  So we will just write out the value, and put a parenthesized list after the\nfunction value.  That will make the function value execute on the arguments in the parenthesized list:\n<pre>\nvar result = ( function ( n ) { return 2*n; } ) ( 5 ) ;\n</pre>\nThen the variable \"result\" will contain the value returned by the execution of the function on the argument 5; that is, the variable result will contain 10.\nWe can then alert the value stored in \"result\" .\n</p>","type":"twit","updatedAt":{"$date":"2018-03-20T13:08:29.766Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/advFunc.anonExec.mp4"},{"_id":{"$oid":"5462c122bcc28de248a90670"},"createdAt":{"$date":"2014-11-12T02:08:34.239Z"},"folder":"5902b4167bb0b09c0d2a6422","language":"javascript","maxSubmissions":"","name":"Parsing input strings","num":17,"onSubmit":"var soln_inputs = [[\"Time flied like an arrow\"] ];\nvar soln_outputs = [ [\"Time\",\"arrow\"] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 0) { fail.s(\"use no for loops\"); }\n    if (style.nAFD != 1) { fail.s(\"need only 1 function declared\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}  \n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                       ","phase":2,"testMode":true,"text":"In this program we will take a (long) input string and break it apart into several substrings.\nWe call this parsing.  \n<br/><br/>\nWrite a program that will ask the user for an input string (format shown below).\nThen parse the string into substrings using the character \" \" (blank) as the separator.\nPut each substring into a slot in an array.\nPrint out the first substring and the last\n<br/><br/>\nTo parse a string into substrings we will use the \"split\" methods (function) that is supplied with JavaScript strings.\nThe split function is passed as a parameter the character to use as separator.\nIt returns an array of strings.  The separator character is not put into any substring; it is effectively taken out and \nthe characters after the separator (up to the next separator or end) comprise the substring.\n<br/><br/>\nThe input from the user will be a standard English sentence, with words separated by blanks.  For example:\n<pre>\nTime flies like an arrow\n</pre>\nWhen this is parsed using the \" \" as separator, you get this array of substrings:\n<pre>\narr[0]: Time\narr[1]: flies\narr[2]: like\narr[3]: an\narr[4]: arrow\n</pre>\nYour program would then print \"TIme\" and \"arrow\" as the first and last substrings","type":"twit","updatedAt":{"$date":"2018-01-05T18:59:04.569Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"5462c671bcc28de248a90677"},"createdAt":{"$date":"2014-11-12T02:31:13.733Z"},"folder":"5902b4167bb0b09c0d2a6422","language":"javascript","maxSubmissions":"","name":"Parsing input strings 2","num":21,"onSubmit":"var soln_inputs = [[\"Time-flies-like-an-arrow go-heels-beat-Duke we-love-that-JavaScript\"] ];\nvar soln_outputs = [ [\"Time\",\"arrow\",\"go\",\"Duke\",\"we\",\"JavaScript\"] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 1) { fail.s(\"use 1 for loop\"); }\n    if (style.nAFD != 1) { fail.s(\"need only 1 function declared\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}  \n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                       ","phase":2,"testMode":true,"text":"Let's take one step beyond the last parsing program.\nIn this one, we first parse the user's input string as we did (using \" \" as the separator).\nThis gives us an array of substrings.\n<br/><br/>\nNow we will parse each substring, further dividing the input into parts.\nUse the \"-\" hyphen character as separator this time.\nThis will give you an array of the strings between the hyphen.\n<br/><br/>\nFor each of the top level parsed strings (the ones separated by blanks)\nprint the first and last hyphen-separated substrings.\n<br/><br/>\nExample of the input:\n<pre>\nyesterday-is-history tomorrow-is-a-mystery today-is-a-gift\n</pre>\nThis will give this array:\n<pre>\narr[0]: yesterday-is-history\narr[1]: tomorrow-is-a-mystery\narr[2]: today-is-a-gift\n</pre>\nWhen we parse the first line we get this array:\n<pre>\nbrr[0]: yesterday\nbrr[1]: is\nbrr[2]: history\n</pre>\nWe print \"yesterday\" and \"history\" as the first and last, and go on to parse arr[1], etc.","type":"twit","updatedAt":{"$date":"2018-01-05T18:59:04.576Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"54695d91df2fd92268b7e6b8"},"createdAt":{"$date":"2014-11-17T02:29:37.134Z"},"folder":"53cef35d4fae0fbd7f73123f","language":"javascript","maxSubmissions":"","name":"Factorial","num":1,"onSubmit":"var soln_inputs = [ [3], [4], [5] ];\nvar soln_outputs = [ [6], [24], [120] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL > 0) { fail.s(\"use no  while loops\"); }\n    if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n    if (style.nAFD < 2) { fail.s(\"need at least 2 functions declared\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                 ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that uses a recursive function to compute and print out the factorial of a positive integer N.\n</b></font>\n</p> \n<p>\nAs noted in the overview, recursion is a very useful programming technique in which a function calls itself (re-cursion means re-occurring).\nA function that calls itself is called a <i>recursive function</i>.\n</p>\n<p>\nEarlier we computed the factorial of a number by looping and using an accumulator.\nNow we will solve the same problem recursively.\nTo do this we remember the definition of factorial from math class:\n<pre>\nN!  is  N * (N-1) * (N-2) * ... * (3) * (2) * (1)\n\nnote that (N-1) * (N-2) * ... (3) * (2) * (1)   by this pattern is (N-1)!\n\nso N!  =  N * (N-1)!\n</pre>\nSo a function to compute N! can call itself to compute (N-1)! and then multiply the result by N to get N!\n</p>\n<p>\nWe will use the math equation for factorial as a guide to writing the code.\nFor a base case, we will use factorial of 1... which is defined to be 1.  The base case will test the parameter for value 1, and simply return 1.\nThen the recursive case will be for all other values of the parameter, and it will call factorial recursively, a pass in the parameter less 1 (a smaller number to compute factorial of).\nWhen that returns, the result is multiplied by the parameter and returned.\n</p>\n<p>\nWrite a myMain function that will ask the user to input an integer larger than 0 (no need to validate) and will then print out the result of calling the recursive factorial \nfunction on that integer.\n</p>\n<p>\n<b>Computer Science notes:</b>\nWe are not validating user input... but what might happen if the user in not cooperative?\nFor instance, what will happen if the user gives the integer 0 as input?\nTry mentally executing the code on 0... then try running it with 0 as input.\n</p>","type":"twit","updatedAt":{"$date":"2018-04-03T01:28:39.1Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/recur.factorial.mp4"},{"_id":{"$oid":"54696975df2fd92268b7e6c1"},"createdAt":{"$date":"2014-11-17T03:20:21.889Z"},"folder":"53cef35d4fae0fbd7f73123f","language":"javascript","maxSubmissions":"","name":"<b>DIY:</b> summing number sequence","num":3,"onSubmit":"var soln_inputs = [ [4], [6], [11], [345], [1001] ];\nvar soln_outputs = [ [10], [21], [66], [59685], [501501] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL > 0) { fail.s(\"use no  while loops\"); }\n    if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n    if (style.nAFD < 2) { fail.s(\"need at least 2 functions declared\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                 ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that will demonstrate using recursion to find the sum of all positive integers between 1 and N, wherre N is given by the user as input.\n</b></font>\n</p> \n<p>\nThis program will have 2 functions: myMain, and the recursive function \"summer\" that will be called from myMain.\nIn myMain, first ask the user for a positive integer (no need to validate). \nThen call the recrusive function \"summer\" and pass in to it the integer given by the user.\nWhen the function \"summer\" returns a value, print out that value.\n</p>\n<p>\nWe are doing this sequence summing by writing and calling a recursive function named \"summer\".\nSummer will take one argument, and return the sum of all integers from 1 to that argument.\n</p>\n<p>\nAs with all recursive functions, we will get the work done in summer by writing first a base case: if the parameter value is 1, then return 1 as the sum of integers from 1 to 1.\nThe recursive case will then be for all values of the parameter larger than 1.  FIrst we will call summer recursively and pass it the argument less 1 (this is summing a smaller\nproblem).  Then when that call returns, we take the sum sent back and add to it the parameter value.  We return that new sum as the result of the function.\n</p>\n<p>\n<b>Example executions:</b>\n<pre>\npositive integer?  4\n10         // this is because 4+3+2+1 is 10\n</pre>\n</pre>\npositive integer? 1\n1      // base case, no recursion needed\n</pre>\n<pre>\npositive integer? 11\n66      // which is 11+10+9+8+7+6+5+4+3+2+1\n</pre>","type":"diy","updatedAt":{"$date":"2018-04-03T01:30:34.558Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"5469797569018afa6ceb7213"},"createdAt":{"$date":"2014-11-17T04:28:37.138Z"},"folder":"5902b4167bb0b09c0d2a6422","language":"javascript","maxSubmissions":"","name":"<b>MM 1:</b> object method call","num":11,"onSubmit":"var soln_inputs = [ [2,5] ];\nvar soln_outputs = [ [10] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); }\n     }\n  }\n  if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n  if (style.nAWL !=0 ) { fail.s(\"Use no while loops\"); }\n  if (style.nAFL !=0 ) { fail.s(\"We dont need for loops\"); }\n  if (style.nTFD < 2) { fail.s(\"We need at least 2 functions declared and used\"); }\n  if (style.nBGD >0 || style.nBGU >0) { fail.s(\"dont use global variables\"); }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                 ","phase":1,"testMode":true,"text":"<pre>\nfunction myMain() {\n  var n1 = Number(prompt(\"number?\"));\n  var n2 = Number(prompt(\"number?\"));\n  var ob = makeObj( n1, n2 );\n  var val = ob.mxy();\n  alert(val);\n}\n\nmyMain();\n\nfunction makeObj (a,b) {\n  var ob = {\n    x: a,\n    y: b,\n    mxy: function () { return this.x * this.y ; }\n  }\n  return ob;\n}\n</pre>","type":"twit","updatedAt":{"$date":"2018-01-05T18:59:04.557Z"},"value":{"correct":"0","style":"0"},"vidURL":""},{"_id":{"$oid":"54698db7fec3d74a71abac0e"},"createdAt":{"$date":"2014-11-17T05:55:03.365Z"},"folder":"53cef35d4fae0fbd7f73123f","language":"javascript","maxSubmissions":"","name":"<b>DIY:</b> Power","num":4,"onSubmit":"var soln_inputs = [ [3,2], [5,2], [2,4], [12,1], [12,2], [4.5,3] ];\nvar soln_outputs = [ [9], [25], [16], [12], [144], [91.125] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL > 0) { fail.s(\"use no  while loops\"); }\n    if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n    if (style.nAFD < 2) { fail.s(\"need at least 2 functions declared\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                   ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a recursive version of the power function that we wrote previously.\n</b></font>\n</p> \n<p>\nWe did this problem before with a loop.\nThe previous function power required two arguments: a base, and an exponent.\nYou will need the same two arguments for this recursive version.\nWe will ask the user for both, and the exponent should be a positive integer (no need to validate).\n</p>\n<p>\nThe mathematical function that describes the recursive relationship is this:\n<pre>\npower (base, exp) is base * power(base, exp-1)\n</pre>\nThis is a generalization of specific examples like \n<pre>\n5^4 is 5 * 5^3\nand\n5^3 is 5* 5^2\n</pre>\nIn myMain ask the user for a number for base.  Then ask the user for a number that is the exponent.  Then call\nyour recursive power function, pass to it the base and the exponent, and print the result it returns.\n</p>\n<p>\n<b>Example executions:</b>\n<pre>\nbase (pos number)? 5\nexponent (pos integer)? 2\n25\n</pre>\n<pre>\nbase (pos number)? 2\nexponent (pos integer)? 10\n1024\n</pre>\n<pre>\nbase (pos number)? 45\nexponent (pos integer)? 1\n45\n</pre>\n</p>\n<p>\n<b>Computer science note:</b>\nIt is fine to have more than one base case in a recursive function.\nWe can make this function power handle 0 exponents, for example, by\nputting a base case into it for the exponent value equal to 0.  In this case we would return 1.  Try it.\nWe leave in the base case for exponent value of 1 as well.\n</p>","type":"diy","updatedAt":{"$date":"2018-04-03T01:31:38.809Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"546eb8767f212f1d61e5c25e"},"createdAt":{"$date":"2014-11-21T03:58:46.305Z"},"folder":"546eb51f7f212f1d61e5c25c","language":"javascript","maxSubmissions":"","name":"<b>CG:</b> deck and shuffle","num":0,"onSubmit":"var soln_inputs = [ [20] ];\nvar soln_outputs = [ [0, 6, 12, 0, 8, 12] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL > 1) { fail.s(\"use no more than one while loops\"); }\n    if (style.nFLAP > 2) { fail.s(\"use no more than 2 for loops\"); }\n    if (style.nAFD < 2) { fail.s(\"need at least 2 functions declared\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                   ","phase":1,"testMode":true,"text":"We will write an extended program that has the basic structure for a card game.\nWe will be working on this in class and writing it in pairs if you wish to do so.\nThe starting piece is a representation of a deck of cards and a functions that will shuffle the deck.\n<br/><br/>\nA card game (and most any computer game) is a simulation in code of a real structure and behavior.\nTo do this, we need to identify the things in the world we are modeling, and then create a representation\nof each thing in terms of some JavaScript component.\nCard games usually have at least these things: card, deck of cards, hand, player.  Usually we have some common functions as well: deal cards (to the table, to hands), shuffle the deck, pass card from one player to\nanother, lay card on the table.\nWe will start simple: let's create a card representation, a deck representation, and a way to shuffle\nthe deck.  \n<br/><br/>\nFor starters (we will complicate things later) let's represent a deck of cards as an array with \nas many slots as there are cards in the deck.  Let's also represent a card as an integer between 0 and\nthe size of the deck.\nFor order of the deck, we will use the order of elements in the array.\nFor example, let's consider a deck with 5 cards in it.   Initially we can generate an array with 5 elements\nand we will put one of the integers from 0 to 4 in each slot:\n<pre>\n         +----+----+----+----+----+\narray:   | 0  | 1  | 2  | 3  | 4  |  \n         +----+----+----+----+----+\nslot:      0    1    2    3    4\n</pre>\nAfter shuffling, the deck array might look like this:\n<pre>\n         +----+----+----+----+----+\narray:   | 3  | 0  | 4  | 2  | 1  |  \n         +----+----+----+----+----+\nslot:      0    1    2    3    4\n</pre>\n<br/>\n<b>Code:</b>\nIn myMain, first ask the user how many cards to put into the deck.\nThen create an array to represent the deck, and load up the array with the proper integers in\norder.  Print the deck array to verify that all is well (use an alert on the array variable and the whole\nthing will appear in one alert box).\n<br/><br/>\nNow write a function called shuffle that takes one parameter, a deck array.\nShuffle will move the array values around randomly so that the cards get put into a new, random order.\nReturn the array that has been shuffled.\n<br/><br/>\nBack in myMain, call the shuffle function and pass in the card deck.\nWhen shuffle returns a re-ordered deck array, save that into the deck variable.\nThen print the entire deck again to verify the shuffled order.\n<br/><br/>\n<b> How to shuffle</b>\nWe will use in the shuffle function the Math.random function.  \nThe values stored in the array (the \"cards\") will remain as they are.  The location (slot) of each\n\"card\" will change randomly.\nThe basic idea is to randomly generate 2 slot numbers and then swap the cards stored in those slots.\nDo this swap a few thousand times and the deck will be nicely rearranged.\nLet's use for an example a deck with 52 cards.  You will need an expression that will generate a\nrandom integer between   0 and 51.  Call this twice to get two slots between 0 and 51, then swap\nthose two array elements.  We did a swap back in the bubbleUp brick.  Use this as a pattern.\n<br/><br/>\n<b>To get scored</b>\nRemove the alerts that print the entire deck array (those were for your personal debugging).\nMake a deck with 20 cards, and then do the following outputs.\nBefore shuffling: alert the first element of the new deck, then the 7th element, and the finally\nthe 13th element ( 3 separate alerts).  After shuffling: alert the first element, then the 7th element, and finally\nthe 13th element ( 3 separate alerts).\nMake sure you also do exactly 10 swaps in the shuffle function.","type":"twit","updatedAt":{"$date":"2018-02-02T01:43:24.296Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/cards.one.mp4"},{"_id":{"$oid":"546f76ff7f212f1d61e5c3a3"},"createdAt":{"$date":"2014-11-21T17:31:43.339Z"},"folder":"546eb51f7f212f1d61e5c25c","language":"javascript","maxSubmissions":"","name":"<b>CG:</b> Object deck and shuffle method","num":1,"onSubmit":"var soln_inputs = [ [20] ];\nvar soln_outputs = [ [0, 6, 12, 0, 8, 12] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL > 1) { fail.s(\"use no more than one while loops\"); }\n    if (style.nFLAP > 2) { fail.s(\"use no more than 2 for loops\"); }\n    if (style.nAFD < 2) { fail.s(\"need at least 2 functions declared\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);     ","phase":1,"testMode":true,"text":"Convert the CG1 program into an object-based design.\n<br/><br/>\nThe basic idea is to make the card deck an object, and to make the shuffle function a method in the deck object.\nWe will need a constructor function for deck object (let's call it makeDeck) and this constructor will need one parameter... the\nnumber of cards to put into the initial deck.\nThe makeDeck function will create the array and fill it with cards in order, as you did in myMain in CG1.\nThe makeDeck constructor will also take your shuffle function and convert it into a function inside the deck object.\nThis means using the \"this\" keyword appropriately to refer to the card array.\n<br/><br/>\nThe myMain function is now simpler.  Ask the user how many cards in the deck.  Call makeDeck and pass that number as a parameter.\nCapture and save the deck object that is returned.  Then alert the cards array in the deck object to see the initial in-order card list ( see \"show the deck\" below ).\nAsk the deck object to shuffle itself ( that is, call the shuffle method on the deck, using dot notation like deck.shuffle() ).\nThen alert the entire card arrray in the deck object to see the shuffled card order.\n<br/><br/>  \n<b>To show the deck</b>\n<br/>\nHow will we actually print out the cards in a deck?  One idea is to reach into the deck object and just name the card array.\nWhile this will work, it is not the best practice.\nA better practice it to put a \"show()\" function into the deck object so you can ask a deck to show you the cards.\nThe show function will alert the entire array. We will use the show function to convince ourselves that\nthe array is being randomized as we want.\n<br/><br/>\n<b>To get Scored</b>\n<br/>\nComment out the show function calls and do the same output we did in CG1 to get scored.\nThat is, when the deck is newly created alert the first card, the 7th card, and the 13th card in 3 separate\nalert statements.\nThen shuffle the deck (making exactly 10 swaps).\nAfter the deck is shuffled, print those 3 cards again.\nEven though it is not best practice, do this by reaching into the object and accessing individual elements in the card array.  For example, if your cards array is\nnamed \"cards\" in the deck object, then alert deck.cards[0] etc.\n","type":"twit","updatedAt":{"$date":"2018-02-02T04:12:39.863Z"},"value":{"correct":"3","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/cards.objDeck.mp4"},{"_id":{"$oid":"546f7d1e7f212f1d61e5c3ab"},"createdAt":{"$date":"2014-11-21T17:57:50.896Z"},"folder":"5902b4167bb0b09c0d2a6422","language":"javascript","maxSubmissions":"","name":"<b>MM 2:</b> object method with parameter, local vars","num":16,"onSubmit":"var soln_inputs = [ [2,5] ];\nvar soln_outputs = [ [10,70] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); }\n     }\n  }\n  if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n  if (style.nAWL !=0 ) { fail.s(\"Use no while loops\"); }\n  if (style.nAFL !=0 ) { fail.s(\"We dont need for loops\"); }\n  if (style.nTFD < 2) { fail.s(\"We need at least 2 functions declared and used\"); }\n  if (style.nBGD >0 || style.nBGU >0) { fail.s(\"dont use global variables\"); }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                   ","phase":1,"testMode":true,"text":"Let's alter the previous problem (MM1) and add a second method to the object:\n<pre>\nfunction myMain() {\n  var n1 = Number(prompt(\"number?\"));\n  var n2 = Number(prompt(\"number?\"));\n  var ob = makeObj( n1, n2 );\n  var v1 = ob.mxy();\n  alert(v1);\n  var v2 = ob.foo(10);\n  alert(v2);\n}\n\nmyMain();\n\nfunction makeObj (a,b) {\n  var ob = {\n    x: a,\n    y: b,\n    mxy: function () { return this.x * this.y ; },\n    foo: function (z) {\n      var loc = this.x + this.y;\n      return loc * z;\n    }\n  }\n  return ob;\n}\n</pre>","type":"twit","updatedAt":{"$date":"2018-01-05T18:59:04.568Z"},"value":{"correct":"0","style":"0"},"vidURL":""},{"_id":{"$oid":"547bafdad422b48919cf40a4"},"createdAt":{"$date":"2014-12-01T00:01:30.765Z"},"folder":"546eb51f7f212f1d61e5c25c","language":"javascript","maxSubmissions":"","name":"<b>CG:</b> Adding methods to deck object","num":2,"onSubmit":"var soln_inputs = [ [52] ];\nvar soln_outputs = [ [0,4,6,11,40,14,51] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL > 1) { fail.s(\"use no more than one while loops\"); }\n    if (style.nFLAP > 2) { fail.s(\"use no more than 2 for loops\"); }\n    if (style.nAFD < 2) { fail.s(\"need at least 2 functions declared\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                  ","phase":1,"testMode":true,"text":"(6-2pts) Extend the CG2 program with more deck methods.\n<br/><br/>\nThe deck object currently has a \"shuffle\" method, a \"init\" method, and a \"show\" method.  Now let's give the deck more functionality.\n<br/><br/>\n<b>(1)</b> Add a \"size\" method to the deck object.  The size method will take no parameters and will return a positive integer (or 0) that\ntells how many cards are in the deck.  \n<br/><br/>\n<b>(2)</b> Add a \"deal\" method (function) to the deck object.\nThe deal method will take one parameter (an integer telling how many cards to deal from the deck); it will return an\narray containing the cards dealt.  Make sure to shorten the deck cards as well. For example, if deal is called with the parameter\n5, and if the deck starts with 52 cards, then deal returns an array with the first 5 cards from the deck and the deck itself is shortened to\n47 cards.  Don't forget to make sure to adjust the number of cards so that the size function still works after a deal.\n<br/><br/>\nYou may find the \"slice\" method in arrays useful.  Read the documentation online for details. The slice method will\nreturn a portion of an array.  For example, if you have an array variable \"arr\" then arr.slice(0,5) will return an array\nconsisting of the elements 0, 1, 2, 3, and 4 from arr.  Calling arr.slice(5) will return all elements from 5 to the end.\n<br/><br/>\n<b>(3)</b> Add a \"getCard\" method to the deck object.\nThis method will take one parameter (an integer 1 or greater) and it will return the card that is in that \nposition in the deck.  For example, if the getCard method is called with 5, then return the 5th card (which is\nfound in slot 4 in the array in the deck).\n<br/><br/>\n<b>To get scored:</b>\nThe myMain function should do the following things.\nFirst ask the user how many cards to put in the deck, then make a new deck with that many cards.\nTo get scored, use 52 as the number of cards.\n<b>Do not shuffle the deck.</b>\nCall the deal method on the deck and pass it a 5 (deal 5 cards); save the array returned in a variable.\nPrint the first and 5th card in that array (using two separate alerts).\nCall the deal method again and pass it 7 (deal 7 cards); save the array that it returned in a variable.\nPrint the 2nd and 7th cards from this array (two separate alerts).\nThen call the size method on the deck, and print the number that is returned.\nFinally, print the 3rd and last cards remaining in the deck (separate alerts).\nUse the \"getCard\" method to retrieve these cards; do not just peek into the array in the deck object (as\nwe have been doing up to now).\n\n\n","type":"twit","updatedAt":{"$date":"2018-02-02T00:04:08.05Z"},"value":{"correct":"3","style":"1"},"vidURL":""},{"_id":{"$oid":"547e70b7d422b48919cf45fc"},"createdAt":{"$date":"2014-12-03T02:08:55.402Z"},"folder":"546eb51f7f212f1d61e5c25c","language":"javascript","maxSubmissions":"","name":"<b>CG:</b> Adding card objects","num":3,"onSubmit":"var soln_inputs = [ [] ];\nvar soln_outputs = [ [\"0:2D\",\"4:6D\",\"6:8D\",\"11:KD\", 40, \"14:3C\",\"51:AS\" ] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLAP > 1) { fail.s(\"use no more than one while loops\"); }\n    if (style.nFLAP > 5) { fail.s(\"use no more than 5 for loops\"); }\n    if (style.nAFD < 4) { fail.s(\"need at least 4 functions declared\"); }\n  }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ","phase":1,"testMode":true,"text":"Now let's change how cards are represented.  We will make alterations to CG3.  In CG3 a card is an integer, and the deck object contains an array of these card/integers.  In this program we will represent a card with an object.  The deck will still have an\narray to contain all the cards, but each slot in the array will hold a card object.\n<br/><br/>\nWe will need a constructor to make card objects.  We will call this makeCard() and it will take an integer as parameter.\nThis will be stored in the card as the card number.  Using this number we will also compute the proper suit and face for the card.\n<br/><br/>\nIn the deck object the methods deal, shuffle, should still work usefully.\nWe will have to alter the show method.call the makeCard function.\n<br/><br/>\nThe makeCard function will construct an object with the card number as well as\nthe face and suit.  It will also have a show function and a getName function.\n<br/><br/>\nmyMain will have to be altered to produce card numbers according to the new card structure.\n\n<b>To get scored:</b>\n<br/>\nThe myMain function should do the following things. \n<ol>\n<li>First make a new deck with 52. <b>Do not shuffle the deck.</b>\n<li>Call the deal method on the deck and pass it a 5 (deal 5 cards); save the array returned in a variable.\n<li>Print the first card in that hand array; use the card show method to do this (it's format is \"0:2D\", the card number, a colon, then the name).\n<li>Print the 5th card in that hand array with a call to the card show method.\n<li>Call the deal method again and pass it 7 (deal 7 cards); save the array that it returned in a variable. \n<li>Print the 2nd and 7th cards from this array (two calls to the card show method). \n<li>Then call the size method on the deck, and print the number that is returned. \n<li>Finally, print the 3rd and last cards remaining in the deck (separately). Use the \"getCard\" method to retrieve these cards, and\ncall the show method on the cards returned.\n<ol>","type":"twit","updatedAt":{"$date":"2018-02-02T00:04:27.916Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"55a434e8202773475826e312"},"createdAt":{"$date":"2015-07-13T22:00:08.777Z"},"folder":"55a43416202773475826e311","language":"javascript","maxSubmissions":"","name":"Overview","num":0,"onSubmit":"// I/O pairs for functional behavior\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [\"data types: number, string, boolean\"] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness  \n  if (err) { fail.f(\"There was an error in your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (!style.isJOTFC) { fail.s(\"make a single output, nothing else\"); }\n  if (!style.hasOTAOL) { fail.s(\"make one call to alert on a string literal\"); }\n\n  // finalize and award points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\t\t\t","phase":1,"testMode":false,"text":"<b>Data</b>\n<br/>\nData is the basic information we use computers to manipulate for us.  People and place names, ages, heights, lengths, dollars and cents, time, sentences, all these are information we may wish to have a computer program use.  JavaScript provides 3 types of fundamental (basic, simple) data: \n<ul>\n   <li> number\n   <li> string (or text)\n   <li> boolean\n</ul>\n<i>Numbers</i> are formed from digits 0-9, the negative symbol (-) and perhaps a decimal point (.) .\n<br/>\nExamples include 11, -3.2, 27.12398745, 9.0, -10000, .25, 0.25\n<br/><br/>\n<i>Strings</i> are sequences of alphabetic characters, digits, and punctuation characters enclosed in quote marks.  \n<br/>\nExamples include \"hello\", \"COMP 110\", \"Welcome to class!\", \"x\", \"100\", \"up/down and side-ways\"\n<br/><br/>\n<i>Boolean</i> data represent logical truth; there are only two boolean values: <i>true</i> and <i>false</i> .\nWe do not put quotes around true and false, we just use them as special words.  The value <i>true</i> is boolean, but the value \"true\" is a string. In similar fashion,\nthe value 200 is a number, but the value \"200\" is a string.\n<br/><br/>\nWe will look at boolean in detail later.  In this module, we will practice mostly with numbers and strings.\n<br/><br/>\n<b>Output</b>\n<p>\nIn order for a computer program to be useful to us, it not only has to manipulate information, if must get that information out to us in a form we can understand and use.  This is called <b>output</b>.  Programming languages usually offer many ways to get a computer to output information. For JavaScript we will start with the very basic \"print something to the screen\" function.  This is the <b>alert</b> function.\nThe <b>alert</b> function in JavaScript produces a popup box on the screen, with the requested output printed inside the box.\n</p>\n<p>\nUsing the alert function it is our first example of a <i>function call</i>.   \nWhen we call a function we are asking that the program perform the named activity, and we pass information to the function to use \nduring its activity.  To call a function (in this case, the \"alert\" function) we write its name and in parentheses we write the information we wish to pass in (called parameters, or arguments). \n</p>\n<p>\nSo let's try calling the alert function to get some output.\nTo complete this problem, type the following JavaScript line, run it, and then submit it for credit:\n<br/><br/>\n&nbsp&nbsp&nbsp <b>alert( \"data types: number, string, boolean\" ) ;</b>\n<br/><br/>\nMake sure you pay careful attention to where all the blank characters are inside the quotes, and how many there are.  To get this program correct, your quoted string will have to be exactly the same as the one shown there.  This sort of detail is very important in programming and it can be very frustrating to you -- the programmer -- as well.  \n</p>\n<p>\nNote that the syntax we use to call a function is based on mathematical notation.  We have all seen something like this:\n<br/> &nbsp&nbsp&nbsp <b> y = sine(x)</b>\n<br/>\nHere the function we are \"running\" is the trigonometric <b>sine</b> and the information we are passing in is the argument <b>x</b>.\nThe function computes a value based on <b>x</b> and produces it.  \n</p>\n<p>\nThe programs that follow will show you examples of the 3 fundamental data types in JavaScript: number, string, and boolean.\nAll data values in our JavaScript programs will be of these types.  The programs in this module will show you how data values of each type are formed.\nWe call these individual data values \"constants\".  A constant is a data value that does not change (i.e., its value is fixed... constant).\n</p>","type":"twit","updatedAt":{"$date":"2018-01-08T23:09:45.299Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/const.overview.mp4"},{"_id":{"$oid":"55a438de00be0a1359da625e"},"createdAt":{"$date":"2015-07-13T22:17:02.843Z"},"folder":"55a43416202773475826e311","language":"javascript","maxSubmissions":"","name":"Course name","num":1,"onSubmit":"// I/O pairs for functional behavior\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [\"COMP 110\"] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness  \n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (!style.isJOTFC) { fail.s(\"make a single output, nothing else\"); }\n  if (!style.hasOTAOL) { fail.s(\"make one call to alert on a string literal\"); }\n\n  // finalize and award points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker ); ","phase":1,"testMode":false,"text":"Write a program that prints (alert) the catalog designation of this course ( \"COMP 110\" ). \nFor things like names, we use string data. We use the alert function to do output to the screen, so put the data you want to see \non the screen inside parentheses like this: \n<br/><br/>\n<b>alert( \"COMP 110\" );</b>\n<br/><br/>\nTo complete this program, type the JavaScript line above into the editor window, run it locally to test, and then submit it for credit.\nWe put a semicolon at the end as a rule of properly formed JavaScript statements.  It's like English grammar requiring a \".\" at the end of a sentence.\n<br/><br/>\nA string can contain just about any keyboard characters inside the quote marks.  Here are some valid string values:\n<pre>\n  \"hello\"    \"123\"    \"542 xyz\"    \"     \"     \"quick brown fox\"   \"Smith's house\"  <font color=red><b><-- note here the ' inside the string</b></font>\n</pre>\nA string can start with either \" or ' and must end with the same style quote mark.  This allows us to make string values with the \" character inside:\n<pre>\n  'another string'    'ten 10 tin'     'The speaker said \"Welcome!!\" to the crowd'     '#hashtag'    'go-fight-win!!@gmail.com'\n</pre>\nTry printing some of these using local testing.","type":"twit","updatedAt":{"$date":"2018-01-07T05:34:53.958Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/const.coursename.mp4"},{"_id":{"$oid":"55a43b6500be0a1359da625f"},"createdAt":{"$date":"2015-07-13T22:27:49.781Z"},"folder":"55a43416202773475826e311","language":"javascript","maxSubmissions":"","name":"Current year","num":2,"onSubmit":"// I/O pairs for functional behavior\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [2017] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness  \n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (!style.isJOTFC) { fail.s(\"make a single output, nothing else\"); }\n  if (!style.hasOTAOL) { fail.s(\"make one call to alert on a number literal\"); }\n\n  // finalize and award points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker );","phase":1,"testMode":false,"text":"<p>Write a program that prints (alert) the current year ( 2017 ).  \nHere we use number data, so there will be no quotes around the numeric value 2017.\n</p>\n<p>\nData values of type number can be what we called in math class \"integer\" (no decimal point), or they can be floating point, with a decimal point:\n<pre>\n  123    16.21456    -1976   -98.4381   -500    27.70000001    0     0.01     -0.00004\n</pre>\nFloating point numbers are also often called \"real\" numbers.  There are a few other formats for numbers, such as scientific notation, but we will deal with them specifically when we need them.\n</p>\n<p>\nNo matter the format, in JavaScript they are all data values of type \"number\".\n</p>","type":"twit","updatedAt":{"$date":"2018-01-07T05:34:58.606Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/const.curryear.mp4"},{"_id":{"$oid":"55a43e2400be0a1359da6260"},"createdAt":{"$date":"2015-07-13T22:39:32.117Z"},"folder":"55a43416202773475826e311","language":"javascript","maxSubmissions":"","name":"Boolean true","num":3,"onSubmit":"// I/O pairs for functional behavior\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [true] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness  \n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (!style.isJOTFC) { fail.s(\"make a single output, nothing else\"); }\n  if (!style.hasOTAOL) { fail.s(\"make one call to alert on a boolean literal\"); }\n\n  // finalize and award points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker );\t\t\t\t\t\t","phase":1,"testMode":false,"text":"The boolean value indicating truth or true-ness is the special keyword <i>true</i> .\nKeywords are not the same as text or string data; we do not put them in quotes to use them.  \nPrint out the boolean value indicating true-ness.\n","type":"twit","updatedAt":{"$date":"2018-01-07T05:35:06.843Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/const.booltrue.mp4"},{"_id":{"$oid":"55a4461a3e2a18845b81c530"},"createdAt":{"$date":"2015-07-13T23:13:30.307Z"},"folder":"55a43416202773475826e311","language":"javascript","maxSubmissions":"","name":"Slice of Pi","num":4,"onSubmit":"// I/O pairs for functional behavior\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [3.14159] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness  \n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (!style.isJOTFC) { fail.s(\"make a single output, nothing else\"); }\n  if (!style.hasOTAOL) { fail.s(\"make one call to alert on a number literal\"); }\n\n  // finalize and award points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker );","phase":1,"testMode":false,"text":"Print (alert) the value of pi truncated to 5 decimal places.  \nTruncating is not rounding, it is just chopping.  \nTruncating a number to 5 decimal places then is using all of the number to the left of the decimal point, and the first 5 digits to the right of the decimal point and leaving off all the other digits further out to the right.\nThe value of pi is 3.14159265358979, more or less.\n","type":"twit","updatedAt":{"$date":"2018-01-07T05:35:12.273Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/const.pi.mp4"},{"_id":{"$oid":"55a44eb43e2a18845b81c531"},"createdAt":{"$date":"2015-07-13T23:50:12.001Z"},"folder":"55a43416202773475826e311","language":"javascript","maxSubmissions":"","name":"<b>DIY:</b> Length of a mile","num":5,"onSubmit":"// I/O pairs for functional behavior\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [5280] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness  \n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (!style.isJOTFC) { fail.s(\"make a single output, nothing else\"); }\n  if (!style.hasOTAOL) { fail.s(\"make one call to alert on a number literal\"); }\n\n  // finalize and award points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker );","phase":1,"testMode":false,"text":"Write a program that prints (alert) the number of feet in a mile.  The output is simply one number, an integer. If this is not something you remember directly, then just Google it up.","type":"diy","updatedAt":{"$date":"2018-01-07T05:35:17.836Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"55a450bc3e2a18845b81c532"},"createdAt":{"$date":"2015-07-13T23:58:52.698Z"},"folder":"55a43416202773475826e311","language":"javascript","maxSubmissions":"","name":"<b>DIY:</b> Eighth month name","num":6,"onSubmit":"// I/O pairs for functional behavior\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [\"August\"] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness  \n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (!style.isJOTFC) { fail.s(\"make a single output, nothing else\"); }\n  if (!style.hasOTAOL) { fail.s(\"make one call to alert on a string literal\"); }\n\n  // finalize and award points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker );","phase":1,"testMode":false,"text":"Write a program that prints (alert) the name of the 8th month of the year.  \nFor those who don't have a calendar, this is spelled August .\n","type":"diy","updatedAt":{"$date":"2018-01-07T05:35:23.513Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"55a450bd3e2a18845b81c533"},"createdAt":{"$date":"2015-07-13T23:58:53.333Z"},"folder":"55a43416202773475826e311","language":"javascript","maxSubmissions":"","name":"<b>DIY:</b> Boolean value <i>false</i>","num":7,"onSubmit":"// I/O pairs for functional behavior\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [false] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness  \n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (!style.isJOTFC) { fail.s(\"make a single output, nothing else\"); }\n  if (!style.hasOTAOL) { fail.s(\"make one call to alert on a boolean literal\"); }\n\n  // finalize and award points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker );","phase":1,"testMode":false,"text":"The boolean value indicating falsehood is the special keyword <i>false</i> . \nKeywords are not the same as text or string data; we do not put them in quotes to use them.  \nPrint out the boolean value indicating falsehood.\n","type":"diy","updatedAt":{"$date":"2018-01-07T05:35:29.882Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"55a452103e2a18845b81c534"},"createdAt":{"$date":"2015-07-14T00:04:32.179Z"},"folder":"55a43416202773475826e311","language":"javascript","maxSubmissions":"","name":"<b>DIY:</b> One fourth","num":8,"onSubmit":"// I/O pairs for functional behavior\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [0.25] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness  \n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (!style.isJOTFC) { fail.s(\"make a single output, nothing else\"); }\n  if (!style.hasOTAOL) { fail.s(\"make one call to alert on a number literal\"); }\n\n  // finalize and award points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker );","phase":1,"testMode":false,"text":"Print out (alert) the number that is the decimal representation of the fraction one fourth.  Do not try to get JavaScript to do any division, \nsimply have it print out the proper decimal number directly.","type":"diy","updatedAt":{"$date":"2018-01-07T05:35:35.162Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"55a458514ced6aa35e53feb1"},"createdAt":{"$date":"2015-07-14T00:31:13.488Z"},"folder":"53cef2444fae0fbd7f731233","language":"javascript","maxSubmissions":"","name":"Overview","num":0,"onSubmit":"// I/O pairs for functional correctness\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [2] ];\n\n// callbacks for grading choices\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // grade functional\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n         if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // grade style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (!style.isJOTFC) { fail.s(\"make a single output, nothing else\"); }\n  if (!style.hasOTAOBE) { fail.s(\"write one call to alert using the number expression shown\"); }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);","phase":1,"testMode":false,"text":"Expressions are how we take basic data values and combine them with operations to make new data values.  \nExpressions retrieve data values stored in memory and also use constants (literals).  \n<br/><br/>\nOperations for numbers include +, -, *, /, and %.  \n<br/><br/>\nOperations on strings include + (concatenation) and various functions to take portions of a string (substring).  \n<br/><br/>\nOperations on boolean include && (and), || (or), ! (not), and other functions we will see later.\n<br/><br/>\nTo complete this problem, type the following JavaScript line and run it: \n<pre>\n <b>&nbsp&nbsp <b> alert(1+1);</b> // number 1 plus number 1 </b>\n</pre>\n","type":"twit","updatedAt":{"$date":"2018-02-07T12:53:51.57Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/expr.overview.mp4"},{"_id":{"$oid":"55a45ddbb8c002e65f629fc4"},"createdAt":{"$date":"2015-07-14T00:54:51.31Z"},"folder":"55a45d64b8c002e65f629fc3","language":"javascript","maxSubmissions":"","name":"Overview","num":0,"onSubmit":"// I/O pairs\nvar soln_inputs = [ [\"Bob21\"], [\"Carol\"], [\"John Q. Publix\"] ];\nvar soln_outputs = [ [\"Bob21\"], [\"Carol\"], [\"John Q. Publix\"] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }\n  // if (ff) { fail.s(\"no style points since functional failed\"); }\n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (style.nDV > 1) { fail.s(\"you only need 1 variable\", (1/10) ); }\n    if (style.nUDV != 0) { fail.s(\"you used undeclared variable(s): declare all variables\", (1/10) ); }\n    if (style.nUUDV != 0) { fail.s(\"you declared variable(s) that were not used: use what you declare\", (1/10) ); }\n    if (!(style.hasOTAOV || style.hasOTAOBE)) { fail.s(\"the one call to alert must have a variable as parameter\", (7/10) ); }\n  }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker); ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Input\n</b></font>\n</p>\n<p>\nThe main purpose of a program is to take information (data) that we have, and produce (compute) some new data that we want or need.  To do this we first must get the information that we do have into the program, stored into variables so the rest of the program can manipulate that data.  We call this <b>input</b>, or \n<b>user input</b>.\n</p>\n<p>\nIn the previous problems, the numbers and data we wanted to compute with were typed directly into the program source code. However, for most programs, most of the data cannot be known when the program is written.  It will come from the user when the program is run.  We call the time that a program is executed <b>run-time</b>.\n</p>\n<p>\nThere are several ways to get input at run-time from a user in JavaScript; we start with the <b>prompt</b> statement.  A prompt statement will pop up a box on the screen with a message printed to the user, and wait for the user to type something in response (with a return key).  Whatever the user types is sent back as string data and can be used in any way a string can be used.\n<br/><br/>\nType this program and run it :\n<pre>\n   <b> alert ( prompt(\"What is your name?\") );</b>\n</pre>\nThe user sees the message \"What is your name?\" and whatever the user types in response will become the string the alert statement will print.\nThe prompt statement produces a string (the one the user types) and then that string is used by the alert as parameter.\nIf (for example) the user types \"Bob\" then the effect of this code is to do an <b> alert(\"Bob\");</b>\n<br/><br/>\nLet's examine a more common way to do this sort of input.  Since the prompt statement produces a string (from the keyboard) we usually\nissue the prompt statement as a stand-alone statement and \"capture\" the string it produces, saving that string into a variable.\nWe can then use the variable in the same ways we have been doing in the earlier programs:\n<pre>\n<b> var uName = prompt(\"What is your name?\");</b>\n<b> alert(uName);</b>\n</pre>\nTry this alternate way as well to see how it works.","type":"twit","updatedAt":{"$date":"2018-01-14T13:01:14.984Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/input.overview.mp4"},{"_id":{"$oid":"55a47ab094a5e3af6530c984"},"createdAt":{"$date":"2015-07-14T02:57:52.602Z"},"folder":"53cef2574fae0fbd7f731234","language":"javascript","maxSubmissions":"","name":"Prof age","num":1,"onSubmit":"// I/O pairs\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [29] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n  // if (ff) { fail.s(\"no style points since functional failed\"); }\n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (style.nDV != 1) { fail.s(\"you need only one variable;\", (1/4) ); }\n    if (style.nUDV > 0) { fail.s(\"you used undeclared variable(s): declare all variables;\", (1/4) ); }\n    if (style.nUUDV > 0) { fail.s(\"you declared variable(s) that were not used: use what you declare;\", (1/4) ); }\n    if (!style.hasOTAOV) { fail.s(\"the one call to alert must have a variable as parameter\", (1/4) ); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that creates a variable named \"profAge\".  Then assign my age to it, and print out the value of the variable.</b>\n</font>\n</p>\n<p>\nFor reference, I am 29 years old.  I have been for a long time :) .\n</p>\n<p>\nTo complete this problem, you will need to declare the variable requested, and assign the appropriate value to that variable.\nThen in an alert statement, simple type the variable name.  Using the name of a variable in an expression is called \"referencing the variable\".\nWhen a variable is referenced, the data value stored in it is retrieved for use.\n</p>","type":"twit","updatedAt":{"$date":"2018-01-14T13:00:00.519Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/var.profage.mp4"},{"_id":{"$oid":"55a47ba694a5e3af6530c985"},"createdAt":{"$date":"2015-07-14T03:01:58.428Z"},"folder":"55a45d64b8c002e65f629fc3","language":"javascript","maxSubmissions":"","name":"Quadratic equation 3","num":2,"onSubmit":"// I/O pairs for functional behavior\nvar soln_inputs = [ [2,10,-100], [5,-6,1] ];\nvar soln_outputs = [ [5,-10], [1,0.2] ];\n\n// callbacks\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }\n  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (style.nTNC != 3) { fail.s(\"must convert string to number with a Number() call\", 1/8); }\n    if (style.nDV > 7) { fail.s(\"you dont need more than 7 variables\", (1/8) ); }\n    if (style.nUDV != 0) { fail.s(\"you used undeclared variable(s): declare all variables\", (1/8) ); }\n    if (style.nUUDV != 0) { fail.s(\"you declared variable(s) that were not used: use what you declare\", (1/8) ); }\n    if (style.nTAOL >0) { fail.s(\"need two alerts, each with a variable or expression as parameter\", (1/2) ); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\t\t\t\t\t\t","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Let's do the quadratic equation program yet again, with user input this time.\n</b></font>\n</p> \n<p>\nMany programs written today my professional programmers are actually built by modifying existing code.\nOne way for you to write this program is to go to the version of Quadratic you wrote back in Variables and re-load it into the editor.\nThen adapt that version to getting variable values from prompt input.  This will keep you from having to work out the complicated quadratic equation expressions again.\n</p>\n<p>\nWe will use three separate prompt statements to get the values for a, b, and c from the user.  First prompt the user for the value for a;  then prompt for a value for b; then get c. After getting these user inputs, compute the two roots of the quadratic equation as we did before, using the variables in the expressions. Then print out the roots with two separate alert statements (plus root first, then minus root). \n</p>\n<p>\n<b>Make sure to convert the user's input (which are strings, or text) into numbers using the Number() function.</b>\nThis is one of the important lessons in this problem.  Anything typed at the keyboard is passed to JavaScript as data type string.\nSometimes that string data will be usable as is, and sometimes it will need to be convert to type number.\n</p>\n\n<p>\nThe data values we've used before are a:2, b:10, and c:-100.  Since you know (from previous programs) what the output should be, use those value here to test your program. \nWhen you run it locally and the prompt statement boxes show on the screen, type in those values (one per prompt).\nThen try some other values and check manually to see if the results you get match what the equation should compute.\n</p>\n\n","type":"twit","updatedAt":{"$date":"2018-01-14T13:01:19.62Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/input.quadratic3.mp4"},{"_id":{"$oid":"55a47c2694a5e3af6530c986"},"createdAt":{"$date":"2015-07-14T03:04:06.118Z"},"folder":"55a45d64b8c002e65f629fc3","language":"javascript","maxSubmissions":"","name":"Math.floor()","num":3,"onSubmit":"// pds needs updating\n// console.log(\"checking Math.floor()\");\nvar soln_inputs = [ [7.123456], [13.8792], [-4.321], [3], [0], [-5] ];\nvar soln_outputs = [ [7], [13], [-5], [3], [0], [-5] ];\n\n// callbacks\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style correctness\n  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (style.nTNC == 0) { fail.s(\"must convert string to number with a Number() call\", 1/8); }\n    if (style.nDV > 3) { fail.s(\"you dont need more than 3 variables\", (1/8) ); }\n    if (style.nUDV != 0) { fail.s(\"you used undeclared variable(s): declare all variables\", (1/8) ); }\n    if (style.nUUDV != 0) { fail.s(\"you declared variable(s) that were not used: use what you declare\", (1/8) ); }\n    if (style.hasOTAOL) { fail.s(\"need one alert, with a variable or expression as parameter\", (1/2) ); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n//console.log(\"end correctness check\");\t\t\t\t\t\t\t\t","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that will get a number from the user as input, and then print out the integer part of that number.\n</b></font>\n</p> \n<p>\nLet's learn more about the useful math functions that JavaScript provides. We find these in the Math library (JavaScript calls this the Math 'object' ). In this program we will use Math.floor which converts a number in any form (which may have digits to the right of the decimal place) into a number that has Integer form... that is, no digits after the decimal place.\n</p>\n<p>\nPrompt the user for a number and assign that value to a variable named \"rawNum\". \n<b>Remember to convert the user's input text into a number.</b>\nConvert that to an integer using Math.floor() and print out the resulting value. Floor is not rounding; it will produce the \n<b>first integer that is less than or equal to the one you pass to it</b>.  \nTry running this program with a number like 98.76543 as input; you would expect 98 as output.  Try running it also with 98 or any other number that is already an integer. Finally, try it with a negative number like -4.21.  This will show you how Math.floor differs from\nother functions like rounding and truncation.\n<p>\n<b>Note:</b> For this program we really want truncating, but the JavaScript Math.trunc function is not yet supported properly on all browsers (in Bricks, we use\na JavaScript engine from one of the browsers).  So we will get most of what we want using Math.floor.  \nThe floor function works as truncation as long as we use it only on positive numbers.\nOnly on negative numbers does Math.floor give results that are different from truncation.  Try a few for yourself to see how it works.\nMath.trunc is supposed to do this:  On N > 0, same as Math.floor; on N<0 same as Math.ceil (the ceiling function).\n</p>\n<p>\n<b>Note:</b> Once we have learned about conditional statements, we can write our own bulletproof \"trunc\" by doing just what that last sentence says... \ncheck the number we are working on to see if it negative, and call Math.ceil() on it... and otherwise call Math.trunc() on it.\nThis is what conditionals are for -- choosing one thing or another, depending on data values when we are executing.  We will get there soon.\n</p>","type":"twit","updatedAt":{"$date":"2018-01-14T13:01:24.533Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/input.floor.mp4"},{"_id":{"$oid":"55a47db994a5e3af6530c987"},"createdAt":{"$date":"2015-07-14T03:10:49.316Z"},"folder":"55a45d64b8c002e65f629fc3","language":"javascript","maxSubmissions":"","name":"Truncate to 3 places","num":4,"onSubmit":"// pds needs updating\n// console.log(\"checking Truncate to 3 places\");\nvar soln_inputs = [ [3.1415926], [14.5678912], [100], [-12.34567], [34.52] ];\nvar soln_outputs = [ [3.141], [14.567], [100], [-12.346], [34.52] ];\n\n// callbacks\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style correctness\n  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (style.nTNC == 0) { fail.s(\"must convert string to number with a Number() call\", 1/8); }\n    if (style.nDV > 3) { fail.s(\"you dont need more than 3 variables\", (1/8) ); }\n    if (style.nUDV != 0) { fail.s(\"you used undeclared variable(s): declare all variables\", (1/8) ); }\n    if (style.nUUDV != 0) { fail.s(\"you declared variable(s) that were not used: use what you declare\", (1/8) ); }\n    if (style.hasOTAOL) { fail.s(\"need one alert, with a variable or expression as parameter\", (1/2) ); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n//console.log(\"end correctness check\");\t\t\t\t\t\t\t\t","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that asks the user to input a number, then truncates the value to 3 decimal places and print it.  \n</b></font>\n</p> \n<p>\nTo do this (the hard way) we multiply the value by 1000, use Math.floor on that, and then divide the result by 1000.  For example, if the user gives 12.83245 :\n<pre>\n original input: 12.83245\n multiply by 1000 gives 12832.45     ( moves the decimal point 3 places right )\n Math.floor gives 12832              ( truncates in this case ) \n divide by 1000 gives 12.832         ( moves the decimal point 3 place back to the left )\n</pre>\n</p>\n<p>\nAs we saw in another program, this approach doesn't *quite* work for negative numbers (try it!) but we won't worry about that too much at the moment.  \nWe will just give it positive numbers, or 0, and make sure it truncates those properly.  We will assume the user is helpful and properly types in\nonly the kind of input we want.  In general this is not a good idea... users make mistakes even if they are not malicious.\nIn later modules we will see how to validate the user input and make sure the user is giving the data that we want, and expect.\n</p>\n<p>\n<b>More testing issues:</b> What happens when we give input that is an integer with nothing after the decimal point?  Or a number with only 2 decimal places?\nTry it... make sure your program does what you think it should.\n</p>","type":"twit","updatedAt":{"$date":"2018-01-14T13:01:30.58Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/input.trunc3.mp4"},{"_id":{"$oid":"55a47f1994a5e3af6530c988"},"createdAt":{"$date":"2015-07-14T03:16:41.597Z"},"folder":"55a45d64b8c002e65f629fc3","language":"javascript","maxSubmissions":"","name":"<b>DIY:</b> Math.round()","num":5,"onSubmit":"// pds needs updating\n//console.log(\"checking Math.round()\");\nvar soln_inputs = [ [7.123456], [13.8973], [-4.321], [-4.87] ];\nvar soln_outputs = [ [7], [14], [-4], [-5] ];\n\n// callbacks\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style correctness\n  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (style.nTNC == 0) { fail.s(\"must convert string to number with a Number() call\", 1/8); }\n    if (style.nDV > 3) { fail.s(\"you dont need more than 3 variables\", (1/8) ); }\n    if (style.nUDV != 0) { fail.s(\"you used undeclared variable(s): declare all variables\", (1/8) ); }\n    if (style.nUUDV != 0) { fail.s(\"you declared variable(s) that were not used: use what you declare\", (1/8) ); }\n    if (style.hasOTAOL) { fail.s(\"need one alert, with a variable or expression as parameter\", (1/2) ); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n//console.log(\"end correctness check\");   ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that will get a number from the user as input, and then print out the integer that is closest in value... i.e. round the number to the nearest integer value.\n</b></font>\n</p> \n<p>Prompt the user for a number and assign that value to a variable named \"rawNum\".  Remember to convert the user's input text to number.  Round the user's input to the nearest integer with the Math.round() function and print the resulting value. Try running this program with 98.76543 again.  We expect to see 99 this time.  \n</p>\n<p>\n<b>Testing notes:</b> We say that Math.floor was not a good trunc function -- it behaved on negative numbers in a way we did not want for truncating.\nDoes Math.round() work as we expect on all numbers?  Test it... try it on positives... negatives... 0.  This is what good testing is all about.  You try your program\non the full range of possible inputs ... types of inputs... values that you expect users might give.\n</p>\n","type":"diy","updatedAt":{"$date":"2018-01-14T13:01:36.197Z"},"value":{"correct":"2","style":"1"},"vidURL":""},{"_id":{"$oid":"55a4801594a5e3af6530c989"},"createdAt":{"$date":"2015-07-14T03:20:53.617Z"},"folder":"55a45d64b8c002e65f629fc3","language":"javascript","maxSubmissions":"","name":"<b>DIY:</b> User height in cm","num":6,"onSubmit":"// pds needs updating\n// console.log(\"checking User height in cm\");\nvar soln_inputs = [ [0,10], [5,3], [6,7], [2,11] ];\nvar soln_outputs = [ [25], [160], [201], [89] ];\n\n// callbacks\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style correctness\n  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (style.nTNC < 2) { fail.s(\"must convert both input strings to numbers with calls to Number()\", 1/8); }\n    if (style.nDV > 6) { fail.s(\"you dont need more than 6 variables\", (1/8) ); }\n    if (style.nDV < 2) { fail.s(\"you must declare and use at least 2 variables\", (1/8) ); }\n    if (style.nUDV != 0) { fail.s(\"you used undeclared variable(s): declare all variables\", (1/8) ); }\n    if (style.nUUDV != 0) { fail.s(\"you declared variable(s) that were not used: use what you declare\", (1/8) ); }\n    if (style.hasOTAOL) { fail.s(\"need one alert, with a variable or expression as parameter\", (1/2) ); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n//console.log(\"end correctness check\");\t\t\t\t\t\t\t\t","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that will convert a person's height from feet and inches into centimeters.  Print out the centimeter height as a single number.\n</b></font>\n</p> \n<p>\nAsk the user for two numbers.  First prompt for the number of feet in the user's height; then prompt for the number of inches.  These numbers will be saved in 2 different variables.  Convert the user's height into centimeters and print out the result rounded to the nearest integer value. \n\n<p>\nUse this conversion factor: there are 2.54 cm in an inch.  Also, remember to convert the user's input text into numbers as needed.\n</p>\n<p>\n<i>Example</i>: assume the user is 5' 9\" tall.  The first prompt (feet) gets the 5; the second prompt (inches) get the 9. Converting, 5 feet is 5*12 or 60 inches.  Add in 9\" and we have 69\".  Multiply by 2.54 cm/inch and we have 175.26 and that rounds to 175.","type":"diy","updatedAt":{"$date":"2018-01-14T13:01:41.938Z"},"value":{"correct":"2","style":"1"},"vidURL":""},{"_id":{"$oid":"55a481bc94a5e3af6530c98a"},"createdAt":{"$date":"2015-07-14T03:27:56.556Z"},"folder":"55a45d64b8c002e65f629fc3","language":"javascript","maxSubmissions":"","name":"<b>DIY:</b> Pythagoras 3","num":7,"onSubmit":"// pds needs updating\n// console.log(\"checking User height in cm\");\nvar soln_inputs = [ [1,1], [3,4], [4.12,6.54] ];\nvar soln_outputs = [ [1.4142], [5], [7.7295] ];\n\n// callbacks\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style correctness\n  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (style.nTNC < 2) { fail.s(\"must convert both input strings to number with calls to Number()\", 1/8); }\n    if (style.nDV > 6) { fail.s(\"you dont need more than 6 variables\", (1/8) ); }\n    if (style.nDV < 3) { fail.s(\"you must declare and use at least 3 variables;\", (1/8) ); }\n    if (style.nUDV != 0) { fail.s(\"you used undeclared variable(s): declare all variables\", (1/8) ); }\n    if (style.nUUDV != 0) { fail.s(\"you declared variable(s) that were not used: use what you declare\", (1/8) ); }\n    if (style.hasOTAOL) { fail.s(\"need one alert, with a variable or expression as parameter\", (1/2) ); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n//console.log(\"end correctness check\");\t\t\t\t\t\t\t","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that will print out the length of the hypotenuse of a right triangle with side lengths given by the user as input from the keyboard. \n</b></font>\n</p> \n<p>\nLet's do the Pythagorean theorem yet again.  Like we did with Quadratic 3, we will get values from the user for the sides of a right triangle and store them in variables.  Use a prompt statement to get a value for one side and store it in a variable a. Then prompt for the other side and store it in a variable b.  Compute the length of the hypotenuse and store it in a variable h.  Finally, truncate the value of h to 4 decimal places and print it out.  \n</p>\n<p>\n<b>Development notes:</b>  We can build program from the one you wrote back in Pythagoras 2.  Remember to convert the text you get from the user into numbers.  \nAlso, to truncate to 4 places, use Math.floor() as we did in the video problem, but multiply and divide by 10000 rather than 1000.\n</p>","type":"diy","updatedAt":{"$date":"2018-01-14T13:01:46.656Z"},"value":{"correct":"2","style":"1"},"vidURL":""},{"_id":{"$oid":"55c4286db270a8af25e3e410"},"createdAt":{"$date":"2015-08-07T03:39:25.765Z"},"folder":"53cef2574fae0fbd7f731234","language":"javascript","maxSubmissions":"","name":"Overview","num":0,"onSubmit":"// I/O pairs\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [5] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n  // if (ff) { fail.s(\"no style points since functional failed\"); }\n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (style.nDV != 1) { fail.s(\"only need to declare a single variable;\", (1/4) ); }\n    if (style.nUDV > 0) { fail.s(\"you used undeclared variable(s): declare all variables;\", (1/4) ); }\n    if (style.nUUDV > 0) { fail.s(\"you declared variable(s) that were not used: use what you declare;\", (1/4) ); }\n    if (!style.hasOTAOV) { fail.s(\"write one call to alert, using a variable as parameter;\", (1/4) ); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);","phase":1,"testMode":false,"text":"<b><font color=firebrick>Variables</font></b>\n<p>\nVariables are storage locations in memory with symbolic names. These symbolic names are used in your program to specify where in memory to store data values, and which memory locations to retrieve data from. \n<ul>\n<li>The main mechanism for storing data into memory is the assignment statement\n<li> retrieving data from memory is done by expression evaluation\n</ul>\n</p>\nTo complete this problem, type this variable declaration, with an initialization (assigning the first value to the variable):\n<font size=+1>\n<pre>\n    var x = 5;\n</pre>\n</font>\nThen type this to do retrieval:\n<font size=+1>\n<pre>\n    alert(x);\n</pre>\n</font>\nThe variable name \"x\" here is a simple expression.  Evaluating such as expression means going to the storage location for \"x\" in memory and retrieving the data value stored there.  Since the alert statement evaluates the expression inside the parentheses, it retrieves the 5 that was stored in \"x\" when it was declared.\n</p>\n<p>\nRun your program locally. You have declared (created) a variable \"x\", stored a value 5 into it, \nand then retrieved that value to print out. Now submit it for scoring.\n<br/><br/>\nNote: If you did as requested, you will see that you got no style points. The error message says\n<pre>\n    Style error: first line must be: \"use strict\";\n</pre>\nMaking this the first line of a JavaScript program tells the language processor to be sure you declare all variables you use. This means all variables like \"x\" must have a \"var x\" declarations someplace in the program. Good style is to put your declarations up top. We will cover this in more detail as we go along and get more complex language structure to work with.\n<br/><br/>\nSo from here on (unless noted otherwise) make sure the first line of your program is this:\n<pre>\n  \"use strict\";\n</pre>\nAdd that line and try submitting again.","type":"twit","updatedAt":{"$date":"2018-01-14T12:59:54.269Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/var.overview.mp4"},{"_id":{"$oid":"55c572974a352c5a5ee89725"},"createdAt":{"$date":"2015-08-08T03:08:07.579Z"},"folder":"53cef2444fae0fbd7f731233","language":"javascript","maxSubmissions":"","name":"Boolean \"AND\"ing","num":5,"onSubmit":"// I/O pairs to define functional behavior\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [false] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (!style.isJOTFC) { fail.s(\"use a single output, nothing else\"); }\n  if (!style.hasOTAOBE) { fail.s(\"write one call to alert, using a boolean expression\"); }\n\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>Write a program that prints out the result of combining the boolean value <b>true</b> with the boolean value <b>false</b>\nusing the <b>AND</b> operator (written <b>&&</b>). </font> We often refer to this as \"AND-ing two boolean expressions together\".\n</p>\n<p>\nWhen we combine two number values together using a number operation (like *), the result is a number.  In the same way, the result of combining two boolean values together using a boolean operator (like &&) will be a boolean value.  There are only 2 boolean values, so evaluating a boolean expression will produce either <b>true</b> or <b>false</b>.  Which value we get depends on the rules for the\noperator being used.  For AND, the result will only the true if both the operands are true.  If one of the two operands is false (or both), the\nresult will be false as well.  A table that expresses these 4 possible combinations along with the result is called a <b>truth table</b>.\n</p>\n<p>\nGiven these rules, what do you expect your program to print when you evaluate the expression <b> true && false </b> ?\n</p>\n<p>\nHere is the full truth table for the logical AND operator:\n<pre>\n   P        Q          P && Q\n ------   -------    ----------         logical AND (also called conjunction)\n  true     true       true\n  true     false      false\n  false    true       false\n  false    false      false\n</pre>\n</p>\n\n","type":"twit","updatedAt":{"$date":"2018-02-07T12:53:51.579Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/expr.booland.mp4"},{"_id":{"$oid":"55c576d34a352c5a5ee8972a"},"createdAt":{"$date":"2015-08-08T03:26:11.332Z"},"folder":"53cef2444fae0fbd7f731233","language":"javascript","maxSubmissions":"","name":"<B>DIY:</b> Boolean \"OR\"ing","num":11,"onSubmit":"// I/O pairs to define functional behavior\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [true] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (!style.isJOTFC) { fail.s(\"use a single output, nothing else\"); }\n  if (!style.hasOTAOBE) { fail.s(\"write one call to alert, using a boolean expression containing the || operator\"); }\n\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>Write a program that prints out the result of combining the boolean value <b>false</b> with the boolean value <b>true</b>\nusing the <b>OR</b> operator ( written <b>||</b> ). </font> \n<br/>We often refer to this as \"OR-ing two boolean expressions together\".\n</p>\n<p>\nThe rules for OR are these: the result will only be false if both the operands are false.  If one of the two operands (or both) is true, the\nresult will be true as well.\nGiven these rules, what do you expect your program to print when you do false || true ?\n</p>\n<p>\nHere is the full truth table for the logical OR operator:\n<pre>\n   P        Q          P || Q\n ------   -------    ----------         logical OR (also called disjunction)\n  true     true       true\n  true     false      true\n  false    true       true\n  false    false      false\n</pre>\n</p>\n","type":"diy","updatedAt":{"$date":"2018-02-07T12:53:51.586Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"55ca9c52574af0356821f89d"},"createdAt":{"$date":"2015-08-12T01:07:30.052Z"},"folder":"53cef2574fae0fbd7f731234","language":"javascript","maxSubmissions":"","name":"<B>DIY:</b> Fun with Distance, Time, and Speed","num":11,"onSubmit":"// I/O points\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [18.53526570048309] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n  // if (ff) { fail.s(\"no style points since functional failed\"); }\n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (style.nDV > 10) { fail.s(\"no need to declare more than 10 variables;\", (1/8) ); }\n    if (style.nDV < 4) { fail.s(\"declare and use at least 4 variables;\", (1/8) ); }\n    if (style.nUDV != 0) { fail.s(\"you used undeclared variable(s): declare all variables;\", (1/16) ); }\n    if (style.nUUDV != 0) { fail.s(\"you declared variable(s) that were not used: use what you declare;\", (1/16) ); }\n    if ( !( style.hasOTAOV || style.hasOTAOBE ) ) { \n      fail.s(\"use one alert, with a string expression parameter containing variables;\", (3/4) ); \n    }\n  }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick><b>\nWrite a program to solve the following word problem.\n</b></font>\nPrint out a single number (no text with it).\n</p>\n<p>\nWord problem: A bicyclist travels 43.6 miles in 3 hour and 27 minutes.  What was the average speed of the cyclist in feet per second?  \n</p>\n<p>\nTo solve this we would need to compute the total number of feet traveled, and then divide that by the total number of seconds it took\nto travel that distance.  Since we are practicing declaring and using variables, use at least 4 variables; there is no need to use more than 10.","type":"diy","updatedAt":{"$date":"2018-01-14T13:01:01.802Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"55caa592574af0356821f8a5"},"createdAt":{"$date":"2015-08-12T01:46:58.107Z"},"folder":"53cef2574fae0fbd7f731234","language":"javascript","maxSubmissions":"","name":"<B>DIY:</b> Final class grade","num":12,"onSubmit":"// I/O points\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [\"Future Coder has an average grade of 85.775\"] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n  // if (ff) { fail.s(\"no style points since functional failed\"); }\n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (style.nDV > 7 ) { fail.s(\"no need to declare more than 7 variables;\", (1/8) ); }\n    if (style.nDV < 3 ) { fail.s(\"declare and use at least 3 variables;\", (1/8) ); }\n    if (style.nUDV != 0) { fail.s(\"you used undeclared variable(s): declare all variables;\", (1/16) ); }\n    if (style.nUUDV != 0) { fail.s(\"you declared variable(s) that were not used: use what you declare;\", (1/16) ); }\n    if ( !( style.hasOTAOV || style.hasOTAOBE ) ) { \n      fail.s(\"use one alert, with a string expression parameter containing variables;\", (3/4) ); \n    }\n  }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick><b>Write a program to compute and print the final course\ngrade for a student, expressed as a number between 0 and 100.\n</b></font>\n</p>\n<p>\nThe student's name is Future Coder, and the student has 4 assignment grades: 99.0, 87.5, 71.8, and 97.2. The student also has these two exam grades: 74.0 and 88.25.  Assignments \nare worth 60% of the final grade, and exams are worth 40%.   \n</p>\n<p>\nPrint the average grade using this output format:\n<pre>\nFuture Coder has an average grade of 85.775\n</pre>\nNo blanks are ahead of the \"Future\" and no blanks follow the number. Since we are practicing declaring and using variables, have at least 3 and no more than 7.","type":"diy","updatedAt":{"$date":"2018-01-14T13:01:07.104Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"55de2698678bca0e40b58247"},"createdAt":{"$date":"2015-08-26T20:50:32.381Z"},"folder":"53f29f9a41b3137f58803191","language":"javascript","maxSubmissions":"","name":"Write two functions","num":8,"onSubmit":"//console.log(\"checking Function calls a function\");\nvar soln_inputs = [ [ 3 ], [5], [-4], [0.5] ];\nvar soln_outputs = [ [27], [125], [-64], [0.125] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { truVec[i] || fail.f(\"failed functional correctness\"); }\n  }\n  // check for myMain function format\n  if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n  if (style.nTFD < 2) { fail.s(\"declare at least 2 functions\"); }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n//console.log(\"end correctness check\");          ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that will ask the user for a number, and then will print out that number cubed.\n</b></font> \n<br/>You will do this by writing a \"cube\" function (in addition to myMain).\n</p> \n<p>\nIn this program we will do something similar to the last one, in that we will write the myMain() function, and the code in myMain will call\na second function.  However, we will also write that second function as part of our program code.  So we will write (define) these 2 functions:\n\n<ol>\n<li>\nWrite (define) a function myMain that asks the user for a number.  \nThen call a function called \"cube\" and pass into it the number the user provided as input\n</li>\n<li>\nWrite (define) the function \"cube\" to take one argument.  The code in the body of cube will take that argument and print out its value cubed.\n</li>\n</ol>\n<br/>\nUse the myMain format you learned in the previous problem, meaning you will have 2 function definitions (myMain and cube) and then\na single call to myMain() to get execution kicked off.  Note that function cube is doing the printing in this program.  Function cube is not returning\na value in the same way that Math.sqrt does, but we are going to get to that point in a subsequent problem.\n</p>","type":"twit","updatedAt":{"$date":"2018-01-16T19:54:15.656Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/simpfunc.writetwo.mp4"},{"_id":{"$oid":"55de39f0678bca0e40b5826b"},"createdAt":{"$date":"2015-08-26T22:13:04.448Z"},"folder":"53f29f9a41b3137f58803191","language":"javascript","maxSubmissions":"","name":"<b>DIY:</b> Math object functions","num":12,"onSubmit":"//console.log(\"checking Function calls a function\");\nvar soln_inputs = [ [3,2 ], [-1,4], [0,2], [-0.5, 2] ];\nvar soln_outputs = [ [3,3,3,9], [1,-1,4,1], [0,0,2,0], [0.5, 0, 2, 0.25] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesn't follow myMain function format\", (1/4)); }\n    if (style.nTNC == 0) { fail.s(\"must convert both input strings to number with calls to Number()\", 1/4); }\n    if (style.nDV > 4) { fail.s(\"you dont need more than 4 variables\", (1/8) ); }\n    if (style.nUDV != 0) { fail.s(\"you used undeclared variable(s): declare all variables\", (1/16) ); }\n    if (style.nUUDV != 0) { fail.s(\"you declared variable(s) that were not used: use what you declare\", (1/16) ); }\n    if (style.hasOTAOL) { fail.s(\"need one alert, with a variable or expression as parameter\", (1/4) ); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n//console.log(\"end correctness check\");          ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that will exercise some other Math object functions.  See the details below.\n</b></font>\n</p> \n<p>\nWe have seen a few Math object functions so far: Math.sqrt(), Math.floor(), Math.round(), Math.min(). \n In this program we will learn about and use a few more.\n<pre>\n  1) Math.abs( x ) takes one argument and produces the absolute value of its value\n  2) Math.ceil( x ) takes one argument and produces the closest integer greater than or equal to \n                    the argument value (this is like Math.floor, but goes larger instead of smaller).\n  3) Math.max( x, y ) takes two numbers and returns the value of the larger \n  4) Math.pow( b, e ) takes two numbers and returns the first raised to the power given by the second.\n</pre>\nBe sure to google up the <b>JavaScript Math object</b> to see what other useful things are in there.\n</p>\n<p>\n<b>For this program</b>, write the function myMain to ask the user for one number. Then print out the absolute value of that number,\nfollowed by the ceiling of that number; use two separate alerts to do this.\n</p>\n<p>\nThen ask the user for another input, a second number (using a second prompt statement).\nPrint out the max of the first number and the second.  Then print the first number raised to the power of the second.\nUse separate alerts for the outputs.\n</p>\n<p>\nAs with previous problems in this folder, make sure to use proper myMain format.\n</p>\n","type":"diy","updatedAt":{"$date":"2018-01-16T19:54:39.328Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"55de3b16678bca0e40b5826c"},"createdAt":{"$date":"2015-08-26T22:17:58.112Z"},"folder":"53f29f9a41b3137f58803191","language":"javascript","maxSubmissions":"","name":"Math.min: takes two args","num":7,"onSubmit":"//console.log(\"checking Function calls a function\");\nvar soln_inputs = [ [ 17, 3.1 ], [0, -1], [-3.4, -3.3], [2,101], [-100, 0.2] ];\nvar soln_outputs = [ [3.1], [-1], [-3.4], [2], [-100] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { truVec[i] || fail.f(\"failed functional correctness\"); }\n  }\n  // check for myMain function format\n  if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n//console.log(\"end correctness check\");          ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that gets two numbers from the user as input (using two successive prompt statements) and then prints out the smaller number.\n</b></font>\n</p> \n<p>\nLets look at another useful function in the Math object: <b>Math.min</b>.  This function will find the smaller of 2 numbers.  \nThe two numbers you want it to compare are passed in as parameters.  So far we have seen \nfunctions that are passed 1 argument ( like Math.sqrt(16) ).  We have seen that to do this you put the number you want the function to work\nwith in the parentheses when you call the function.\n</p>\n<p>\nFor a function that takes two arguments, you put both in the parentheses with a comma between them, like this:\n<pre>\n  Math.min( 12, 7 )  will produce the value of the second argument, 7\n  Math.min( 5, 14 ) will produce the value of the first argument, 5\n  Math.min( x, y ) will examine the values stored in variables x and y, and produce with ever value is smaller\n</pre>\n\nJust like with Math.sqrt() you can think of the call to the function \"turning into\" the number that the function computes and produces.\n</p>\n<p>\nTo complete this program, write a myMain that gets two numbers from the user as input (using two successive prompt statements).\nDon't forget to convert the text that the user types into number date (by calling the Number function on what the prompt produces).\nThen pass the two numbers to Math.min and print out the number that Math.min returns.\n</p>","type":"twit","updatedAt":{"$date":"2018-01-16T19:54:10.461Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/simpfunc.mathmin.mp4"},{"_id":{"$oid":"55de7a58678bca0e40b58295"},"createdAt":{"$date":"2015-08-27T02:47:52.553Z"},"folder":"53f29f9a41b3137f58803191","language":"javascript","maxSubmissions":"","name":"<b>DIY:</b> Main function calls helper","num":13,"onSubmit":"//console.log(\"checking Function calls a function\");\nvar soln_inputs = [ [2,3], [3,4], [1,5], [5,2], [0.5,2], [4,0.5], [-1,7], [-3,5] ];\nvar soln_outputs = [ [4], [40.5], [0.5], [12.5], [0.125], [1], [-0.5], [-121.5] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesn't follow myMain function format\", (1/4)); }\n    if (style.nTNC < 2) { fail.s(\"must convert both input strings to number with calls to Number()\", 1/4); }\n    if (style.nDV > 6) { fail.s(\"you dont need more than 6 variables\", (1/8) ); }\n    if (style.nUDV != 0) { fail.s(\"you used undeclared variable(s): declare all variables\", (1/16) ); }\n    if (style.nUUDV != 0) { fail.s(\"you declared variable(s) that were not used: use what you declare\", (1/16) ); }\n    if (style.hasOTAOL) { fail.s(\"need one alert, with a variable or expression as parameter\", (1/4) ); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n//console.log(\"end correctness check\");          ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that will ask the user for two numbers as input, and then raise the first number to the second number power, and print 1/2 of that value.\n</b></font>\n</p> \n<p>\nIn this program you will write (define) two functions: the main function \"myMain\" and a helper function \"halfpow\".  \nFunction halfpow will compute the needed value from the two input numbers; myMain will print that computed result.\n<ol>\n<li>\nWrite (define) a function myMain that asks the user to input 2 numbers (using two separate prompt statements) and save them in variables.\nThen it will call a function called \"halfpow\" and pass into it the two numbers the user gave as parameters. Do this by passing the two variables\nyou saved the input into.  Function halfpow will return the computed result, and myMain will print it out.\n</li>\n<br/>\n<li>\nWrite (define) the function \"halfpow\" to take two arguments.  The code in the body of halfpow will first take those two arguments\nand compute Math.pow on them... in other words, will compute the first argument raised to the power indicated by the second.\nAfter that, halfpow will cut the result in half and return it (like Math.pow or Math.sqrt returns a result).\n</li>\n</ol>\n\nUse the myMain format you learned in the previous problem, meaning you will have 2 function definitions (myMain and halfpow) and then\na single call to myMain() to get execution kicked off.\n</p>","type":"diy","updatedAt":{"$date":"2018-01-16T19:54:44.59Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"55e5c785741badf5159ee9d3"},"createdAt":{"$date":"2015-09-01T15:43:01.399Z"},"folder":"53cef2744fae0fbd7f731236","language":"javascript","maxSubmissions":"","name":"Counter: count loop body execs","num":2,"onSubmit":"// define I/O function points\nvar soln_inputs = [ [] ];\nvar soln_outputs = [ [26] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    if (style.nAFL != 1) { fail.s(\"use one for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);      ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that will count how many times a loop body executes. The parameters of the loop (start, stop, increment) will be constants (0, 25, 1).\n</b></font>\n</p> \n<p>\n Use a for loop, and run it from 0 to 25, including both 0 and 25.\nYou will also need to create and use a \"counter\", a variable that has its value bumped up by 1 when some event happens that you wish to count.\nSince we are summing, the counter will be initialized to 0 (the additive identity) outside the loop.\n<br/><br/>\nIn this case, the event we want to count is each time the loop body executes.  To do this we will put the increment statement for the counter\ninside the loop body.\nWhen the loop is done, print out the count.\n<br/><br/>\nWe have seen that the loop index variable acts as a counter of sorts.  In this lesson we are learning that the general idea of a counter is useful in many contexts, and we can create a counter as needed with a variable that we increment at appropriate times or points during execution.\n<br/><br/>\n<b>Style:</b> Use one for loop and no other loops.\n\n\n\n\n\n","type":"twit","updatedAt":{"$date":"2018-01-24T15:48:52.229Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/forloop.counter.mp4"},{"_id":{"$oid":"55e5c799741badf5159ee9d4"},"createdAt":{"$date":"2015-09-01T15:43:21.125Z"},"folder":"53cef2744fae0fbd7f731236","language":"javascript","maxSubmissions":"","name":"Counter: count based on user input","num":3,"onSubmit":"// define I/O function points\nvar soln_inputs = [ [5], [0], [-1] ];\nvar soln_outputs = [ [6], [1], [0] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    if (style.nAFL != 1) { fail.s(\"use one for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);      ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that will count how many times a loop body executes.  The loop should run from 0 to (and including) a number given as input by the user.\n</b></font>\n</p> \n<p>\nWe will modify the previous counter program to use user input.\nWrite a program that first asks the user to input a positive integer.\n</p>\n<p>\nThen create a for loop that will run from 0 to the user's number, including both.  \nYou will also need to create a \"counter\" like before, initialized properly.\nCount how many times the loop body runs and print that count when the loop is done executing.\n</p>\n<p>\nThe lesson to learn in this program is that the loop parameters... where the index starts, where it ends... can be determined from a variable; it \ndoes not have to be a constant as we have done prior to this.\n</p>\n<p>\n<b>Style:</b> Use one for loop and no other loops.\n</p>","type":"twit","updatedAt":{"$date":"2018-01-24T15:48:59.69Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/forloop.counteruser.mp4"},{"_id":{"$oid":"55f19e31bb72d7cc1700846d"},"createdAt":{"$date":"2015-09-10T15:13:53.488Z"},"folder":"5902b4167bb0b09c0d2a6422","language":"javascript","maxSubmissions":"","name":"Sum Fact (nested for loops)","num":10,"onSubmit":"var soln_inputs = [ [3,\"sum\", 4,\"fact\", 5,\"sum\", 6,\"fact\"], [1,\"fact\", 20,\"fact\", 20,\"sum\", 1,\"sum\" ] ];\nvar soln_outputs = [ [6,24,15,720,\"ok done\"], [1,2432902008176640000,210,1,\"ok done\"] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    if (style.nAFL > 3) { fail.s(\"use three for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);         ","phase":2,"testMode":true,"text":"<font size=4>Let's put some of the basic bricks we have learned together into a larger program.  Part of the hard work of programming\nis designing the appropriate combinations and sequences of smaller program components that will work together to solve the problem at hand.\nThere is only one way to become good at it, and that is to practice and solve problems.\n<br/><br/>\nThis program will get input from the user 4 times.  Do this inside a for loop.\nFirst ask the user for a positive integer.  Store this in a variable.\nThen ask the user to type in either \"fact\" or \"sum\".  Check the input value and based on\nwhat has been typed you will either do a factorial computation on the number the user gave, or a summation computation\nadding the integers from 1 to the user's number (inclusive).\n<br/><br/>\nOnce you have decided which computation the user wants, \nyou can use the code you wrote for factorial (and summation).\nOutput will be the answer you get from either factorial or summation.\n<br/><br/>\nOnce all 4 user loops are done, print \"ok done\" and end.\n<br/><br/>\nThis illustrates nested for loops.  The main program is one large for loop that\ncauses the interaction with the user to happen 4 times.\nInside the body of the main loop you will have \"smaller\" inner for loops... one to do factorial,\nand one to do summation.\nWhich inner loop you execute is decided by a conditional (if-the-else) check on the user's\ntext input \"fact\" or \"sum\".\n<br/><br/>\nSample execution:\n<pre>\nPositive integer?  3\nType of computation? fact\n6\nPositive integer?  5\nType of computation? sum\n15\nPositive integer?  6\nType of computation? sum\n21\nPositive integer? 6\nType of computation? fact\n720\nok done\n</pre>","type":"diy","updatedAt":{"$date":"2018-01-05T18:59:04.556Z"},"value":{"correct":"2","style":"1"},"vidURL":""},{"_id":{"$oid":"55f48ff09cb735dc4a3e1545"},"createdAt":{"$date":"2015-09-12T20:49:52.73Z"},"folder":"540fbc9d54b9a690402df1d9","language":"javascript","maxSubmissions":"","name":"Overview: input errors, and \"return\"","num":0,"onSubmit":"var soln_inputs = [ [] ];\nvar soln_outputs = [ [5] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLAP != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLF != 0) { fail.s(\"use no for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                         ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Overview: Input errors\n</b></font>\n</p> \n<p>\nUp to now we have asked the user for input and have assumed that the user provides values that correctly match what we want.\nHowever, we cannot in general write programs using this assumption.  \n<b>Users make errors.</b> We need to write our programs to deal gracefully with such errors.\nAt the very minimum we can detect input errors, notify the user, and end execution.  \nWe might also ask the user to do the input again, correctly and keep asking until the errors end.\nAs we get more sophisticated we could even try to adapt the input values, correct them and use them in a new form.  \n<br/><br/>\nThere are many ways a user can give erroneous input, but for now we will deal with 3 major types:\n<ul>\n<li><b>type error:</b> the user is asked to input a number but give something like \"go heels\", which is not a number\n</li>\n<li><b>format error:</b> the use is asked for an integer, but gives something like 24.713 which is not an integer\n</li>\n<li><b>range error:</b> the user is asked for a positive integer less than 50, but types in something like -5 or 101.\n</li>\n</ul>\nWe will see how to check for each of these in the programs in this section. For now to complete this overview\ntype this code in as the body of function myMain and run it locally (don't submit yet for scoring):\n<br/>\n<pre>\n  var x =5;\n  alert(x);\n  // return;\n  var y=7;\n  alert(y);\n</pre>\nNote that the \"return\" statement is commented out initially.  When we run this program we see two alert boxes pop up, the first with ouput \"5\" and the second with output \"7.\n<br/><br/>\nNow remove the comment slashes before the \"return\" line.  Now the return statement will execute.  Run the code again.  \nNow what you will see is that the code before the \"return\" executes, and the code after does not.  So the output now is the single output \"5\" and then \nmyMain stops executing at the return.  We can use the \"return\" statement at any point in\na function to make the function cease executing and go back to the part of the program where it was called.\n<br/><br/>\nSubmit the altered code, with the return, for scoring.","type":"twit","updatedAt":{"$date":"2018-02-01T15:56:04.669Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/valid.overview.mp4"},{"_id":{"$oid":"55f9be8b5dfc5173378f8519"},"createdAt":{"$date":"2015-09-16T19:10:03.908Z"},"folder":"5902b4167bb0b09c0d2a6422","language":"javascript","maxSubmissions":"","name":"Units Converter","num":15,"onSubmit":"var soln_inputs = [ [\"my\",23.1, \"gl\",11.7, \"q\"],\n                    [\"lg\",10.1, \"ym\", 7.3, \"gl\",100, \"q\"],\n                    [\"hi\",23,\"q\"], [\"ym\",-5,\"q\"], [\"my\",\"hi\",\"q\"], [\"q\"]\n                  ];\nvar soln_outputs = [ [\"meter to yard: 23.1 is 25.262391\", \"gallon to liter: 11.7 is 44.289297\"],\n                     [\"liter to gallon: 10.1 is 2.6681372\", \"yard to meter: 7.3 is 6.67512\", \n                                                            \"gallon to liter: 100 is 378.541\"],\n                     [\"error\"], [\"error\"], [\"error\"],[]\n                   ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF != 1) { fail.s(\"use one while loop\"); }\n    if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);              ","phase":2,"testMode":true,"text":"Let's write a program that will do several different kinds of units conversion (like what Google does, but considerably smaller).\nWe will make it be able to convert yards to meters, meters to yards, gallons to liters, and liters to gallons.\nThe conversion factors we will use are given below.\n<br/><br/>\nThe basic program structure will be to ask the user for an operation to perform and if that operation is \"q\" then quit the program.\nOtherwise, the user will be asked for one more input, a number, and the appropriate conversion will be done and reported.\nThen back to the top of the loop and we do it all again.\n<br/><br/>\nInput validation is required.  We must make sure numbers are numeric. Also, negative numbers make no sense so we will check for that.  \nIf any input is erroneous, we will simply print \"error\" and end execution of the program.\n<br/><br/>\nHere are the inputs to use for operations:\n<pre>\n  ym   yards to meters\n  my   meters to yards\n  gl   gallons to liters\n  lg   liters to gallons\n  q    quit\n</pre>\n<br/>\n<b>Conversion factors:</b>\n<pre>\n  1 yard    is 0.9144 meter\n  1 meter   is 1.09361 yard\n  1 gallon  is 3.78541 liters\n  1 liter   is 0.264172 gallon\n</pre>\n<br/>\n<b>Output format:</b>\n<pre>\noperation? my\nconvert what?  23.1\n<b>meter to yard: 23.1 is 25.262391</b>\noperation? gl\nconvert what? 11.7\n<b>gallon to liter: 11.7 is 44.289297</b>\noperation? q\n</pre>\n<br/>\n\n<b>Development notes</b>\n<br/>\nDo this (and all programs) one little chunk at a time. For this one, for example, maybe set up the while loop, ask the user for an operation, check to see if is\n\"q\" and end the loop/program.  Test that, then  move on.\n<br/><br/>\nNext maybe ask the user for a number to convert (assuming we get past the \"q\" input) and test it for being a number and being 0 or greater.\nTest this by giving bad inputs and making sure your program quits properly.\n<br/><br/>\nThen work on the part that implements the 4 conversions.  Set up the selection structure you want (switch, if/then/else, etc.) and get one conversion\nworking.  Test it to make sure it gives the right numbers.  Then repeat the pattern to add the other conversions.\n\n<br/><br/>\n<b>We dont write programs like we write a paper or an email. We grow a program, we evolve, we construct it like a house and make sure\nits doing the right thing as we go along (just like county inspectors show up and check the house building as it goes along).\n</b>","type":"diy","updatedAt":{"$date":"2018-01-05T18:59:04.567Z"},"value":{"correct":"3","style":"1"},"vidURL":""},{"_id":{"$oid":"55f9bea55dfc5173378f851a"},"createdAt":{"$date":"2015-09-16T19:10:29.426Z"},"folder":"5902b4167bb0b09c0d2a6422","language":"javascript","maxSubmissions":"","name":"Sequence Min and Max","num":9,"onSubmit":"var soln_inputs = [ [1,2,3,\"hi\",4,5,\"q\"], [\"q\"], [5,\"q\"], [-4,5,-6,7,-8,\"q\"], [20,50,30,10,40,\"q\"] ];\nvar soln_outputs = [ [\"bad input\"], [\"max: -Infinity\", \"min: Infinity\"], [\"max: 5\", \"min: 5\"],\n                     [\"max: 7\",\"min: -8\"], [\"max: 50\",\"min: 10\"] \n                   ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF != 1) { fail.s(\"use one while loop\"); }\n    if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);              ","phase":2,"testMode":true,"text":"We used the Math.max function earlier to find the largest of specific collection of variables.  \nWhat can we do if we need to find the largest (or smallest) of an unknown number of values?\n<br/><br/>\nWrite a program that will accept numbers from the user, one number at a time, and will stop asking for input when the user\ntypes the character \"q\".  Once the user signals quit (with the \"q\") print the largest and the smallest of the numbers given. Use two separate \nalert statements, in the order max, then min. Use the string labeling shown in the sample output below.\n<br/><br/>\nValidate the input.  If the user gives something other than a number or a \"q\", print \"bad input\" and end execution.\n<br/><br/>\nWe have a special case here.  What if the user gives a \"q\" as the very first input?  There have been no numbers to be min and max.\nWe will need two variables in the code to keep track of \"the biggest we have seen so far\" and \"the smallest we have seen so far\".\nWhen we are done, these two variables will then contain the largest and smallest number seen.\nWe need to initialize these variables to some values.  JavaScript has two special \"numbers\" that will be useful here:\n<pre>\n Infinity  // a number larger than all other numbers\n-Infinity  // a number smaller than all other numbers\n</pre>\nWe can initialize the variable we use to contain \"smallest so far\" to Infinity; this guarantees that the first number the user types will be smaller and we will keep track of that first number.  Similar reasoning is used for -Infinity and the \"largest so far\" variable.\n<br/><br/>\n<b>Sample execution</b>\n<pre>\nnumber? 12\nnumber? 5\nnumber? -12.7\nnumber? 101.2\nnumber? \"q\"\nmax: 101.2\nmin: -12.7\n</pre>\n","type":"diy","updatedAt":{"$date":"2018-01-05T18:59:04.555Z"},"value":{"correct":"3","style":"1"},"vidURL":""},{"_id":{"$oid":"55f9beca5dfc5173378f851b"},"createdAt":{"$date":"2015-09-16T19:11:06.906Z"},"folder":"5902b4167bb0b09c0d2a6422","language":"javascript","maxSubmissions":"","name":"Nested For loops","num":20,"onSubmit":"var soln_inputs = [ [2,2,70,80,3,70,83,90], [1,1,97.5], \n                    [0], [1,-3], [4, 2, -5] ];\nvar soln_outputs = [ [\"average: 75\", \"average: 81\",\"done\"], [\"average: 97.5\",\"done\"],\n                     [\"need posint\"], [\"need posint\"], [\"need posint\"]\n                   ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 2) { fail.s(\"use two for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                             ","phase":2,"testMode":true,"text":"This program illustrates the use of \"nested\" loops... that is a loop inside another loop.  We call the containing loop the \"outer loop\" and we call the contained loop the \"inner loop\".  This problem will have definite parameters so we will use <i>for</i> loops.\n<br/><br/>\nWe will write a data processing application for computing grade averages for a class of students.\nFirst the program will ask the user for a single number; this will be the total number of students in the class.  This input must be validated\nto make sure it is a number, it is an integer, and it is greater than 0.  If any of these fail print \"need posint\" and end execution.\n<br/><br/>\nOnce we get a valid positive integer, we will use that as the upper limit for a <i>for</i> loop.\nEach time through the loop body we will handle grades for one student.\nWe will ask the user for another number, which is the number of grades for the current student.\nValidate it (it must be a number, an integer, and greater than 0). If it fails validation, print \"need posint\" and \nend execution.\nOnce we get a valid positive integer, use it as the upper limit for the inner for loop.\nInside the inner loop we will get grades (validate to be positive number, but non-integer is ok) one at a time and sum them up.\nIf validation fails print \"need posint\" and end execution.\nOnce the inner for loop is done compute the average and print it (format shown below).\n<br/><br/>\nOnce the outer loop is finished and all students are processed, print \"done\" and end execution.\n<br/><br/>\nMake the output look like this sample execution:\n<pre>\nHow many students? 2\nstudent 1: how many grades? 2\ngrade 1: 70\ngrade 2: 80\naverage: 75\nstudent 2: how many gradaes? 3\ngrade 1: 70\ngrade 2: 83\ngrade 3: 90\naverage: 81\ndone\n</pre>","type":"diy","updatedAt":{"$date":"2018-01-05T18:59:04.573Z"},"value":{"correct":"3","style":"1"},"vidURL":""},{"_id":{"$oid":"5615fca411f539f97da0f7a9"},"createdAt":{"$date":"2015-10-08T05:18:28.425Z"},"folder":"53cef2e94fae0fbd7f73123b","language":"javascript","maxSubmissions":"","name":"<b>DIY:</b> genRandNum function","num":4,"onSubmit":"var soln_inputs = [ [2,5], [9,45], [4.3,12.2] ];\nvar soln_outputs = [ [2.3,2.6], [12.6,16.2], [5.09,5.88] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                         ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program to generalize the lessons we have learned about generating random numbers over a range. Details follow.\n</b></font>\n</p> \n<p>\nWrite a utility function that will generate a random number in a range.\nCall this function \"genRandNum\".  It will take two arguments: the small end of the range, and the large end of the range.\nThe small end of the range in included (possible to generate); the large end of the range is excluded.  \n</p>\n<p>\nFor example, if we want a random number in the range 15 to 55, we would call \n<pre>\n  genRandNum(15,55);\n</pre>\nand the result returned will be in the interval [ 15, 55 ) .\nUse Math.random() to do this.  However, you will have to manipulate the number returned  in\norder to get it into the needed range.  This is similar to What we did in the previous random VID bricks, except we are\ngeneralizing it now to any range by making it a function with parameters.\n</p>\n<p>\nWrite a myMain function to exercise your genRandNum function.  First ask the user for the low end of the range (a number, no need to validate), then ask for the upper end of the range (a number, no need to validate).  Then call your genRandNum function and pass in the ends of the range.\nAlert the number that is returned. Then repeat this... call genRandNum again (using the same range parameters), and alert the number returned.\n</p>","type":"diy","updatedAt":{"$date":"2018-03-01T21:05:00.907Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"5615fccb11f539f97da0f7aa"},"createdAt":{"$date":"2015-10-08T05:19:07.335Z"},"folder":"53cef2e94fae0fbd7f73123b","language":"javascript","maxSubmissions":"","name":"<B>DIY:</B> genRandInt function","num":5,"onSubmit":"var soln_inputs = [ [3,8], [6,59], [0,109], [55,135], [-5,15] ];\nvar soln_outputs = [ [3,4], [11,16], [11,22], [63,71], [-3,-1] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                         ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program to generalize the lessons we have learned about generating random integers over a range.  Details follow.\n</b></font>\n</p> \n<p>\nWrite a utility function that will generate a random <b>integer</b> in a range.\nCall this function \"genRandInt\".  It will take two arguments: the small end of the range, and the large end of the range.\n</p>\n<p>\nFor example, if we want a random number in the range 15 to 55 (inclusive each end), we would call \n<pre>\n  genRandNum( 15, 55 ) ;\n</pre>\nand the result returned will be in the interval [ 15, 55 ]. So we expect that it is possible to get both 15 and 55 from our function.\n</p>\n<p>\nUse Math.random() to do this.  However, you will have to manipulate the number returned  in\norder to get it into the needed range.  This is similar to What we did in genRandNum, except we have to use Math.floor\nas well to make integer return values.\n<br/><br/>\nFor the myMain function, first ask the user for the low end of the range (an integer, no need to validate), then ask for the upper end of the\nrange (an integer, no need to validate).  Then call your genRandInt function and pass in the ends of the range.\nAlert the integer that is returned.  Then repeat this... call genRandInt again (using the same range parameters), and alert the integer returned.\n</p>","type":"diy","updatedAt":{"$date":"2018-03-01T21:05:05.984Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"564224643bdff01f740bcf9e"},"createdAt":{"$date":"2015-11-10T17:07:48.725Z"},"folder":"53cef35d4fae0fbd7f73123f","language":"javascript","maxSubmissions":"","name":"Array handling","num":2,"onSubmit":"var soln_inputs = [ [] ];\nvar soln_outputs = [ [\"looping\",360,\"recursion\",360] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL > 0) { fail.s(\"use no  while loops\"); }\n    if (style.nFLAP > 1) { fail.s(\"use 1 for loops\"); }\n    if (style.nAFD < 3) { fail.s(\"need at least 3 functions declared\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                 ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that will sum up the elements in an array.  Do it two ways: iteratively (with a loop), and recursively. For each way, print the sum.\n</b></font>\n</p> \n<p>\nWe saw a task earlier (in the overview) that could be done with a loop or with recursion, both giving the same functional results.  \nIt turns out that any computation that can be done with recursion can be done with looping (and no recursion). Recursion is the functional way to do looping.\nThis is largely a theoretical consideration, as there are still many times when looping is better to use (more efficient in time and memory use).\n</p>\n<p>\nIn this program we show another example of doing one computation both recursively and non-recursively.\nWe also illustrate here the use of recursion in manipulating data structures (an array).  \nWe will write a program that processes an array of numbers two ways.\nFirst in myMain we will declare an array variable and initialize it with these 8 integers:\n<pre>\n  var nums = [10,20,30,40,50,60,70,80];\n</pre>\n</p>\n<p>\nNext we will write an iterative function that will receive an array as a parameter.  It will then sum up\nall the elements in the array and return that sum.  The iterative function will get the work done\nwith a for loop using a pattern we have done several times in other problems.\n</p>\n<p>\nNext we write a recursive function to do the same computation.  We will pass in an array, and return the sum of the elements in that array.\nThe base case happens when the array that is passed in has no elements.  We detect this case by looking at the length of the parameter array,\nand if that length is 0 we return 0 as the sum (no recursing needed).\nIf the array has a length or 1 or larger, then the strategy for recursion is to \"separate\" the array into two pieces: the first element, and the array that\nis left when we take the parameter array and take off the first element.  We can call our function recursively on this shortened array, and it will\nreturn the sum of the elements in the parameter array slots 1 on up.  We then add the first element to that and get the sum of the entire array.\n</p>\n<p>\nFinally write a myMain function that will first call the iterative function on the array, and then call the recursive function on the array.\nPrint \"looping\" and then with a second alert, print the sum returned by the iterative function. \nThen print \"recursion\" and with another alert, print the sum given by the recursive function.\n</p>\n<p>\n<b>Computer science note.</b>\nWe have said one very important aspect of a recursive function is to make sure that the recursive case is given a smaller problem to work on (and that\nthe smaller problem is shrinking down to a base case).  In previous examples, the smaller problem meant passing a smaller number as parameter.\nHere we are passing a smaller array... an array that is shorter by one element.  We are headed to the base case of a zero-length array.\n</p>","type":"twit","updatedAt":{"$date":"2018-04-03T01:29:01.675Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/recur.array.mp4"},{"_id":{"$oid":"564ab50e3bdff01f740bd359"},"createdAt":{"$date":"2015-11-17T05:03:10.569Z"},"folder":"5902b4167bb0b09c0d2a6422","language":"javascript","maxSubmissions":"","name":"Canvas and basic drawing","num":8,"onSubmit":"var soln_inputs = [ [] ];\nvar soln_outputs = [ [] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error in your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    //if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\", (2/5)); }\n    //if (style.nAFL > 5 ) { fail.s(\"We need 4 or fewer for loops\", (1/10) ); }\n    //if (style.nAWL > 1) { fail.s(\"Use no more than 5 while loop\", (1/10) ); }\n    if (style.nTFD < 3) { fail.s(\"We need at least 3 functions declared and used\", (2/5) ); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}  \n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                  ","phase":2,"testMode":true,"text":"We will write a program that will use the graphics features in HTML5 to make a simple drawing.\nHTML5 has a canvas tag that will set apart a rectangular space on a page.\nThen we establish a 2D drawing to go onto the canvas.  Then we place individual items into that drawing.\n<br/><br/>\nCut and paste the following JavaScript right after the \"use strict\"; line in your program:\n<pre>\n\n//=== supplied canvas stuff ==================================================\nvar tab = window.open();\nvar webPage = makeHTMLCanvas();  // alert(webPage);\nvar PIC = getCanvasContext();    // the canvas context... draw to this global var\n\nfunction makeHTMLCanvas() {\n  var htmlStr=\"\";\n  htmlStr += \"&lthtml>&lthead>&lt/head>&ltbody>\";\n  htmlStr += \"&lth1>Draw a Picture!!&lt/h1>\";\n  htmlStr += \"&ltcanvas id='myCanvas' width=800 height=600 \";\n  htmlStr += \"style='border:1px solid #000600;'>&lt/canvas>\";\n  htmlStr += \"&lt/body>&lt/html>\";\n  tab.document.write(htmlStr);\n  return htmlStr;\n}\n\nfunction getCanvasContext() {\n  var c = tab.document.getElementById(\"myCanvas\");\n  var context = c.getContext(\"2d\");\n  return context;\n}\n\n//=== end supplied canvas stuff ==================================================\n\n</pre>\n<br/>\nAfter this pre-supplied code, then write the code for your program.\n<br/><br/>\nYou may find this <a href=\"http://www.html5canvastutorials.com/\" target=\"_blank\">HTML5 Canvas tutorial </a> helpful.","type":"twit","updatedAt":{"$date":"2018-01-05T18:59:04.554Z"},"value":{"correct":"0","style":"0"},"vidURL":""},{"_id":{"$oid":"564bb14a7896029a225fa682"},"createdAt":{"$date":"2015-11-17T22:59:22.41Z"},"folder":"5902b4167bb0b09c0d2a6422","language":"javascript","maxSubmissions":"","name":"<b>DIY:</b> Parameterize drawCircle","num":14,"onSubmit":"var soln_inputs = [ [] ];\nvar soln_outputs = [ [] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error in your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    //if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\", (2/5)); }\n    //if (style.nAFL > 5 ) { fail.s(\"We need 4 or fewer for loops\", (1/10) ); }\n    //if (style.nAWL > 1) { fail.s(\"Use no more than 5 while loop\", (1/10) ); }\n    if (style.nTFD < 3) { fail.s(\"We need at least 3 functions declared and used\", (2/5) ); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}  \n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                  ","phase":2,"testMode":true,"text":"\nStart with the code we wrote in class for \"Canvas and basic drawing.\nIn that code we wrote a function called \"drawCircle\" that took no parameters.\nWe also wrote a function called \"drawRectangle\" that did (eventually) get some parameters so we could\ncall it repeatedly and make rectangles get drawn at different places around the canvas.\n<br/><br/>\nWrite a version of \"drawCircle\" that is similarly parameterized.","type":"diy","updatedAt":{"$date":"2018-01-05T18:59:04.564Z"},"value":{"correct":"0","style":"0"},"vidURL":""},{"_id":{"$oid":"564bb23f7896029a225fa684"},"createdAt":{"$date":"2015-11-17T23:03:27.445Z"},"folder":"5902b4167bb0b09c0d2a6422","language":"javascript","maxSubmissions":"","name":"<b>DIY:</b> makePersonObject 2","num":19,"onSubmit":"var soln_inputs = [ [ 123,\"smith\",10,20,\n                      \"yes\",234,\"jones\",20,30,\n                      \"yes\",345,\"miller\",20,25,\"no\" ] ];\nvar soln_outputs = [ [\"total payroll: 1300\",\"high rate: jones\"] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL != 1) { fail.s(\"use 1 while loop\"); }\n    if (style.nFLAP != 2) { fail.s(\"use 2 for loop\"); }\n    if (style.nAFD < 2) { fail.s(\"need at least 2 function declared\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                   ","phase":2,"testMode":true,"text":"Let's modify the previous program \"array of objects\". We will keep the same basic data and computed results, but we will change the structure of the two functions a bit. We are going to move the user input out of makePersonObject and relocate it to myMain. The values from the user will be passed to makePersonObject as arguments (4 arguments); then in makePersonObject the values of the arguments will be put into the fields when the object is manufactured. As before, makePersonObject will return the new object and in myMain that object will be put into an array. \n<br/><br/>\nOutput should be the same as before.  \nFirst, compute the total payroll. To do this, go through the array and sum up all the amounts\npaid to each worker.  Print this out with this format: \"total payroll: 1234.56\"\n<br/><br/>\nThen go through the array and find the name of the person with the highest hourly pay rate.\nPrint out the name in this format: \"high rate: smith\"","type":"diy","updatedAt":{"$date":"2018-01-05T18:59:04.572Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"5650a4907896029a225fa74a"},"createdAt":{"$date":"2015-11-21T17:06:24.74Z"},"folder":"5902b4167bb0b09c0d2a6422","language":"javascript","maxSubmissions":"","name":"<B>W.Graphics (35 pts):</B> Draw a Cards Picture","num":23,"onSubmit":"var soln_inputs = [ [] ];\nvar soln_outputs = [ [\"not auto graded\"] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    //if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\", (2/5)); }\n    //if (style.nAFL > 5 ) { fail.s(\"We need 4 or fewer for loops\", (1/10) ); }\n    //if (style.nAWL > 3) { fail.s(\"Use only 3 or fewer while loops\", (1/10) ); }\n    if (style.nTFD < 4) { fail.s(\"We need at least 4 functions declared and used\", (2/5) ); }\n    fail.s(\"style will be manually graded\");\n  }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}  \n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                  ","phase":2,"testMode":true,"text":"(30-5 pts) Due Sat. 12/5, 11:59 pm\n<br/><br/>\nYou will write a program that will use HTML5 graphics to draw a picture of your card deck and hands.\n<br/><br/>\nSee this\n<a href=\"http://www.cs.unc.edu/~stotts/COMP110-f15/assn/w.graphics.html\" target=\"_blank\" >\ndetailed description.\n</a>\n<br/><br/>\n<b>TO GET SCORED</b>\n<br/>\nThe auto-grader will score this a 0 for functionality and 0 for style.  It will be manually graded like a previous brick we did (last one in Arrays and Random).\n<br/><br/>\nWhen you are done and wish to have it manually scored, please submit it via the \"submit\" button and then click the \"share\" button on the resulting submission.\nI will see the share request and consider that a request for scoring.\nI will score this assignment one time.","type":"wall","updatedAt":{"$date":"2018-01-05T18:59:04.578Z"},"value":{"correct":"30","style":"5"},"vidURL":""},{"_id":{"$oid":"56548e307896029a225fa7a9"},"createdAt":{"$date":"2015-11-24T16:20:00.975Z"},"folder":"546eb51f7f212f1d61e5c25c","language":"javascript","maxSubmissions":"","name":"<b>CG:</b> Hands as decks","num":4,"onSubmit":"var soln_inputs = [ [] ];\nvar soln_outputs = [ [\n  \"52 cards: 5S,8D,AH,JC,AS,6C,6S,AC,2D,QD,8S,9S,7H,JS,5C,3C,9C,5D,XS,KC,KH,7S,QC,KD,3H,AD,8H,JH,2S,4D,2C,6D,7C,4H,9H,9D,QH,4C,4S,KS,3D,XD,3S,8C,QS,7D,6H,2H,JD,5H\"\n\n ] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLAP > 1) { fail.s(\"use no more than one while loops\"); }\n    if (style.nFLAP > 5) { fail.s(\"use no more than 5 for loops\"); }\n    if (style.nAFD < 4) { fail.s(\"need at least 4 functions declared\"); }\n  }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ","phase":1,"testMode":true,"text":"Start with your code fro CG4.  We are going to make a hand an object (right now it is simply as array of cards).\nNote that decks are arrays of cards with function that move the cards around.\nWe should be able to make a hand a \"deck\" then.\nWe will do with a new \"addCard\" function in the deck object.  We will make the deal method create a new deck with\n0 cards initially, and add in the proper number of cards into the hand from the deck.\n<br/><br/>\nThis one is not scored. To see if your code is working do these things.\n<ol>\n<li>Make a deck of 52 cards</li>\n<li>show the deck... see that the cards are there in order</li>\n<li>shuffle the deck</li>\n<li>show the shuffled deck</li>\n<li>deal a hand of 5 cards from the deck into a variable in myMain</li>\n<li>this hand variable is an object like the deck... so show the hand to see the first 5 cards that were in the deck</li>\n<li>show the deck again... to see the first 5 cards are gone</li>\n<li>shuffle the hand ! yes it is a \"deck\"</li>\n<li>show the hand again to see the cards in new order</li>\n</ol>","type":"twit","updatedAt":{"$date":"2018-02-02T00:04:50.026Z"},"value":{"correct":"1","style":"1"},"vidURL":""},{"_id":{"$oid":"5763f0e330ee569f726d4d15"},"createdAt":{"$date":"2016-06-17T12:45:23.898Z"},"folder":"5763f0b630ee569f726d4d14","language":"javascript","maxSubmissions":"","name":"My First Program","num":0,"onSubmit":"// I/O pairs for functional behavior\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [\"Hello world !!\"] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness  \n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (!style.isJOTFC) { fail.s(\"make a single output, nothing else\"); }\n  if (!style.hasOTAOL) { fail.s(\"make one call to alert on a string literal\"); }\n\n  // finalize and award points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\t\t\t","phase":1,"testMode":false,"text":"Our goal here is just to experience running Bricks.\n<br/>\nHowever, this will be your first program, and we will make it a classic.\n<br/>\nType this in the editor window:\n<br/><br/>\n<pre>\n  <b>alert ( \"Hello world !!\" ) ;</b>\n</pre>\n<br/>\nOnce you have typed it, click on the \"test locally\" (orange) button. This makes your browser run your program and you will see any output from that\nprogram pop up on your screen.  As you work on your programs you will use \"test locally\" to determine if your program is computing the\nproper requested outputs.  \n\n<br/><br/>\nAfter running the program locally, click the \"submit for score\" (green) button. This will send your program to my server computer\nfor scoring.  We test your code against some test data to see if it produces correct output. We also look at the code to see if it \nadheres to good structure and style.  We will discuss good style as the semester goes on.\n<br/><br/>\nAfter submitting the program you will receive feedback on how well it worked, and hopefully some points as well.\nYou can submit your code as many times as you like (unless on occasion I indicate a limit to submissions... like for an exam).\nYou will be given the highest score of all the submissions.  So if you get the problem correct, and keep messing with the code\nand break the program, you will still get the full score on it.\n<br/><br/>\nThis is intended to encourage you to make changes to your code and try different ways to get the answers computed.\n<b><i>Feel free to experiment.  Have some fun.</i></b>\n<br/><br/>\nAll your submissions are retained in our database and you can view them below the editor window.  You can reload any submission\nback into the editor window in case you want to write a new program by building on a past one.\n<br/><br/>\nAs the semester goes on, your submission can be used as well to ask for comments or assistance on a program, and to share your \ncode with the instructor for display and discussion in class.","type":"twit","updatedAt":{"$date":"2018-01-07T05:24:39.156Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/getstarted.firstprog.mp4"},{"_id":{"$oid":"588b3d528d97557636bf36fd"},"createdAt":{"$date":"2017-01-27T12:30:10.513Z"},"folder":"53f29f9a41b3137f58803191","language":"javascript","maxSubmissions":"","name":"Function returns a value","num":9,"onSubmit":"//console.log(\"checking Function calls a function\");\nvar soln_inputs = [ [ 3 ], [5], [-4], [0.5] ];\nvar soln_outputs = [ [27], [125], [-64], [0.125] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { truVec[i] || fail.f(\"failed functional correctness\"); }\n  }\n  // check for myMain function format\n  if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n//console.log(\"end correctness check\");          ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Write a program that will ask the user for a number, and then will print out that number cubed.\n</b></font> \n<br/>You will do this by writing a \"cube\" function (in addition to myMain). The cube function will also now return a value.\n</p> \n<p>\nIn this program we learn how to make a function \"return\" a value back to the place where the function was called.\nThis is what we have seen functions like Math.sqrt do.  We call it, pass in a parameter, and get a value back from the function.\nMath.sqrt does not do any printing.  \n</p>\n<p>\nTo do this, we use the <b>return</b> statement.  Using the previous program as a starting point, we will change the function <b>cube</b>\nso that it no longer has an alert statement inside it.  Instead, cube will return the value it creates back to myMain, much as Math.sqrt does.\nThen in myMain, the valued cube produces will be printed.\n</p>\n<p>\nThe net effect will be a new form of the program, but it will produce the same output as before.\nThe printing is taking place in myMain rather than in cube.\n</p>","type":"twit","updatedAt":{"$date":"2018-01-16T19:54:21.1Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/simpfunc.funcreturn.mp4"},{"_id":{"$oid":"588e552b2eadd0b43c1243b9"},"createdAt":{"$date":"2017-01-29T20:48:43.348Z"},"folder":"53cef2804fae0fbd7f731237","language":"javascript","maxSubmissions":"","name":"Overview","num":0,"onSubmit":"var soln_inputs = [ [] ];\nvar soln_outputs = [ [\"x is positive\"] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    if (style.nAFL != 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                         ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick>\n<b>Conditional Statements\n</b></font>\n</p> \n<p>\nA \"conditional\" statement, or a conditional, is the structure we use in a program to ask a question (a boolean comparison) and take some\naction, or another, based on the answer to the question.  For example, we may request from the user a positive integer between 1 and 100.  \nOnce the user gives a number, we ask the question \"is this number in the correct range?\" and if the answer if \"yes\" we then compute some formula; \nhowever, if the answer is \"no\", we report an error and do NOT try to compute the formula.\n</p>\n<p>\nConditional statements allow us to direct the flow of control in a program; that is, they allow us to skip some blocks of code when appropriate, \nor to choose one of two blocks to execute, but not both.  There are several forms of conditional.  In this module we look at the most common ones:\n<b>if-then</b>, <b>if-then-else</b>, and a \"cascade\" of choices.\n</p>\n<p>\nTo complete this overview, type the following code into the editor (in myMain format), run it locally, then submit it for score:\n<b>\n<pre>\n  var x = 5;\n  if ( x > 0 )  { alert(\"x is positive\");  }\n  if ( x < 0 )  { alert(\"x is negative\");  }\n  if (x === 0)  { alert(\"x is zero\");  }\n</pre>\n</b>\nOnce you have done this for score, try running the code with different values assigned to x, and see the different outputs you get (run\nthese trials locally only, do not submit for score).\nFor example, if you replace the first line with\n<b>\n<pre>\n  var x = -24;\n</pre>\n</b>\nThen your output should indicate that x is negative.\n</p>","type":"twit","updatedAt":{"$date":"2018-02-01T15:53:36.927Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/cond.overview.mp4"},{"_id":{"$oid":"58921594a873c2375a7d6ca8"},"createdAt":{"$date":"2017-02-01T17:06:28.062Z"},"folder":"53cef2444fae0fbd7f731233","language":"javascript","maxSubmissions":"","name":"Modulo ( % )","num":4,"onSubmit":"// I/O pairs to define functional behavior\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [2] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (!style.isJOTFC) { fail.s(\"use a single output, nothing else\"); }\n  if (!style.hasOTAOBE) { fail.s(\"write one call to alert using the number expression requested\"); }\n\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n     ","phase":1,"testMode":false,"text":"<p>\n<font color=firebrick><b> Write a program that prints the remainder when 26 is divided by 3 (integer division).</b></font>\n</p>\n<p>\nTo do this, we will use the modulo operator (or mod operator) which is expressed with the \" % \" symbol.  The mod operator can be thought of as the\n\"remainder\" operator.  If we do division on numbers in JavaScript we get floating point (or real) arithmetic. With this division, we would expect the expression \n<pre>\n  26 / 3 \n</pre>\nto produce the floating point number 8.66666666, or 8 2/3 .  In integer division (not something JavaScript does) we would say the result is 8, with 2 left over.  So what we want for remainder in this problem is the 2 in the numerator of the 2/3 remainder.  \"Two left over\".\n<br/><br/>\nIn modular arithmetic (using the mod operator) the evaluation uses integer division and the results are expressed as an integer and a remainder.  Thus we solve this problem this way:\n<pre>\n   26 % 3\n</pre>\nThe mod operator ( % ) is defined this way: a % b is the <i>remainder</i> when a is divided by b, using integer division. \nHere, the integer 3 goes into 26 completely 8 times, with 2 left over.  Therefore, the expression produces the remainder 2. Once\nyou have programmed the proper code for this problem, try other values to make sure you see how the % operator works.\nFor example, try these:\n<pre>\n  5 % 12   // expect 5\n 10 % 5    // expect 0\n  5 % 5    // expect 0\n 10 % 0    // expect error, divide by 0, Javascript gives Nan for \"Not a Number\"\n 18 % 12   // clock face is mod 12... 18 oclock is really 6 oclock PM\n</pre>\nTry some negative numbers as well.\n<br/><br/>\nOne commonly understood example of modular arithmetic is the common clock face.\nAs the hands go around over and over, we do not get 13 o'clock, then 25 o'clock, then 37 o'clock, etc as time goes by.\nRather the \"time\" resets at 12 every revolution.  So instead of 13 o'clock, we get 1 o'clock again.","type":"twit","updatedAt":{"$date":"2018-02-07T12:53:51.577Z"},"value":{"correct":"1","style":"1"},"vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/expr.modulo.mp4"},{"_id":{"$oid":"5913d77b0ad67ead1f1c94ec"},"num":1,"type":"twit","phase":1,"name":"Concept Overview: The Great 8","folder":"5763f0b630ee569f726d4d14","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/getstarted.great8.mp4","text":"<p>In this problem we will give a broad overview of the concepts we will be learning over the modules of this course.\n</p>\n<p>\nThere are literally hundreds of programming languages in use today.  Some date back to the late 50's and early 60's (like FORTRAN, COBOL and Lisp).  Some are only a few years old (like Rust, Go, Clojure, and TypeScript).  There are several major styles of programming but the one that we will be using here in this course, and the style that is predominant all over, is called <b>imperative programming</b>.  In an imperative programming language, data values are stored in named locations in computer memory (called the program <b>state</b>) and programming language statements make changes\nto the program state. \n</p>\n<p>\nWe don't need to worry about the differences between imperative programming and other styles; that is for later courses.\nHowever, we do want to understand the major concepts that are in ALL imperative programming languages.\nThere are seven:\n<pre>\n  1)  data and types of data\n  2)  variables: saving data into memory for later use\n  3)  expressions: retrieving data back from memory and combining data to make new values\n  4)  repetition (looping)\n  5)  decision making (conditional statements)\n  6)  procedure abstraction (functions)\n  7)  simple data abstraction (arrays)\n</pre>\n</p>\nThere is also a very important concept 8 that is in most modern programming languages (imperative as well as other styles):\n<pre>\n  8) everything abstraction (objects)\n</pre>\nObjects combine code and data in an abstraction that recapitulates a program itself.  Programming languages with this 8th concept are called \"object-oriented\" languages, and they enable object-oriented programming.\n</p>\n<p>\nWe will call these concepts \"The Great 8\".  As noted, all imperative programming languages have the first 7, and JavaScript has all 8.\nWe will be studying and practicing them one at a time as we move through the lesson modules.\nThe complexity of the programs we write will increase as we add each new concept to our repertoire.\n</p>\n<p>\nTo get credit for this overview, type this in the editor window:\n\n<pre>\n  <b>alert ( \"The Great 8\" ) ;</b>\n</pre>\nOnce you have typed it, click on the \"test locally\" (orange) button. Then submit it for scoring after you see it producing the \nproper output.\n</p>\n\n","value":{"correct":"1","style":"1"},"onSubmit":"// I/O pairs for functional behavior\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [\"The Great 8\"] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness  \n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (!style.isJOTFC) { fail.s(\"make a single output, nothing else\"); }\n  if (!style.hasOTAOL) { fail.s(\"make one call to alert on a string literal\"); }\n\n  // finalize and award points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\t\t\t","createdAt":{"$date":"2017-05-11T03:16:11.503Z"},"updatedAt":{"$date":"2018-01-07T05:24:45.221Z"}},{"_id":{"$oid":"5917e5cb0ad67ead1f1c94ff"},"num":6,"type":"twit","phase":1,"name":"PEMDAS: Operator precedence","folder":"53cef2444fae0fbd7f731233","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/expr.pemdas.mp4","text":"<p>\n<font color=firebrick><b>Write a program that adds 5 to 10, and then multiplies the result by 3. Print out the result as a single number.</b></font>\n</p>\n<p>\nWe have to be careful in this program to pay attention to the order in which the operations are done.  It can affect the final value\nof the expression, and can give erroneous results if we are not careful.\n</p>\n<p>\nYou may have learned a memory trick in math class pertaining to order of operation evaluation.  Remember PEMDAS?  These are what we call\n<b>operator precedence rules</b>.  The rules tell us which operators must precede which others during evaluation.\n</p>\n<p>\nThe rules are better written P-E-MD-AS I think, as there is no preference for M over D; likewise, no preference for A over S.\nAccording to PEMDAS, when we have an expression to evaluate, we first scan the expression left to right and do all the most deeply nested parentheses first\nas sub-expressions.  Then we scan left to right and do exponentiation.  Then we scan left to right and do all multiplication and division as we come to them.\nFinally, we scan left to right and do all addition and subtraction, as we come to them.\n</p>\n<p>\nIt pays to know PEMDAS, since JavaScript will evaluate expressions following those rules of <b>operator precedence</b>.  But it also pays in\nclarity to use the P part heavily to make sure your expression is evaluated as you intend.  Use parentheses to force the order you want.  Any\nreaders of your code will appreciate it, and you will make fewer mistakes.\n</p>","value":{"correct":"1","style":"1"},"onSubmit":"// I/O pairs for functional behavior\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [45] ];\n\n// callbacks to do grading\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness  \n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\"); ff = true; }\n     }\n  }\n\n  // check style\n  if ((style.nDV + style.nUDV + style.nVU) != 0) { fail.s(\"dont use variables\"); }\n  if (!style.isJOTFC) { fail.s(\"use a single output, nothing else\"); }\n  if (!style.hasOTAOBE) { fail.s(\"write one call to alert using the number expression requested\"); }\n\n  // finalize and award points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n    ","createdAt":{"$date":"2017-05-14T05:06:19.521Z"},"updatedAt":{"$date":"2018-02-07T12:53:51.58Z"}},{"_id":{"$oid":"591ddd7a175840cb73e99578"},"num":14,"type":"diy","phase":1,"name":"<B>DIY:</B> Function bigPow","folder":"53f29f9a41b3137f58803191","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Write a program that will ask the user for two numbers as input, and then print out the value of the larger number raised to the power of the smaller number.\n</b></font>\n</p> \n<p>\nIn this program you will write (define) two functions: the main function \"myMain\" and a helper function \"bigPow\".  Function myMain will\nget the user input, then call function bigPow on that input, and print out what bigPow returns:\n<ol>\n<li>\nWrite (define) a function myMain that asks the user to input 2 numbers (using two separate prompt statements) and save them in variables.\nThen it will call a function called \"bigPow\" and pass into it the two numbers the user gave as parameters. Do this by passing the two variables\nyou saved the input into.  Function bigPow will return the computed result, and myMain will print it out.\n</li>\n<br/>\n<li>\nWrite (define) the function \"bigPow\" to take two arguments.  The code in the body of bigPow will first take those two arguments\nand compute Math.min of them... that will be the base... it will find the Math.max of them and that will be the exponent; then it will do Math.pow on them\nso the we get the base raised to the exponent; it will return what Math.pow produces.\n</li>\n</ol>\n\nUse the myMain format you learned in the previous problem, meaning you will have 2 function definitions (myMain and bigPow) and then\na single call to myMain() to get execution kicked off.\n</p>","value":{"correct":"1","style":"1"},"onSubmit":"//console.log(\"checking Function calls a function\");\nvar soln_inputs = [ [2,3], [3,4], [1,5], [5,2], [2,0.5], [4,0.5],  [7,-1], [-3,5], [-3,-5] ];\nvar soln_outputs = [ [8],  [81],  [1],   [32],  [0.25],  [0.0625], [-1],   [-243], [-0.008] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesn't follow myMain function format\", (1/4)); }\n    if (style.nTNC < 2) { fail.s(\"must convert both input strings to number with calls to Number()\", 1/4); }\n    if (style.nDV > 8) { fail.s(\"you dont need more than 8 variables\", (1/8) ); }\n    if (style.nUDV != 0) { fail.s(\"you used undeclared variable(s): declare all variables\", (1/16) ); }\n    if (style.nUUDV != 0) { fail.s(\"you declared variable(s) that were not used: use what you declare\", (1/16) ); }\n    if (style.hasOTAOL) { fail.s(\"need one alert, with a variable or expression as parameter\", (1/4) ); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n//console.log(\"end correctness check\");          ","createdAt":{"$date":"2017-05-18T17:44:26.672Z"},"updatedAt":{"$date":"2018-01-16T19:54:50.091Z"}},{"_id":{"$oid":"591ee218175840cb73e9959b"},"num":25,"type":"wall","phase":1,"name":"<B>W.CALC (10PTS):</B> BASIC 4-OP CALCULATOR","folder":"5902b4167bb0b09c0d2a6422","language":"javascript","testMode":true,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Basic 4-Operation Calculator</b>\n</font>\n</p> \n<p>\nWe will write a program that will perform repeated addition, subtraction, multiplication, and division at the direction of user input.\nHere is how it will work.\n</p>\n<p>\nThe calculator will have one variable that contains the current \"answer\".  When you first run your program this will start with 0 in it.\nPrint this answer and begin the main loop. The main loop will ask the user for an operation, a number, and will perform that\noperation using the current answer and the users number and report the new answer.  So the calculator will be keeping a running total, so to speak.\n</p>\n<p>\nIn the main loop, first ask the user for an operation to perform.  \nThe user will type \"a\", \"s\", \"m\", \"d\", or \"q\" to indicate add, subtract, multiply, divide, or quit.\nIf the user gives a \"q\" end the loop, print \"done\", and end the program.  Otherwise ask the user for a number.  \nDo whatever operation the user has requested  to the current  \"answer\" \nwith the number given by the user.  Print the current answer.  \nThen loop back and ask the user for another operation and number.\n</p>\n<p>\nYou must validate all inputs from the user.  For the operation if the user gives anything other than one of the 5 acceptable strings,\nprint \"bad op\" and end the program.  For the number, if the user gives something that is not a number print \"bad num\" and end\nexecution.  Then there is one other error you must catch.  If the user asks for divide, then make sure the number given is not a 0 (mathematically,\ndivide by 0 is not defined).  If the user gives a 0 after asking for divide, then print the message \"zero div\" and dont do the division into the answer \n(in other words, leave the answer unchanged).  Print the answer just like you would after the other 3 operations, and keep on going.\n<b>Just to be clear:</b> Catching a divide-by-zero error does not end the program, it simply makes you tell the user and skip doing the\noperation.\n</p>\n<p>\nHere is a sample execution to see how the program should work:\n<pre>\n0\nwhat operation? a\nwhat number? 12\n12\nwhat operation? m\nwhat number? 2\n24\nwhat operation? s\nwhat number? 3.5\n20.5\nwhat operation? d\nwhat number? 4\n5.125\nwhat operation? d\nwhat number? 0\nzero div\n5.125\nwhat operation? q\ndone\n</pre>\n</p>\n<p>\n<b>Style:</b>\nAs always make sure you use the myMain function format.\nThis prorgram should be written with one loop and make it the right form of loop\n(for loop or while loop, you decide) for the situation (we have an indefinite situation... we are looping until the user says \"q\"\nand we don't know when that will be).\n</p>\n<p>\nRemember to convert input to number when needed. You may write functions other than myMain if you wish.\n</p>","value":{"correct":"8","style":"2"},"onSubmit":"var soln_inputs = [ [\"a\",12,\"m\",2,\"s\",3.5,\"d\",4,\"q\"], [\"q\"], [\"a\",12,\"m\",\"hi\"], [\"hi\",5], \n                    [\"d\",1,\"d\",0,\"a\",1,\"m\",1,\"q\"], [\"a\",0,\"m\",0,\"s\",0,\"d\",0,\"q\"]\n                  ];\nvar soln_outputs = [ [0,12,24,20.5,5.125,\"done\"], [0,\"done\"], [0,12,\"bad num\"], [0, \"bad op\"], \n                     [0,0,\"zero div\",0,1,1,\"done\"], [0,0,0,0,\"zero div\",0,\"done\"]\n                   ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false; // tells if functional fail happens\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF >1) { fail.s(\"use one while loop\"); }\n    if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ","createdAt":{"$date":"2017-05-19T12:16:24.714Z"},"updatedAt":{"$date":"2018-01-05T18:59:04.581Z"}},{"_id":{"$oid":"59208518a38faa76408c6aa3"},"num":7,"type":"diy","phase":1,"name":"<B>DIY:</b> Combine comparison with logical ops","folder":"53f8a24cc2dd4a6c1786a0ac","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Write a program to get three strings from the user and print out the answer to this question: \nare all 3 strings different, and were they given in alphabetic order ( a to z )?\n</b></font>\n</p> \n<p>\nTo do this program you will use appropriate comparison operators ( <, <=, >, >=, ===, !== ) along with appropriate logical operators ( &&, ||, ! ).\nAlso, since we have not yet studied loops and conditionals, do the program with just what we have studied so far:  input, output, variables, expressions, \nfunction definitions and calls (myMain format), logical operators, and comparison expressions.\n</p>\n<p>\n<b>Testing notes:</b> here are examples:\n<pre>\n  strings:  alpha    beta    gamma         answer: true\n  strings:  alpha    gamma   beta          answer: false   (not in order)\n  strings:  alpha    alpha   beta          answer: false   (not all different)\n  strings:  alpha    alphabeta   gamma     answer: true\n  strings:  450      55      6             answer: true    (remember, strings made up of digit characters are not numbers)\n  strings:  5        45      350           answer: false\n</pre>\n</p>","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs = [ [\"alp\",\"bet\",\"gam\"], [\"alp\",\"gam\",\"bet\"], [\"alp\",\"alp\",\"bet\"], [\"alp\",\"alpha\",\"bet\"], [\"450\",\"55\",\"6\"], [\"5\",\"45\",\"350\"] ];\nvar soln_outputs = [ [true],             [false],             [false],             [true],                [true],           [false] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { truVec[i] || fail.f(\"failed functional correctness\"); }\n  }\n  // check for all fn format\n  if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                  ","createdAt":{"$date":"2017-05-20T18:04:08.847Z"},"updatedAt":{"$date":"2018-01-24T15:48:00.091Z"}},{"_id":{"$oid":"5922208ca38faa76408c6b4d"},"num":5,"type":"twit","phase":1,"name":"Switch 2","folder":"53cef2804fae0fbd7f731237","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/cond.switch2.mp4","text":"<p>\n<font color=firebrick>\n<b>Write a program that asks the user for a positive integer between 1 and 7.  If the number corresponds to a weekday, print out \"weekday\"; if it \ncorresponds to a weekend day (Saturday or Sunday) print \"weekend\".  If the number is not what was requested, print \"no such day\".\n</b></font>\n</p> \n<p>\nWe will do this program by modifying the previous switch program.\nNow we will see why the \"break\" statement is so important in that previous program (and in most switches).\nIf there is no break at the end of the code block for a case, then execution goes on to the code block for the\nnext case.\n</p>\n<p>\nThis means if we put the two weekend cases back to back, with no break for the first one, then either number will cause the alert for \"weekend\"\nto be reached.  Same strategy will apply to the 5 cases for weekday days.\nThis is not a way you are likely to use switches much as new programmers, but we are doing it for complete understanding.\n</p>\n","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs = [ [1],[2],[3],[4],[5],[6],[7],\n                    [0],[8],[-5],[2.2] ];\nvar soln_outputs = [ [\"weekend\"],[\"weekday\"],[\"weekday\"],[\"weekday\"],[\"weekday\"],[\"weekday\"],[\"weekend\"],\n                      [\"no such day\"],[\"no such day\"],[\"no such day\"],[\"no such day\"] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    //if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    //if (style.nAFL != 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                                ","createdAt":{"$date":"2017-05-21T23:19:40.612Z"},"updatedAt":{"$date":"2018-02-01T15:55:05.919Z"}},{"_id":{"$oid":"592438511a3334370a76a106"},"num":6,"type":"twit","phase":1,"name":"<B>DIY:</b> 5th root of fact of abs","folder":"540fbc9d54b9a690402df1d9","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Write a program that asks the user to input an integer between -30 and 30 inclusive.  Validate the input (using the specifications following); if the \ninput is valid, print the 5th root of the factorial of the absolute value of the user's number (final result truncated to 5 decimal places).\n</b></font>\n</p> \n<p>\n<b>Validation specs: </b> First validate that the user input is a number (not a non-number string); if it is a non-number, print \"bad\" and end execution.\nThen check to see if the number is in range (between -30 and 30 inclusive); if it is not, print \"range\" and end execution.\nFinally check the number to see if it is an integer; if not, print \"format\" and end execution.\n</p>\n<p>\nIf all validations pass, we know the user gave a good number -- an integer in the range -30 to 30 inclusive.  \nThen we can do the work: convert the number to positive (take its absolute value), compute the factorial of that, and then \ntake the 5th root of the factorial.  Finally, truncate the result to 5 decimal places and print it out.\n</p>\n<p>\nWe will have to systematic about building the expressions that solves this problem.  You will find several of the Math object functions helpful.\nFor example, Math.abs() will produce the absolute value of a number.  Math.pow() will take the 5th root (remember that this is the same as\nraising a base to the power 1/5th, or raising the base to the power 0.2 ).  Factorial is code we have written previously.\nTruncating uses Math.floor (which will work ok for us since we\nare validating that the final number we truncate will be positive or 0).  \n</p>\n<p>\n<b>Math note:</b>  In this program we end up having to compute 0! if the user gives 0 as the input number.\nAlthough this may seem strange, mathematicians have defined 0! to be 1.  It seems strange because we cant multiply all the numbers from 0 down to 1\nwhich is what the factorial formula says to do.  So 0 is a special case and it is defined to be 1 to keep the laws of exponents working properly.\nIf you will go back to your factorial code that we did before, you will see that your code produces 0! as 1 also.\nThis works because we initialized the accumulator to 1 and then did no loop executions, leaving the final factorial 1.\nSo this program should use that code, and will also give a 1 as the result for this program if the user gives 0 as input.  Test it.\n</p>","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs =  [ [\"hello\"], [5.5],      [-10.1],    [31],      [-30.0001], \n                     [-5],      [0], [1], [-1], [8],       [-8],\n                     [-29],           [30],\n                   ];\nvar soln_outputs = [ [\"bad\"], [\"format\"], [\"format\"], [\"range\"], [\"range\"],\n                     [2.60517], [1], [1], [1],  [8.33881], [8.33881],\n                     [1546349.87666], [3053036.63026], \n                   ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLAP != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLF > 1) { fail.s(\"use only one for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                         ","createdAt":{"$date":"2017-05-23T13:25:37.952Z"},"updatedAt":{"$date":"2018-02-01T15:56:53.692Z"}},{"_id":{"$oid":"5925a9851a3334370a76a12d"},"num":26,"type":"twit","phase":1,"name":"{ VALIDATION WITH 'CONTINUE' COPY }","folder":"5902b4167bb0b09c0d2a6422","language":"javascript","testMode":true,"maxSubmissions":"","vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/while.continue.mp4","text":"<p>\n<font color=firebrick>\n<b>Write a program that asks the user to input numbers repeatedly, sums up all the user inputs and prints the final sum.\nStop looping when the use gives the number 0 as input.\n</b></font>\n</p> \n<p>\nNow let's combine the earlier summing inputs program with some validation.  We will base this program on the one we just wrote.\n</p>\n<p>\nThis time, when we prompt the user and get some input, we will validate that input to make sure it is a number.  \nIf it is not, we print the error message \"non numeric, try again\" and then\nmake the loop go around again so the user is asked again for another input.  In this way, nothing is summed into the accumulator if the input is not a number;\nIf the input is a valid number, we add it to the sum we are accumulating..\n</p>\n<p>\nTo make a loop go on to the next iteration and go again, use the <b>continue</b> statement.  This is bit like \"break\", but\nit ends the <b>current loop body only</b>; break ends the entire loop. The continue essentially says \"let's skip the rest of this loop body\nand go back around again\".  If the user gives a non-number we don't want to execute the rest of the body; we want to repeat the\nrequest for input and let the user try again.  This is the beginnings of a validation strategy that is a little better than printing \"bad\" and ending execution.\nWe will develop this \"re-ask the user\" strategy more fully in a later module.\n</p>\n<p>\n<b>Style:</b> Use a while loop.  Use no for loops.\n</p>","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs = [ [2,3,4,5,0], [0], [1, 4,\"hi\", -6,\"lo\", 10, 0 ], [\"hello\",0] ];\nvar soln_outputs = [ [14], [0],\n                     [\"non numeric, try again\",\"non numeric, try again\",9], [\"non numeric, try again\",0] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF != 1) { fail.s(\"use one while loop\"); }\n    if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ","createdAt":{"$date":"2017-05-24T15:40:53.68Z"},"updatedAt":{"$date":"2018-01-05T18:59:04.582Z"}},{"_id":{"$oid":"592642691a3334370a76a19c"},"num":6,"type":"diy","phase":1,"name":"<B>DIY:</B> Function trunc ( n )","folder":"54179a21f4c3c15867b3c1fe","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Write a function called \"trunc\" that will be passed a number as parameter. \nThe function returns the integer part of the number,for both positive and negative numbers.\n</b></font>\n</p> \n<p>\nSince not all browsers yet support Math.trunc correctly, and since a truncation function would be handy, we will write our own.\nTo do this we will use Math.floor (on positive numbers) and Math.ceil (on negative numbers).\nTo test your trunc function and get credit for this problem, write a myMain that will ask the user for a number\nand write out the integer that your trunc function produces.  Note that something like 14.76931 should produce 14, and -5.8334 produces -5.,\n</p>\n<p>\n<b>Style:</b>\nDon't worry about validating the input.  Just assume the user will give a good number when asked for it.\nWe should not need any loops to solve this problem.  We will need at least one conditional (in the function trunc).\n</p>\n","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs =  [ [0], [-4.5678], [12.3456], [-0.00002], [0.00001], [0.123], [11], [-6] ];\nvar soln_outputs = [ [0], [-4], [12], [0], [0], [0], [11], [-6] ];\n// call backs \nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF > 0) { fail.s(\"use no while loops\"); }\n    if (style.nAFL > 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                           ","createdAt":{"$date":"2017-05-25T02:33:13.709Z"},"updatedAt":{"$date":"2018-02-13T15:53:27.025Z"}},{"_id":{"$oid":"593572471a3334370a76a6b4"},"num":6,"type":"twit","phase":1,"name":"Complicated boolean expressions","folder":"53f8a24cc2dd4a6c1786a0ac","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/compare.complicated.mp4","text":"<p>\n<font color=firebrick>\n<b>Write a program that compares 3 quantities stored in variable x, y, and z.  We want to know if the values are in numerical order, \nwith x the smallest and z the largest (assume all 3 values are different).\n</b></font>\n</p> \n<p>\nUp to now our boolean comparisons have involved two operands.  Let's look at how to construct more complex expressions that\ninvolve 3 (or more) operands.\n</p>\n<p>\nLet's say we have 3 variables that contain numbers (the same approach shown here works for string data).  We need to decide if all 3 values\nin those variables are different.\nWe cannot simply string the 2-operand comparison together (like some math notation allows).  It will be <i>legal</i> to do this in JavaScript, but the results \nwill be confusing (as it does not do what you think it is doing... what it is really doing is beyond this level of class). \nAll boolean comparisons involve 2 operands and 1 operator, like this\n<pre>\nval1  op  val2 \n</pre>\nfor example\n<pre>\n12 < 15\nx > y\nk <  21\nspeed !== 100\n</pre>\n</p>\n\n<p>\nIf we have 3 variables (values) to compare we must make a collection of 2-value camparisons and use AND (&&) or OR ( || ) to glue them together in the\nway we need.  Consider these:\n<pre>\nvar x=4, y=5, z=6;\nx < y < z            // incorrect way\n(x < y) && (y < z)    // correct way\n</pre>\nWe must compare them pair-wise.  To do this we will need to put parentheses around the pair comparisons to make sure the && has two operands.\nEach expression in parens (like ( x < y ) ) is an expression just like x by itself is an expression.\n</p>\n<p>\nTo complete this problem type in this program and execute it... see if the results are what you expect.  \n<pre>\n\"use strict\";\n\nfunction myMain() {\n  var x = 3;\n  var y = 4;\n  var z = 6;\n\n  var expn = ( x < y ) && (y < z) ;\n  alert(expn);\n}\n\nmyMain();\n</pre>\nTry changing the values of x, y, and z so you can see how different values cause different comparison results.\n</p>\n<p>\n<b>Notes:</b> If you want a bit more explanation, then consider this.\nWhat does it mean to try to do something like alert( 4 < 5 < 6 )?  You may have noticed JavaScript allows this and produces output.\nIn fact, if you try this very experssion you get \"true\" as output... and this may be leading to some confusion.\nWhat JavaScript is doing is systematic... all comparison expressions are two operands and one operator, so JavaScript is doing this:\n<pre>\nalert(  ( 4 < 5 ) < 6 );\n// which simplifies to  alert( true < 6 );\n</pre>\nAnd now we are left wondering... what does it mean is \"true\" smaller than 6 ?  The way this is handled is beyond what we need to do at this point,\nbut JavaScript does find a way to determine this as \"true\".  However to see how confusing this can be try this:\n<pre>\nalert(  4 < 5 < 2 );\n// which becomes alert(  ( 4 < 5 ) < 2 );\n// which becomes  alert(  true < 2 );\n</pre>\nNow we also get true, so this violates our math-ish idea of what we want with  4 < 5 < 2.  This shows that this way of doing things is not what we want for our\nboolean comparisons.  So do them the way of this lesson... 2 at a time, using parentheses for clarity.\n</p>","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs = [ [] ];\nvar soln_outputs = [ [true]];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { truVec[i] || fail.f(\"failed functional correctness\"); }\n  }\n  // check for all fn format\n  if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                  ","createdAt":{"$date":"2017-06-05T15:01:27.234Z"},"updatedAt":{"$date":"2018-01-24T15:47:55.271Z"}},{"_id":{"$oid":"59446b56c28ced7e128a7244"},"num":5,"type":"twit","phase":1,"name":"<b>DIY:</b> Construct car objects","folder":"53cef3104fae0fbd7f73123d","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Write a program that makes 3 car objects, and then prints out the make, model, and year of the oldest of the 3 cars (format shown below).\n</b></font>\n</p> \n<p>\nWe are going to build this program from the code for problem \"Car object\" earlier in this module.\nReload that working program and let's modify it.\nFirst, make myMain be a car object constructor. To do this, rename the myMain to \"makeCarObject\"\nand then remove the alert statement -- we will not do any output inside the object constructor (it will do input prompts).\nTo complete the constructor, put in a return statement that sends back the car object that gets constructed.\n</p>\n<p>\nNext we need a new myMain function.  In this myMain, we will call the constructor makeCarObject 3 times, and save the returned object\neach time in a different variable.  Next we need to decide which car object represents the oldest car.  This would be the one with the smallest\nnumber in the year field of the object.  Then we use the fields of that object to produce the final output.\n</p>\n<p>\nFor output, we will use one alert statement.  In that alert, print the make, model, and year of the oldest car,  and put a \", \" (comma then space) between values.\nFor a red ford ranger built in 1997, it would look like this:\n<pre>\nford, ranger, 1997\n</pre>\n</p>\n<p>\n<b>Development Notes:</b> Other than practicing the object syntax and constructor concept we learned, the challenge in this program is to figure out\nwhich object is the oldest car, in such a way that we can access the object after we figure that.\nOne way to do this is to note that if I have 3 different objects stored in 3 variables (let's say named car1, car2, and car3), then this is a valid\nJavaScript statement:\n<pre>\nvar oldest = car1;\n</pre>\nWhat we do here is create another variable (\"oldest\") and make the value of that new variable the same object as the one stored in \"car1\".\nThis is the same as doing something like this with number data:\n<pre>\nvar x = 5;\nvar y = x;\n// at this point we expect y to contain the value 5\n</pre>\nThen test the other car objects to see if any has a year smaller than the year of the one you have stored in \"oldest\".  Since variable oldest has a car object \nin it, this is valid JavaScript:  \n<pre>\nif (car2.year < oldest.year) { \n   // then save car2 in oldest... you have discovered that car2 is older that the one you started with,\n   // so car2 is now currently your oldest\n}\n</pre>\n</p>\n\n","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs = [ [\"ford\",\"ranger\",12345,\"red\",2015,\"dodge\",\"caravan\",34567,\"blue\",2003,\"toyota\",\"corolla\",45678,\"silver\",2009] ];\nvar soln_outputs = [ [\"dodge, caravan, 2003\"] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nTFD < 2) { fail.s(\"must have at least 2 top level function definitions\"); }\n    if (style.nWLF != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 0) { fail.s(\"use no for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                       ","createdAt":{"$date":"2017-06-16T23:35:50.744Z"},"updatedAt":{"$date":"2018-02-19T13:25:26.208Z"}},{"_id":{"$oid":"59483520c28ced7e128a7449"},"num":27,"type":"wall","phase":1,"name":"<B>W.SIEVE (20PTS):</B> SIEVE OF ERATOSTHENES (FINDING PRIMES) ","folder":"5902b4167bb0b09c0d2a6422","language":"javascript","testMode":true,"maxSubmissions":"","vidURL":"","text":"<pre>\n<b>Due:</b> <i>Wed. Oct. 28 at 11:59 pm.</i>  After that it will become a half-credit problem.\n<b>This is solo work.</b> Write and submit your own code, written by yourself.\n</pre>\n<br/>\nThis program is an implementation of a famous algorithm called the Sieve of Eratosthenes. \nIt is a method for generating all prime numbers from 2 up to some upper limit N.  \nThe algorithm was known to the ancient greeks.  It is not the most efficient way to \ngenerate primes, but it is not too bad.\n<br/><br/>\nFull problem description is \n<a href=\"http://www.cs.unc.edu/~stotts/COMP110-f15/assn/w.sieve.html\"  target=\"_blank\">found here</a>.\n<br/><br/>\nGenerating primes is one side of this important area.  The other side is the problem\ncalled <i>primality testing</i>, or answering this question: <i>is this number prime?</i>\n<br/><br/>\nPrimality testing is hard, and it gets harder very rapidly as the number gets larger.  \n\nThe difficulty of primality testing is what makes the area of cryptography useful.  We can make codes\nthat cannot easily be broken by computer.  This allows safe transmission of messages over the internet (for example) without\nthem being succeptible to interception and de-coding.  Messages like the password to your bank\naccount when you do online banking.\n<br/><br/>\nCan't we primality test with our Sieve?</b>\n<br/>\nTheoretically we can.  If we want to test a number like (say) 1,001,317,234,144,788,210,001 for primality we could simply \ngenerate the sieve to get ALL primes between 1 and 1,001,317,234,144,788,210,001, and of course then do a quick check to see if\n1,001,317,234,144,788,210,001 in in our sieve.  \n<br/><br/>\nBut theory slams into practice, as it did with our number guessing game.  The amount of time and space (the array) it would take to compute \nthe sieve for such a large number is hugely prohibitive... making it impossible in a practical sense.","value":{"correct":"24","style":"6"},"onSubmit":"var soln_inputs = [ [1000000], [15], [43], [500], [5000], [3456789],\n                    [\"goheels\",75], [4.5,15], [-5,45], [-3.33, 10.234,\"what up\",299]\n                  ];\nvar soln_outputs = [  [\"twin prime: 999959, 999961\", \"twin prime: 999611, 999613\", \"number of twin primes: 8169\"],\n                      [\"twin prime: 11, 13\", \"twin prime: 5, 7\", \"number of twin primes: 3\"],\n                      [\"twin prime: 41, 43\", \"twin prime: 29, 31\", \"number of twin primes: 6\"],\n                      [\"twin prime: 461, 463\", \"twin prime: 431, 433\", \"number of twin primes: 24\"],\n                      [\"twin prime: 4967, 4969\", \"twin prime: 4931, 4933\", \"number of twin primes: 126\"],\n                      [\"twin prime: 3456569, 3456571\", \"twin prime: 3456377, 3456379\", \"number of twin primes: 23672\"],\n                      [\"error\", \"twin prime: 71, 73\", \"twin prime: 59, 61\", \"number of twin primes: 8\"],\n                      [\"error\", \"twin prime: 11, 13\", \"twin prime: 5, 7\", \"number of twin primes: 3\"],\n                      [\"error\", \"twin prime: 41, 43\", \"twin prime: 29, 31\", \"number of twin primes: 6\"],\n                      [\"error\", \"error\", \"error\", \"twin prime: 281, 283\", \"twin prime: 269, 271\", \"number of twin primes: 19\"]\n                   ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if ((style.nWLF + style.nFLAP) > 8) { fail.s(\"it can be done with fewer loops\"); }\n    if (style.nFLAP > 6) { fail.s(\"it can be done with fewer for loops\"); }\n    if (style.nTFD < 3) { fail.s(\"must have at least 3 top level function declarations\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                ","createdAt":{"$date":"2017-06-19T20:33:36.92Z"},"updatedAt":{"$date":"2018-01-05T18:59:04.583Z"}},{"_id":{"$oid":"5948898cc28ced7e128a7465"},"num":28,"type":"wall","phase":1,"name":"<B>W.GUESS (20PTS):</B> NUMBER GUESSING GAME (BINARY SEARCH)","folder":"5902b4167bb0b09c0d2a6422","language":"javascript","testMode":true,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Number Guessing Game</b>\n</font>\n</p> \n<p>\nIn this program we will create a guessing game that will illustrate the power of powers of 2.  \nWe will be implementing a form of <i>binary search</i>.  We will solve a large problem by cutting the size\nof the problem in half each step; in this way a huge problem becomes a small one in only a relatively few\nsteps.\n</p>\n<p>\nDetails of the program to write <a href=\"http://www.cs.unc.edu/~stotts/COMP110-f15/assn/w.guess.html\" target=\"_blank\">\ncan be found here</a>.\n</p>","value":{"correct":"17","style":"3"},"onSubmit":"var soln_inputs = [ \n   [\"yes\"], \n   [\"higher\",\"yes\"],\n   [\"lower\",\"yes\"],\n   [\"lower\",\"lower\",\"lower\",\"lower\",\"lower\",\"lower\",\"lower\",\n    \"lower\",\"lower\",\"lower\",\"lower\",\"lower\",\"lower\",\"lower\",\"yes\"],\n   [12,24,\"goheels\",\"yes\"],\n   [\"lower\",\"cool\",\"what?\",\"lower\",\"lower\",\"higher\",\"bingo\",\"yes\"]\n];\nvar soln_outputs = [ \n   [16384,\"Got it in 1 guesses\"],\n   [16384,24576,\"Got it in 2 guesses\"], \n   [16384,8192,\"Got it in 2 guesses\"], \n   [16384,8192,4096,2048,1024,512,256,128,64,32,16,8,4,2,1,\"Got it in 15 guesses\"],\n   [16384,\"error\",\"error\",\"error\",\"Got it in 1 guesses\"],\n   [16384,8192,\"error\",\"error\",4096,2048,3072,\"error\",\"Got it in 5 guesses\"]\n];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF >3 ) { fail.s(\"it can be done with fewer while loops\"); }\n    if (style.nFLAP > 0) { fail.s(\"use no for loop\"); }\n    if (style.nTFD < 3) { fail.s(\"must have at least 3 top level function declarations\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);","createdAt":{"$date":"2017-06-20T02:33:48.933Z"},"updatedAt":{"$date":"2018-01-05T18:59:04.585Z"}},{"_id":{"$oid":"594b0e1af86d54111435ce7c"},"num":7,"type":"diy","phase":1,"name":"<B>DIY:</B> User driven lookup table","folder":"53cef2e24fae0fbd7f73123a","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Write a program that takes the lookup table from the problem \"Lookup table\" and uses it in a user-driven context, described following.\n</b></font>\n</p> \n<p>\nStart with the code you wrote in \"Lookup table\" in this module.\nRemove the 4 alerts in myMain that produced the output, so that what we have left is the code that builds the lookup table (the array containing\nthe function values).\n</p>\n<p>\nWhat you should add to myMain (in place of the former alerts) is code that will loop, asking the user to input a non-negative integer (or \"q\" to quit). \nThe idea is that the user will give you an integer 0 or greater that will specify a slot number in the array.  This means the user wants to know the\nvalue of the function on that number, and we will get it by \"looking it up in the table\"... meaning we will access the array at that slot number and get\nthe data value stored there.\n</p>\n<p>\nif the user gives \"q\" as input, end the program.  If the user gives a proper integer (we will not validate) then print out the\nvalue stored in the array at the slot number that the user gave.  Loop doing this until the user gives \"q\".\n</p>\n<p>\nSince this is indefinite looping (we don't know how many lookups the user will want to do), use the proper form of loop.\n</p>\n\n","value":{"correct":"3","style":"1"},"onSubmit":"var soln_inputs =  [ [8,\"q\"], [61,\"q\"], [707,\"q\"], [999,\"q\"],\n                     [8,61,707,\"q\"],\n                     [888, 1000, 222, 555, 22, 2, \"q\"]\n                   ];\nvar soln_outputs = [ [4.75682846], [21.8271672516], [137.1085570693], [177.6945533698],\n                     [4.75682846, 21.8271672516, 137.1085570693],\n                     [162.6708456366, 177.8279410038, 57.5128290255, 114.3456736314, 10.1582058807, 1.6817928305],\n                   ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL != 1) { fail.s(\"use one while loops\"); }\n    if (style.nAFL != 1) { fail.s(\"use one for loop\"); }\n    if (style.nDA < 1) { fail.s(\"declare an array\"); }\n    //if (style.nAU < 1) { fail.s(\"use an array\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                              ","createdAt":{"$date":"2017-06-22T00:23:54.72Z"},"updatedAt":{"$date":"2018-03-01T21:04:25.076Z"}},{"_id":{"$oid":"594c34baf86d54111435cec8"},"num":29,"type":"diy","phase":1,"name":"<B>DIY:</B> USER DRIVEN LOOKUP TABLE with validate","folder":"5902b4167bb0b09c0d2a6422","language":"javascript","testMode":true,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Write a program that takes the lookup table from the problem \"Lookup table\" and uses it in a user-driven context, described following.\n</b></font>\n</p> \n<p>\nStart with the code you wrote in \"Lookup table\" in this module.\nRemove the 4 alerts in myMain that produced the output, so that what we have left is the code the builds the lookup table (the array containing\nthe function values).\n</p>\n<p>\nWhat you should add to myMain is code that will loop, asking the user to input a non-negative integer (or \"q\" to quit). \nif the user gives \"q\" as input, end the program.  If the user gives a proper integer (we will validate, as described following) then print out the\nvalue stored in the array at the slot number that the user gave.  Loop doing this until the user gives \"q\".\n</p>\n<p>\n<b>Validating input: </b> We will validate that the user gives a non-negative integer, and we will use a \"re-ask the user\" strategy.\nIf the user gives something that is not a non-negative integer (string, non-integer, negative) print \"try again\" and then\nget more input.  You can do this in several ways, but one is to employ the fully abstracted validation we saw in module \"Validate 2\".\n</p> \n\n\n","value":{"correct":"4","style":"2"},"onSubmit":"var soln_inputs = [ [8,\"q\"], [61,\"q\"], [707,\"q\"], [999,\"q\"] ];\nvar soln_outputs = [ [4.75682846], [21.8271672516], [137.1085570693], [177.6945533698] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 1) { fail.s(\"use one for loop\"); }\n    if (style.nDA < 1) { fail.s(\"declare an array\"); }\n    //if (style.nAU < 1) { fail.s(\"use an array\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                              ","createdAt":{"$date":"2017-06-22T21:20:58.088Z"},"updatedAt":{"$date":"2018-01-05T18:59:04.586Z"}},{"_id":{"$oid":"59502be1f86d54111435cfcc"},"num":0,"type":"twit","phase":1,"name":"Overview","folder":"544975e48afe161613542b74","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/arrSearch.overview.mp4","text":"<p>\n<font color=firebrick>\n<b>Searching: A big problem\n</b></font>\n</p> \n<p>\nSorting and Searching are two large important categories of problems in Computing Science.\nYou use them all the time in the software you use daily.  Go to eBay, for example, and try to find and buy something you have in mind.\nYou first search for it (find all blue UNC coffee mugs) and then the sort the output (put them in order of lowest price to highest).\nSorting is for later (and perhaps a later class).  \n</p>\n<p>\nSearching is first.  Searching is the process of examining the data elements in a collection (arrays here) to see which elements match some criterion, or meet some requirement we have\nfor the needs of some computation. \"Find all elements in an array that are prime numbers\", or \"Find the first element in an array that is negative\", or \"check the elements in this\narray to see if they are all in alphabetic order\", or \"does this array of names contain someone named \"Jane Doe\".  These are examples of searches.  \n</p>\n<p>\nWe will be learning in this module how to systematically\ngo through an array, looking at every element slot-by-slot and comparing them to each other or to some value we are trying to match.\nMost of the searching we do in arrays will use for-loops.  This is because the array lengths are known and are convenient as loop control parameters.\nType in the following code to search in an array:\n<pre>\n\"use strict\";\n\nfunction myMain() {\n  var arr = [3,11,438,-21,895,67,1101,19,4.3,-6];\n  for (var i=0; i &lt; arr.length; i++) {\n    if ((arr[i]%3)===0) { \n      alert(arr[i] + \": multiple of 3\"); \n    }\n  }\n}\n\nmyMain();\n</pre>\nHere, the for loop allows us to examine the array slots in order, starting at 0 and going to the last slot in use.  Each time we do the loop body\nwe examine the slot number that the loop index variable \"i\" contains as value.  We are looking for multiples of 3, and if we find an array \nelement that is one, we print out that value.\n</p>","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs = [ [] ];\nvar soln_outputs = [ [\"3: multiple of 3\",\"438: multiple of 3\",\"-21: multiple of 3\",\"1101: multiple of 3\",\"-6: multiple of 3\"] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }  \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    if (style.nAFL != 1) { fail.s(\"use only 1 for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                                 ","createdAt":{"$date":"2017-06-25T21:32:17.016Z"},"updatedAt":{"$date":"2018-03-27T15:33:16.012Z"}},{"_id":{"$oid":"5950744bf86d54111435d024"},"num":7,"type":"diy","phase":1,"name":"<B>DIY:</B> Bubble up","folder":"544975e48afe161613542b74","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Write a program to fill an array with numbers from the user (0 ends the input). \nThen \"bubble up\" the largest element in the array to the last slot. \nSee details following for method and output.\n</b></font>\n</p> \n<p>\nRemember to use the appropriate loop type to fill the array with user input data.\nThen also use the appropriate loop to bubble the largest element to the end.\nDo not validate the input data.\n</p>\n<b>Output:</b> Once all input is done, print the length of the array.\nThen bubble the largest element to the end.\nThen print every element in the array (slot 0 to end, separate alerts). Then print the length of the\narray again.\n</p>\n<p>\n<b>Method:</b> Bubbling involves swapping consecutive elements.\nUse a loop to access every array element, from slot 0 up.  We compare the element in slot 0 to its neighbor one higher, the element in\nslot 1.  If the element in slot 0 is larger, we swap the values.  We want the value in slot 1 to end up in slot 0, and the value in slot 0 to end\nup in slot 1.  Let's say the loop index variable is k, and the array variable is arr.  A swap is done with a temporary variable and 3 assignments. \nThe code in the loop body would contain this (we are examining the item in slot k):\n<pre>\n// once we decide that element k and k+1 need to be swapped\ntemp = arr[k];   arr[k] = arr[k+1];  arr[k+1] = temp;\n</pre>\nIf we keep moving from 0 on up, swapping as we go when needed, then the largest element ends up in the last slot.\n</p>\n<p>\nHere is a small example of all the swaps done is an array with 4 elements:\n<pre>\n4  7  2  5   // original array elements\n4  7  2  5   // compare slot 0 to 1 no swap needed\n4  2  7  5   // compare slot 1 to 2  swap needed and done\n4  2  5  7   // compare slot 2 to 3  swap needed and done\n// and now 7 (the largest element) is in the last slot\n</pre>\n</p>\n<p>\nHere is some sample execution data to help see how the program should work:\n<pre>\nNumber? 12.4\nNumber? 10\nNumber? 4.2\nNumber? 25\nNumber? 2\nNumber? 0\n5\n10\n4.2\n12.4\n2\n25\n5\n</pre>\n<pre>\nNumber? 6\nNumber? 8\nNumber? 16\nNumber? 12\nNumber? 0\n4\n6\n8\n12\n16\n4\n</pre>\n<pre>\nNumber? 4\nNumber? 0\n1\n4\n1\n</pre>\n<pre>\nNumber? 0\n0\n0\n</pre>\n</p>\n<p>\n<b>Computer science note:</b>\nThis problem is called \"bubble up\" because the process of moving the largest element to the end of an array\n(while leaving the original elements in the array) is a part of Bubble Sort.  Bubble Sort is a method for sorting\nall the elements in an array into ascending (or descending) order, and it famous for being taught in introductory \nprogramming classes, as it is fairly easy to understand and easy to program.  It is also famous for being \nvery inefficient on large arrays.  In my Data Structures class I call it out \"gold standard for badness\" and I use\nit to compare to other sorting methods to see how much improvement we can get.\n</p>","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs = [ [12,3,14,5,3,7.2,0], [11,1,3.44,17,0], [5,0], [12,13,0], [0], [6,0] \n                  ];\nvar soln_outputs = [ [6,3,12,5,3,7.2,14,6], [4,1,3.44,11,17,4], [1,5,1], [2,12,13,2], [0,0], [1,6,1] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL != 1) { fail.s(\"use 1 while loop\"); }\n    if (style.nFLAP > 2) { fail.s(\"use no more than 2 for loop2\"); }\n    //if (style.nNFLF != 1) { fail.s(\"need a nested for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                  ","createdAt":{"$date":"2017-06-26T02:41:15.737Z"},"updatedAt":{"$date":"2018-03-27T15:35:11.012Z"}},{"_id":{"$oid":"59507e79f86d54111435d02f"},"num":6,"type":"diy","phase":1,"name":"<B>DIY:</B> Double negatives","folder":"544975e48afe161613542b74","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Write a program to fill an array with numbers from the user (0 ends the input). \nAfter all inputs have been obtained and stored, change every element that has a negative value to twice that value.\nPrint out the length of the array, and then print every element, each in a separate alert statement.\n</b></font>\n</p> \n<p>\nRemember to use the appropriate loop type to fill the array with user input data.\nThen also use the appropriate loop type to search through the array looking for (and doubling) negatives.\nDo not validate the input data.\n</p>\n<p>\nHere is some sample execution data to help see how the program should work:\n<pre>\nNumber?  34.3\nNumber? 100\nNumber? -4.3\nNumber? 5\nNumber? -2\nNumber? 0\n5\n34.3\n100\n-8.6\n5\n-4\n</pre>\n</p>","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs = [ [34.3,100,-4.3,5,-2,0], [1,-1,2,-2,3,-3,0], [0], [2,0]\n                  ];\nvar soln_outputs = [ [5,34.3,100,-8.6,5,-4], [6,1,-2,2,-4,3,-6], [0], [1,2] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL != 1) { fail.s(\"use 1 while loop\"); }\n    if (style.nFLAP != 2) { fail.s(\"use 2 for loops\"); }\n    //if (style.nNFLF != 1) { fail.s(\"need a nested for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                  ","createdAt":{"$date":"2017-06-26T03:24:41.964Z"},"updatedAt":{"$date":"2018-03-27T15:34:48.813Z"}},{"_id":{"$oid":"59592b9dd12a8e2116ba65d3"},"num":0,"type":"exam","phase":1,"name":"<b>Exam:</b> Sequence Min and Max: For loop","folder":"58c836e6783bdf8d50a50191","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Write a program that will find both the minimum and the maximum of a sequence of numbers input by the user (and the average of the\ntwo extremes, and the distance between them).  \nWe will use a for-loop to do this, and we will not validate the input.  Details of input, method and output format follow.\n</b></font>\n</p> \n<p>\n<b>Input:</b>\nFirst prompt the user for a positive integer (larger than 0). This integer will tell us how many numbers the user will input after that\n(the length of the sequence we will search through for the min and max).  Remaining input values from the user will each be any valid number value.\nWe will not validate the input. We will assume the user gives good valid input without mistakes.\n</p>\n<p>\nSince the user must supply a positive integer for the number of numbers to input, there will be at least one number in the sequence.\nWe will need two variables in the code to keep track of \"the biggest we have seen so far\" and \"the smallest we have seen so far\".\nWhen we are done, these two variables will then contain the largest and smallest number seen.\nWe need to initialize these variables to some values.  Remember that JavaScript has two special \"numbers\" that will be useful here:\n<pre>\n Infinity  // a number larger than all other numbers\n-Infinity  // a number smaller than all other numbers\n</pre>\nWe can initialize the variable we use to contain \"smallest so far\" to Infinity; this guarantees that the first number the user types will be smaller and we will keep track of that first number.  Similar reasoning is used for -Infinity and the \"largest so far\" variable.\n</p>\n<p>\n<b>Output:</b>\nYour program output will be four separate alert statements, in this order: minimum, maximum, average of the min and max, and the distance between the min and\nmax.  Average, of course, is just min + max, then the sum divided by 2.  Distance is found by max - min (min substracted from max).\nFor format, see the sample executions following.  Note that there are no blanks in the output strings.\n</p>\n<p>\n<b>Sample execution</b>\n<pre>\nhow many numbers (positive integer)?  3\nnumber? 17\nnumber? 5\nnumber? -3.1\nmin:-3.1\nmax:17\navg:6.95\ndist:20.1\n</pre>\n<pre>\nhow many numbers (positive integer)? 1\nnumber? 123\nmin:123\nmax:123\navg:123\ndist:0\n</pre>\n<pre>\nhow many numbers? 4\nnumber? 15.5\nnumber -25.8\nnumber? 2.187\nnumber? 0.01\nmin:-25.8\nmax:15.5\navg:-5.15\ndist:41.3\n</pre>\n","value":{"correct":"8","style":"2"},"onSubmit":"var soln_inputs =  [  [5,1,2,3,4,5], [1,100], [4,15.5,-25.8,2.187,0.01], [3,17,5,-3.1],\n                      [6,9000000000000000,-9000000000000000,3,0.1,-234.567,100000.00123],\n                      [3,0,1,-1]\n                   ];\nvar soln_outputs = [ [\"min:1\",\"max:5\",\"avg:3\",\"dist:4\"],  \n                     [\"min:100\",\"max:100\",\"avg:100\",\"dist:0\"],\n                     [\"min:-25.8\",\"max:15.5\",\"avg:-5.15\",\"dist:41.3\"],\n                     [\"min:-3.1\",\"max:17\",\"avg:6.95\",\"dist:20.1\"],\n                     [\"min:-9000000000000000\",\"max:9000000000000000\",\"avg:0\",\"dist:18000000000000000\"],\n                     [\"min:-1\",\"max:1\",\"avg:0\",\"dist:2\"]\n                   ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 1) { fail.s(\"use one for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);              ","createdAt":{"$date":"2017-07-02T17:21:33.208Z"},"updatedAt":{"$date":"2018-03-12T00:36:18.088Z"}},{"_id":{"$oid":"59592f21d12a8e2116ba65d8"},"num":1,"type":"exam","phase":1,"name":"<B>Exam:</B> Sequence Min and Max: While loop","folder":"58c836e6783bdf8d50a50191","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Write a program that will find both the minimum and the maximum of a sequence of integers given as input by the user (and the average of the\ntwo extremes, and the distance between them).\nWe will use a while-loop to do this, and we WILL validate the input.  Details of input, method and output format follow.\n</b></font>\n</p> \n<p>\nThis program has some similarity to the previous one, in that we are finding min and max in a sequence of numbers, and computing the same stats with them,\nand producing the same output.\nYou should be able to reuse some methods and pieces of your code from the previous program. \n</p>\n<p>\nThere are <b>several differences</b>, however. \n<ul>\n<li>the user will <b>not</b> first give us an integer to tell how many numbers we will process after that.  </li>\n<li>The input sequence will end in the special input value \"q\" , for quit.  </li>\n<li>Consequently, the natural way to code the solution is not with a for-loop, but with a while-loop.</li>\n<li>the numbers input by the user must be integers </li>\n<li>we will validate that input to make sure they are integers (or the \"q\" quit signal value).</li>\n<li>there is a special case to deal with... the case where the user gives the quit signal \"q\" as the very first input</li>\n<li>you must define and call 2 or more functions</li>\n</ul>\n</p>\n<p>\nSo we will write a program that will accept a sequence of integers from the user, one number at a time, and will stop asking for input when the user\ntypes the character \"q\" instead of an integer.  As the user inputs each new integer, keep track of the largest and the smallest integer in the input sequence. \nOnce the user signals quit (with the \"q\") print the output as indicated following, using 4 separate alert statements.\n</p>\n<p>\nAs we did in the previous program, we will need two variables in the code to keep track of \"the biggest we have seen so far\" \nand \"the smallest we have seen so far\".   These will need to be initialized appropriately, and then perhaps updated as\nwe get numbers from the user that are bigger, or smaller, than we have seen so far.\n</p>\n<p>\n<b>Validate the input.</b>  If the user gives something other than an integer or a \"q\", print \"bad input\" and end execution.\n</p>\n<p>\n<b>Output:</b>\nOnce the user signals \"q\", your program will generate the same output as in the previous program, in the same format, <b>except for the special case (explained following)</b>.\nExcept for the special case, your program output will be four separate alert statements. The alerts are in this order: \nminimum, maximum, average of the min and max, and the distance between the min and max.  \nAverage, of course, is just min + max, then the sum divided by 2.  Distance is found by max - min (min substracted from max).\nFor format, see the sample executions following.  Note that there are no blanks in the output strings.\n</p>\n<p>\n<b>Special case.</b>\nWe have a special case here.  What if the user gives a \"q\" as the very first input?  If that happens, there have been no integers input yet to use to find min and max.\nIn this case, simply end the program without doing any output at all.\n</p>\n<p>\n<b>Sample execution</b>\n<pre>\ninteger ('q' to quit)? 12\ninteger ('q' to quit)? 5\ninteger ('q' to quit)? -12\ninteger ('q' to quit)? 101\ninteger ('q' to quit)? q\nmin:-12\nmax:101\navg:44.5\ndist:113\n</pre>\n<pre>\ninteger ('q' to quit)? q\n</pre>\n<pre>\ninteger ('q' to quit)? quit\nbad input\n</pre>\n<pre>\ninteger ('q' to quit)? 2\ninteger ('q' to quit)? q\nmin:2\nmax:2\navg:2\ndist:0\n</pre>\n<pre>\ninteger ('q' to quit)? 10\ninteger ('q' to quit)? 5.3\nbad input\n</pre>\n<pre>\ninteger ('q' to quit)? -12\ninteger ('q' to quit)? 101\ninteger ('q' to quit)? quit\nbad input\n</pre>\n</p>\n<p>\n<b>Required style:</b> You must use a while loop and no for loops.  You must validate the input and respond to errors as noted above. You must define three (or more) functions... myMain (as we always do) and two others (we do have to test the user input to make sure you get integers). So a function isInt would be a good one... also you could do a function to manage all the validation... something like \"getGoodInput that will return a valid integer and not return it until the user gives a good one.  These are just suggestions.  <b>Do not make the functions trivial</b> (like myMain doing nothing but calling myMain2 for example).  <b> Do not declare functions inside other functions</b>... we have not really learned about that, and it can create some scope problems.\n</p>","value":{"correct":"12","style":"3"},"onSubmit":"var soln_inputs = [\n[1,2,3,\"quit\"], \n[1,2,3,4,\"q\"], \n[\"q\"], \n[5,\"q\"], \n[-4,5,-6,7,-8,\"q\"], \n[\"quit\"],\n[1,1,-1,\"q\"],\n[9000000000000000,-9000000000000000,3,\"q\"],\n];\nvar soln_outputs = [ \n[\"bad input\"], \n[\"min:1\",\"max:4\",\"avg:2.5\",\"dist:3\"], \n[], \n[\"min:5\",\"max:5\",\"avg:5\",\"dist:0\"],\n[\"min:-8\",\"max:7\",\"avg:-0.5\",\"dist:15\"], \n[\"bad input\"], \n[\"min:-1\",\"max:1\",\"avg:0\",\"dist:2\"],\n[\"min:-9000000000000000\",\"max:9000000000000000\",\"avg:0\",\"dist:18000000000000000\"],\n];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL < 1) { fail.s(\"use at least one while loop\"); }\n    if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n    if (style.nTFD < 3) { fail.s(\"should have at least 3 top level function declarations\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);              ","createdAt":{"$date":"2017-07-02T17:36:33.802Z"},"updatedAt":{"$date":"2018-03-12T00:36:36.341Z"}},{"_id":{"$oid":"596a6dc6a69c32e7768f326c"},"num":0,"type":"twit","phase":1,"name":"Overview","folder":"54603ea9bcc28de248a902fc","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/advFunc.overview.mp4","text":"<p>\n<font color=firebrick>\n<b>Functions are first-class values\n</b></font>\n</p> \n<p>\nFunctions in JavaScript are what we call \"first class values\".  This means a function is a \"value\" of some type (type \"function\") just as\n5 is a value of type number.  <b>First class values can be assigned to variables.</b>\nWe are already familiar with this using number (or string) data. Consider this code:\n<pre>\n  var x = 8;\n  var y;\n  y = x;\n  alert(x);\n  alert(y);\n</pre>\nWe exect that 8 will get printed by each alert statement.  By assigning 8 to x, and then by assigning the contents of x to y, we expect that the variable \"y\" is, in essence,\na name for the value 8 just as \"x\" is a name for the value 8.  The value 8 is the same, no matter which name (variable) we use to denote the value.  Either way, using either variable,\nwe get the number value 8, the same value that we get when we double the number value 4.  There is only one number value 8, but we may denote it many different ways.\n</p>\n<p>\nNow consider this code:\n<pre>\n\"use strict\";\n\nfunction myMain ( ) {\n   alert( double(5) );\n}\n\nfunction double ( n ) {  return 2*n; }\n\nmyMain();\n</pre>\nIn this program we define a function \"double\" that takes one argument.  When called, function \"double\" multiplies its argument by 2 and returns that value.\nWe have defined using the \"function\" keyword that we are accustomed to using for function definitions.  Function \"myMain\" calls \"double\" on the number value 4 and \nalerts the returned result.\n</p>\n<p>\nNow let's add some code to myMain:\n<pre>\n\"use strict\";\n\nfunction myMain ( ) {\n  var dubble;\n  dubble = double; // assigns the function value bound to \"double\" to the name \"dubble\"\n  alert( double(5) );  // note by color that \"double\" is a global name\n  alert( dubble(5) );  // note by color that \"dubble\" is a local name inside myMain\n}\n\nfunction double ( n ) {  return 2*n; }\n\nmyMain();\n</pre>\nThis shows one function (the code that multiplies its argument by 2) with two different names (\"double\", and \"dubble\").\nWe can make that function code execute by calling it with the \"double\" name, or with the \"dubble\" name; we do both in this program.\n</p>\n<p>\nThis is the same thing we did before with a number value, except we have now done it with a function value.  The function value\nis the code that constitutes the definition, and that is executed when the function runs.  We say that the names \"double\" and\n\"dubble\" are <b>bound</b> to the function value.  One way to bind a name to a function value is with the \"function keyword\".\nNow we see that another way is to take the function value that one name denotes and bind it to another name via assignment.\n</p>\n<p>\nSince the function \"double\" is declared at the global level, the name \"double\" is visible inside myMain, and can be used inside myMain.\nIf \"double\" were not visible inside myMain we could not call the function.  Since it is visible, we can not only call it to make\nit execute, but we can assign it to some other variable.  Then we have two \"names\" for the one function value (the function that\nmultiplies its single argument by 2 and returns that value).  The function value is not the name -- it is the code.\n</p>\n<p>\nTo get credit for this overview, put the last code (with \"double\" and \"dubble\") in your editor window and \nsubmit it for scoring.\n</p>","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs = [ [] ];\nvar soln_outputs = [ [10,10] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 0) { fail.s(\"use no for loop\"); }\n    if (style.nAFD != 2) { fail.s(\"need 2 functions declared\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                   ","createdAt":{"$date":"2017-07-15T19:32:22.073Z"},"updatedAt":{"$date":"2018-03-20T13:08:13.647Z"}},{"_id":{"$oid":"596ec4eea69c32e7768f33eb"},"num":0,"type":"twit","phase":1,"name":"Overview","folder":"53cef35d4fae0fbd7f73123f","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/recur.overview.mp4","text":"<p>\n<font color=firebrick>\n<b>Recursion: Functions that call themselves\n</b></font>\n</p> \n<p>\nRecursion is a very useful programming technique in which a function calls itself (re-cursion means re-occurring) in order to get a solution to a smaller or simpler\nversion of the problem that it is trying to solve.\nFor some problems, recursive code is simpler than equivalent code that is non-recursive -- easier to write, and more compact and less complex.\nBut the concept can be confusing, especially when first learning programming.  We will just get a taste of it in this module without going into in in deep detail.\n</p>\n<p>\nThe key to recursion is to make sure when the function calls itself, the problem that is passed to that call is a smaller or simpler version.\nWe think of a recursive function as saying \"well now, if I let some function solve a smaller or simpler version of my problem, then  I know how\nto use that smaller solution to solve my bigger problem.\"\n</p>\n<p>\nEvery recursive function will have two main parts:\n<ul>\n<li>the base case</li>\n<li>the recursive call</li>\n</ul>\nWe will write the base case first, and the base case will not recurse (will not call the function again). The base case is the simplest verion of the problem,\nwhere the result is known and can be returned directly. The base case will usually be a test to see if the parameter is some smallest value.\nThe base case is <b>very important</b>. Leaving it out can make your recursive function run forever when it is called.\nThe base case is the trigger that ends the sequence of function calls that is a recursion.\n</p>\n<p>\nIf the base case does not apply, then we enter the recursive case, where the function calls itself, captures the return value, and then uses that simpler\nreturn value to construct a solution it can return for it's own execution.\nExamples will make all this much easier to visualize.\n</p>\n<p>\nPut this code in your editor window and run it:\n<pre>\n\"use strict\";\n\nfunction myMain ( ) {\n  var N = 5;\n  alert(\"iteration ...\");\n  sequenceIter( N );\n}\n\nfunction sequenceIter ( n ) {\n  for (var i=n; i>=0; i--) {\n    alert(i);\n  }\n}\n\nmyMain();\n</pre>\nWhen you run this locally you will see it generates a sequence of numbers as output: 5,4,3,2,1,0.  Do not submit it for score yet.\n</p>\n<p>\nNow put this code in your editor window and execute it:\n<pre>\n\"use strict\";\n\nfunction myMain ( ) {\n  var N = 5;\n  alert(\"iteration ...\");\n  sequenceIter( N );\n  alert(\"recursion ...\");\n  sequenceRecur( N );\n}\n\nfunction sequenceRecur( n ) {\n  alert(n);\n  if (n===0) { return; }     // base case\n  sequenceRecur(n-1);   // recursive case\n}\n\nfunction sequenceIter ( n ) {\n  for (var i=n; i>=0; i--) {\n    alert(i);\n  }\n}\n\nmyMain();\n</pre>\nThis code now generated the sequence with both iteration, and with a recursive function (\"sequenceRecur\").  You see both functions do the same thing... one using looping\nand no further function calls, and one using recursion.  \n</p>","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs = [ [] ];\nvar soln_outputs = [ [\"iteration ...\",5,4,3,2,1,0,\"recursion ...\",5,4,3,2,1,0] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL > 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP > 1) { fail.s(\"use only one for loop\"); }\n    if (style.nAFD < 3) { fail.s(\"need at least 3 functions declared\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                 ","createdAt":{"$date":"2017-07-19T02:33:18.541Z"},"updatedAt":{"$date":"2018-04-03T01:27:50.609Z"}},{"_id":{"$oid":"59989d22f86460f32f01ffce"},"num":0,"type":"twit","phase":1,"name":"Overview","folder":"53f29f9a41b3137f58803191","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/simpfunc.overview.mp4","text":"<p>\n<font color=firebrick>\n<b>Simple functions\n</b></font>\n</p>\n<p>\nFunctions allow us to collect sequences of statements into a group and name them.  Later, when we want those instructions to execute we do it by using the name of the collection.  The collection of statements, and its name, we call a \"function\".  Functions take arguments (parameters) but for now we will start with functions with no arguments.\n</p>\n<p>\n<b>Definition: </b> A function must first be <b>defined</b>, where the instructions to run are written and bundled together with a name.\nA function definition is like authoring a book and putting that book on a shelf -- to be read later.  Writing the book is not the same as reading it.\n</p>\n<p>\n<b>Exeuction:</b>\nOnce defined, we can then <b>call </b> the function -- request that the function execute to do some computing work for us.  \nBy typing the function name with parentheses after, we make the instructions in a function definition actually run and generate results.\n</p>\n<p>\nTo complete this problem, first type the following function <b>definition:</b> \n<pre>\n\"use strict\";\n function fooFiver ( ) { alert(5); }  // function definition\n</pre>\nClick on the \"run locally\" button. You will see JavaScript appear to do nothing.  The message you get says something like \"No error reports\".\nWe do not see any alert box pop up with output.  This is because what we did in this two-line program is define the function \"fooFiver\" only. \nWe did not ask that function to actually execute.   We wrote the function and put it on a shelf in case it was needed later.\n</p>\n<p>\nNow add this line to your program as the 3rd line, after the definition line: \n<pre>\nfooFiver () ;  // function call, actual execution of the previously defined function\n</pre>\n</p>\n<p>\nAgain click the \"run locally\" button.  Now we see the alert box pop up with \"5\" in it.  The first line defines the function \"fooFiver\" and that does nothing \nvisible.  The second line says to go to the shelf, take down the function \"fooFiver\" and run it -- at that point you see the output that the body of statements inside\nfunction fooFiver creates.  You have defined a function, and then you requested that the defined function execute.\n</p>\n<p>\nFunctions you define are really the same as the functions we have used so far (alert, prompt, Math.sqrt, etc.)\nexcept that those other function were written by someone else, and the code included with your JavaScript system ready for you to call\nwhen needed.\n</p>\n<p>\nWe will see that function definitions give us a very useful way to organize our programs as they grow larger.  Instead or writing 300 or 400 lines of code\nin one chunk, we will instead write lots of smaller chunks of code... our named function definitions.\nAlso, by writing one function definition I can call it (make it execute) many times without having to repeat all the \ncode in the function all over my program.  Duplicating code is a bad software development practice.  It makes programs harder to change without\nmaking mistakes.\n</p>","value":{"correct":"1","style":"1"},"onSubmit":"//console.log(\"checking Simple functions overview\");\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [5] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }\n  // if (ff) { fail.s(\"no style points since functional failed\"); }\n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesn't follow myMain function format\", (3/5)); }\n    if (style.nDV > 0) { fail.s(\"you dont need variables\", (1/5) ); }\n    if (style.nUDV != 0) { fail.s(\"you used undeclared variable(s): declare all variables\", (1/10) ); }\n    if (style.nUUDV != 0) { fail.s(\"you declared variable(s) that were not used: use what you declare\", (1/10) ); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n//console.log(\"end correctness check\");        ","createdAt":{"$date":"2017-08-19T20:18:42.108Z"},"updatedAt":{"$date":"2018-01-16T20:20:32.191Z"}},{"_id":{"$oid":"59989d3af86460f32f01ffcf"},"num":1,"type":"twit","phase":1,"name":"myMain style format","folder":"53f29f9a41b3137f58803191","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/simpfunc.mymain.mp4","text":"<p>\n<font color=firebrick>\n<b>Write a program that will print out (alert) the phrase \"executing myMain body\".  Use the new \"myMain style format\".\n</b></font>\n</p>\n<p>\nAs you may have noticed, a program can be written several different ways, yet still generate the same output values. The way program statements are organized we call <b>\"structural style\"</b>.  Some styles are better than others.  Some program structures are easier to modify without making mistakes, for example.  Some structural styles are easier for groups of programmers to work on without interfering with each other.\n</p>\n<p>\n<b>From now on</b> (unless we specify otherwise) your programs should be constructed with the following structural style: \n<br/>\n&nbsp&nbsp&nbsp -- <i>Write a function called \"myMain\" with no arguments.  </i>\n<br/>\n&nbsp&nbsp&nbsp -- <i>Put your code inside this function.  </i>\n<br/>\n&nbsp&nbsp&nbsp -- <i>Put the call <b>myMain();</b> as the last line in your code, after the function definition.</i>\n<p>\nThis structural style means your programs will be built as one (or more) function definition, and one call to myMain() to get the snowball rolling.\nAs we get to more complicated programs, we will have more than one function definition. However we will always have a function\nmyMain defined and the call myMain() to start it all off.\n</p>\n<p>\nThis sort of structural style is called a \"coding convention\", meaning it is not something the language requires, but rather is an agreement to adhere to \na specific form.  Our myMain convention says all code will be nothing but function definitions, and one call ( myMain() ).  I will be showing reasons for that in the videos ahead.  For now, the first reason is that other languages like Java have more rigid structure rules than JavaScript, so if we follow this convention you will be more ready to move to other languages.  Another reason is if we limit some of the choices you need to make, you can concentrate on practicing the principles with less potential confusion.  Finally, a third reason is to limit the use of global variables; you don't know what this means yet but we are getting there.\n</p>\n<p>\nThere are many coding conventions in use in all areas of programming language structure.  Some programmers start all variable name with lower case, for example, and use upper case characters to delineate words in a variable name (like distanceTraveled, or timeTakenForTheGame). Others might like to use underscores (like distance_traveled, or time_taken_for_the_game).   Indenting code to make it readable is another place where different coding conventions are used.  Some programmers like to create object names that start with an upper case character.  Pick a style and stick to it.  Your code will be more readable that way.\n</p>\n","value":{"correct":"1","style":"1"},"onSubmit":"//console.log(\"checking myMain style format\");\nvar soln_inputs = [ [ ] ];\nvar soln_outputs = [ [\"executing myMain body\"] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  var ff = false;\n\n  // check functional correctness\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }\n  // if (ff) { fail.s(\"no style points since functional failed\"); }\n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesn't follow myMain function format\", (3/5)); }\n    if (style.nDV > 0) { fail.s(\"you dont need variables\", (1/5) ); }\n    if (style.nUDV != 0) { fail.s(\"you used undeclared variable(s): declare all variables\", (1/10) ); }\n    if (style.nUUDV != 0) { fail.s(\"you declared variable(s) that were not used: use what you declare\", (1/10) ); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);\n//console.log(\"end correctness check\");","createdAt":{"$date":"2017-08-19T20:19:06.92Z"},"updatedAt":{"$date":"2018-01-16T20:16:15.682Z"}},{"_id":{"$oid":"59b091af9b53d0f30a5a00ea"},"num":0,"type":"diy","phase":1,"name":"DNA Sequence Analysis","folder":"5902b4167bb0b09c0d2a6422","language":"javascript","testMode":true,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Write a program that searches for occurrences of base pairs in a DNA sequence.  First ask the user to input a DNA sequence (as a string).  \nThen loop, asking the user for a base pair (as a string of 2 characters) and print the number of times that base pair occurs in the DNA sequence (using the output format below).\nDetails follow.\n</b></font>\n</p> \n<p>\nA DNA sequence representation is a string composed entirely of the capital letter \"A\", \"C\", \"T\", and \"G\".  For example, each of the following lines represents a DNA sequence:\n<pre>\nACATGAGACAGACAGACCCCCAGAGACAGACCCCTAGACACAGAGAGAG\nTATGCAGGACAGGGTTTTTGCCCAGGGTGGCAGTATG\nAGGATTGAGGTATGGGTATGTTCCCGATTGAGTAGCCAGTATGAGCCAG\nAGTTTTTTACAAGTATTTTTCCCAGTAGCCAGAGAGAGAGTCACCCAGT\n</pre>\nThe following are sample executions:\n<pre>\nWhat DNA sequence? ACATCCTGAGACAGACAGACCCCCAGA\nWhat base pair?  CA\nThe base pair 'CA' occurs 4 times in the DNA sequence 'ACATCCTGAGACAGACAGACCCCCAGA'\nWhat base pair? TG\nBase pair 'TG' occurs 1 times in DNA sequence 'ACATCCTGAGACAGACAGACCCCCAGA'\nWhat base pair? CC\nBase pair 'CC' occurs 5 times in DNA sequence 'ACATCCTGAGACAGACAGACCCCCAGA'\nWhat base pair? done\n</pre>\n</p>\nNote how we are counting occurrences.  In this string\n<pre>\nCCCC\n</pre>\nwe are saying that \"CC\" occurs 3 times (not 2).  We do not count the first two characters as a match, and then move on to the 3rd character.  Rather we start with the first \"C and notice that there is a \"C\" following it, for the first match.  We move on to the 2nd character, which is a \"C\" and we note a \"C\" following it (for the 2nd match).  We move on to the 3rd character, which is a \"C\", and we note a \"C\" following it (for the 3rd match).  I am not sure if this is how biologists count these things, but that is how we will do it here for this program.  We call it a \"sliding window\"\nthat is sliding one character at a time.  For fun, you can try\nwriting your own program where the string \"CCCC\" would produce 2 matches... a sliding window that slides to the end of any match it finds to keep going.\n<p>\n</p>\n<p>\n<B>String functions:</b>\nThere are a couple string functions you may find useful.\nFirst, the function \" <b>split </b>\" will take a string and produce (return) an array of individual characters, one character from the string stored in each slot location in the array.\nA string value in JavaScript is an object, and \"split\" is a method that can be called on the object.  For example consider this code:\n<pre>\nvar str = \"go heels!\";\nchars = str.split(\"\");\nalert(chars[0]);  // will print \"g\"\nalert(chars[1]);  // will print \"o\"\nalert(chars[2]);  // will print \" \"  a blank character\nalert(chars[3]);  // will print \"h\"\nalert(chars[str.length - 1]);   // will print \"!\"\n</pre>\nHere, using the parameter \"\" in the call to the split method causes the string to be burst apart into individual characters.  The split method can be used to split strings into\nother chunks based on other characters; google it up for more information.\n</p>\n<p>\nAnother possibly useful string method is \"<b> charAt </b>\".  This string method will produce (return) a single character, the one found at a specific position in the \nstring. Character positions in a string start at 0 and go up to one less than the length of the string.  For example consider this code:\n<pre>\n var bp = \"AG\" ;\n var first = bp.charAt(0);\n var second = bp.charAt(1);\n var last = bp.charAt(bp.length - 1);\n alert(first);    // prints \"A\"\n alert(second);  // prints \"G\"\n alert(last);    // prints \"G\"\n</pre>\n</p>\n<b>Other challenges:</b> As further practice, you can alter how searching is done and try coding different versions of this program (for practice, not for score).\nFor example, only count a base pair if it occurs within 10 (or 20, or some limit) characters of some other base pair.  Or dont count a base pair if it immediately follows an \noccurrence of itself.  Or count base pair pairs... if the base pair is AT for example, then look for ATAT and count that.  Make up your own search pattern and code it up.\n</p>","value":{"correct":"9","style":"3"},"onSubmit":"var soln_inputs = [ [\"ACTGACATGTAG\",\"AT\",\"AC\",\"done\"] ];\nvar soln_outputs = [ [\"Base pair 'AT' occurs 1 times in DNA sequence 'ACTGACATGTAG'\", \n                      \"Base pair 'AC' occurs 2 times in DNA sequence 'ACTGACATGTAG'\"] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF > 3) { fail.s(\"You can get this done with fewer while loops\"); }\n    if (style.nFLAP > 3) { fail.s(\"You can get this done with fewer for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ","createdAt":{"$date":"2017-09-07T00:24:15.845Z"},"updatedAt":{"$date":"2018-01-05T18:59:04.538Z"}},{"_id":{"$oid":"59b166c19b53d0f30a5a0111"},"num":1,"type":"diy","phase":1,"name":"Mortgage calculator","folder":"5902b4167bb0b09c0d2a6422","language":"javascript","testMode":true,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Write a program that will compute mortgage information.\nAsk the user to input an total amount borrowed (real number, dollars), an interest rate (a real number between 0.0 and 100.0), a repayment time frame (in months, an integer), and an amount extra to pay each month (real number, dollars).  Print the total number of payments that will be made over the life of the loan (the extra amount will make it smaller than the repayment number of months).\nDetails follow.\n</b></font>\n</p> \n<p>\nSample executions:\n<pre>\nAmount borrowed? 150000.00                    // prompt\nInterest rate? 3.5                            // prompt\nNumber of months?  360                        // prompt\nExtra principle paid each month?  1000.00     // prompt\nTotal number of payments: 247                 // alert\n</pre>\n</p>\n<p>\nUsing the user inputs amount, rate, and months figure the monthly payment that will make the payoff happen.\nThe print that monthly payment. Then ask the user to input a dollar amount that will be paid each month\nas additional principle.  Let's call that extra.  This means each month, the user will pay payment+extra dollars towards the loan.\nThe interest will be charged on the remaining balance as simple interest... meaning is 3% is the rate, then each month the \nborrower pays 3/12 %, or 0.25 of the remaining balance.\nUsing this, figure how many payments (months) it will take to knock the balance down to 0 and pay off the loan.\n</p>","value":{"correct":"9","style":"3"},"onSubmit":"var soln_inputs = [ [150000,3.6,360,1000] ];\nvar soln_outputs = [ [1234.56,241] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF > 3) { fail.s(\"You can get this done with fewer while loops\"); }\n    if (style.nFLAP > 3) { fail.s(\"You can get this done with fewer for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ","createdAt":{"$date":"2017-09-07T15:33:21.056Z"},"updatedAt":{"$date":"2018-01-05T18:59:04.54Z"}},{"_id":{"$oid":"59b1978c9b53d0f30a5a0147"},"num":7,"type":"diy","phase":1,"name":"Bletchley Park and Enigma","folder":"5902b4167bb0b09c0d2a6422","language":"javascript","testMode":true,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Write a program that will compute the Enigma cipher, similar to the ones produced by the Enigma machines in WW2.\nDetails follow.\n</b></font>\n</p> \n<p>\nBletchley Park is an easy drive northwest of London.  In World War II the mansion housed the Government Code and Cypher Schools and was the main location for British intelligence codebreakers.  The men and women working there regularly penetrated the secret communications of the Axis Powers – most importantly the German Enigma and Lorenz ciphers. The intelligence gathered at Bletchley was termed \"Ultra\" and historians general consider the work to have shortened the war by two to four years. Without it, the outcome of the war would have been uncertain.\n</p>\n<p>\nThe Enigma cipher was a German code used before and during WW2.  It was largely considered unbreakable (in pre-computer days) but that was not so.  Polish mathematicians learned how early forms of the code worked, but breaking it became impractical at the outbreak of WW2 as the Germans added complexity to the basic machines, and changes keys daily.  Due to the huge number of combinations used in how the characters were transposed during encoding, decoding rapidly was nearly impossible.  Alan Turing, working at Bletchley in Britain, created a machine (the Bombe) that was able to reduce the possible combinations down to a number where crypt-analysts were able to decipher coded messages.  Breaking the Enigma code enabled the British to gather very important intelligence that is often credited with tipping the war in favor of the Allied forces and shortening it by several years.  The historical significance is hard to underestimate.  \n</p>\n<p>\nWe are going to write a program that will encode, and decode, messages using the Enigma cipher.\n</p>\n<p>\nSample executions:\n<pre>\nBLAH\n</pre>\n</p>\n<p>\n</p>","value":{"correct":"9","style":"3"},"onSubmit":"var soln_inputs = [ [150000,3.6,360,1000] ];\nvar soln_outputs = [ [1234.56,241] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF > 3) { fail.s(\"You can get this done with fewer while loops\"); }\n    if (style.nFLAP > 3) { fail.s(\"You can get this done with fewer for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ","createdAt":{"$date":"2017-09-07T19:01:32.25Z"},"updatedAt":{"$date":"2018-01-05T18:59:04.552Z"}},{"_id":{"$oid":"59c5453ffb1ebbb40ccae1c8"},"num":2,"type":"diy","phase":1,"name":"Simple Caesar Cipher","folder":"5902b4167bb0b09c0d2a6422","language":"javascript","testMode":true,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Write a program that will compute a simple form of the well-know Caesar cipher, using details given following.\nDetails follow.\n</b></font>\n</p> \n<p>\nLet's delve a little into the world of cryptography.  Cryptography is the study of how we can make messages (text) unreadable without special knowledge (which we presume\nthe recipient of the message has, and others dont have).  A \"cipher\" is an algorithm for encoding (and decoding) a message.  We call the original message the \"plain text\" \nand we call the encoded message the \"cipher text\".  We call the secret knowledge needed to encode and decode messages the \"key\" (or keys).\nWe want a cipher to be efficient when encoding and decoding messages (if we have the key), and impossible (or computationally impractical) to \"break\". \nBreaking a cipher is figuring out how to read a message without having the key... or by guessing the key.\n</p>\n<p>\nA <b>Caesar cipher</b> is a simple substitution cipher that most of us probably learned to do as children.  \nIt was reputedly for used by Julius Caesar to secure his communications during his military and political activities.\nIn a substitution cipher, the cipher text is produced\nfrom the plain text by substituting each character with a new character.\nThe new character is obtained from the alphabet shifted some fixed number of places.  For simplicity, our examples will show \nonly upper case characters.  Consider a left-shift-5 cipher, where we have these alphabets:\n<pre>\n  plain:  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n cipher:  F G H I J K L M N O P Q R S T U V W X Y Z A B C D E\n</pre>\nThe shift amount is called the \"key\", which is 5 in this example.  I will call it a left-shift because we take the alphabet and shift it to the left, moving A,,B,C etc around to the Z end.  Thus the 6th letter in the unshifted alphabet (\"F\") becomes the first letter after we shift left 5 times.\nWith this done, we can encode messages by seeing what character corresponds to each character in the plain text (by position in the sequence).\nIf the plain text has an \"A\" character, we put a \"F\" character into the cipher text.  We see in the shifted alphabet table above \nthat \"F\" is below \"A\".  When we find a blank in the plain text, we put a blank into the cipher text.  Here is a full example:\n<pre>\nGO TAR HEELS   ---> LT YFW MJJQX\n</pre>\n</p>\n<p>\nNotice we encoded only the non-blank characters, leaving the blanks unchanged.  This gives a decoder some advantage, since the word boundaries are known in\nthe ciphertext.\nWe can make the cipher a touch harder to break by adding the \" \" blank into the character sequence, so that we cannot look at the cipher text and see word breaks and word lengths directly.  We will explore this idea in the next problem.\n</p>\n<p>\nSo let's first implement this simple Caesar cipher (with unchanged blanks).  \nFor input, first ask the user for a key.  This will be the shift amount (and implicitly, the direction). \nThe key should be an integer between 1 and 25.  We will disallow a 0 shift (for obvious reasons) and we also\ncannot have a shift larger than 25  (since shifting 26 is like shifting 0, shifting 27 is like shifting 1, etc.).  \nWe will consider all shifts to be left (as shown above); if we wanted to shift right, we can find a left shift key that would give the same encoding (for example, left-shift-5 is the same as right-shift-20).  Validate this input to make sure it is an integer in the allowed range; use the re-ask strategy... we will alert\n\"try again\" and re-ask until the user gives a good integer value.\n</p>\n<p>\nOnce we have a good key, we will ask the user for a text message to encode.  For simplicity we will limit ourselves to working with upper case\ncharacters A to Z, and the blank character \" \".  We will not have any digits or punctuation characters in the message.  \nUse this ordering for the alphabet characters:\n<pre>\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n</pre>\nWe will assume the user gives us text that has no digits or punctuation.  We can make things a bit easier on the user by converting the input string \nto all upper case in our code; this will allow the user to type with upper and lower case, but we can still work with only upper case.  \nTo convert a string to all upper case, use the \"toUpperCase()\" string methods, as follows:\n<pre>\n  var msg = \"Hello Tarheels lets beat Duke\";\n  msg = msg.toUpperCase();\n  // at this point the variable msg contains the string \"HELLO TARHEELS LETS BEAT DUKE\"\n</pre>\n</p>\n<p>\nApply the cipher (using the key) to the plain text to produce a cipher text.  For output, print the single string which is the cipher text.  Use one alert statement to do this.\n</p>\n<p>\n<b>Applying the cipher:</b>\n</p>\n<p>\n<b>Notes:</b>\nThere are several string methods you will find helpful. Particularly, we have methods that will take a string and create an array of individual characters.\nWe also have a method that will take an array of characters and produce a single string composed of those characters. \nWe studied the \"split\" method earlier. If you call the split method on a string and pass\nan empty character as parameter, the split will burst the string into an array of individual characters:\n<pre>\n  var msg = \"one two three\";\n  var arr = msg.split(\"\");\n  // now arr[0] is \"o\", arr[1] is \"n\", arr[2] is \"e\", arr[3] is \" \", etc.\n\n  msg = arr.join( \"\" );  // this puts the empty string \"\" between the elements in the arrary \"arr\" and makes a single string\n  // now msg is un-burst, and made back into a single string\n</pre>\nOur strategy will be to burst apart the plaintext string into an array (with \"split\" on string), change the individual characters in the resulting array, \nthen \"string-ify\" the changed array of characters back  into a single string (with \"join\" on the array) to get the final cipher text.\n</p>\n<p>\n<b>Breaking the Caesar Cipher:</b>\nHow could be break this simple cipher?  If we intercept an encoded message, we do not know just by looking at it that a Caesar cipher was used to encode it.\nIt will just look like gibberish.  If we *did* know it was a Caesar cipher, breaking it is simple... we just try each possible key 1 up to 25 and see which one\nproduces a readable plain text.  So we see here one weakness: there are so few possible keys that we can do an exhaustive trial of all of them.\nAlso, trying each key is computationally cheap.  So stronger ciphers must defend against exhaustive search attacks by have an impractically huge number of\npossible keys.\n</p>\n<p>\nGuessing that our intercepted message was encoded with a Caesar cipher is a different problem.\n</p>","value":{"correct":"9","style":"3"},"onSubmit":"var soln_inputs = [ [1,\"A\"], [10,\"A\"], [6,\"Go tarheels win that game\"],\n   [13,\"Now is the time for all good programmers\"],\n   [0,-5,28,21,\"JavaScript gives excellent mental exercise\"]\n];\nvar soln_outputs = [ [\"B\"], [\"K\"], [\"MU ZGXNKKRY COT ZNGZ MGSK\"] ,\n   [\"ABJ VF GUR GVZR SBE NYY TBBQ CEBTENZZREF\"],\n   [\"try again\",\"try again\",\"try again\", \"EVQVNXMDKO BDQZN ZSXZGGZIO HZIOVG ZSZMXDNZ\"]\n];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF > 3) { fail.s(\"You can get this done with fewer while loops\"); }\n    if (style.nFLAP > 3) { fail.s(\"You can get this done with fewer for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ","createdAt":{"$date":"2017-09-22T17:15:43.918Z"},"updatedAt":{"$date":"2018-01-05T18:59:04.542Z"}},{"_id":{"$oid":"59c92a27fb1ebbb40ccae270"},"num":4,"type":"diy","phase":1,"name":"Rotating Caesar Cipher","folder":"5902b4167bb0b09c0d2a6422","language":"javascript","testMode":true,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Write a program that will compute a more complicated variant of the well-know Caesar cipher. In this one we will \n\"rotate\" -- or change -- the key periodically.\nDetails follow.\n</b></font>\n</p> \n<p>\nIn the previous Caesar cipher, we encoded alphabetic characters but also encoded blanks, as well as allowing some punctuation into the character list for the cipher.\nIn this modification we will add key changes into the mix, which makes this cipher more difficult to break.\nWe will have the same inputs as before (a key, and then a plain text to encode), but for this cipher the key is a starting key.\nThe key will change periodically as we go through the plain text character by character.  We will do what is called a \"key rotation\", meaning we will\nincrease the key value, and that increase will happen every so many characters.  For this variant, we will fix this period at 5 characters, and we will\nincrement the key value by one.  In a later version we can add more input parameters and allow the user to specify how much to increment the key,\nafter how many characters go by.\n</p>\n<p>\n<b>So let's implement this</b> rotating key cipher. As before we will ask the user for the key, an integer between 1 and the length of the character set minus 1.\nWe will validate this input using the re-ask strategy... if the input is bad, we will alert \"try again\" and re-ask until the user gives a good integer value.\n</p>\n<p>\nOnce we have a good key, we will ask the user for a message to encode.  This will be a string composed of upper case alphabetic characters, digits, the \" \" blank,  \nthe \".\" period character, and the \",\" comma.\nUse this ordering:\n<pre>\n0 1 2 3 4 5 6 7 8 9 . , ; : ? ! ' $ _ A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n</pre>\nbut of course, your code you will use a real \" \" blank and not the underscore.\n</p>\n<p>\nFor output, print a single string which is ciphertext (the plaintext, encoded).  Use one alert statement.\n</p>\n<p>\n<b>Notes:</b>\nYour code will be very similar to the previous versions.  For the rotating cipher the main changes will be in determining when the\nkey should change, and making the proper change. Remember... the key cant get larger than the length of the character set, so\nas the key is incremented there must be some modular arithmetic done to keep it in range.\n</p>\n<p>\nOne thing to watch for when rotating the key.  When the key get to the end of the alphabet... like 25 (for a 26 character set), we are using modular arithmetic to make sure\nwe stay in range.  So (for this example) when the key is incremented (to 26) and we mod it by 26, then we get a new key of 0.\nWe have said we wont do any 0 shifts (since the unaltered text is readable... even if only a short piece).  So we have to further check and when the new\nkey is 0, we have to bump it up to 1 before we keep encoding.\n</p>","value":{"correct":"9","style":"3"},"onSubmit":"var soln_inputs = [ [1,\"A\"], [10,\"A\"], [20,\"A\"], [30,\"A\"], [19,\"Go Tarheels, win that game!\"],\n   [13,\"Now is the time for all good programmers\"],\n   [0,-5,73,\"help\",29,\"JavaScript: for $10.75, you get mental exercise and FUN!\"]\n];\nvar soln_outputs = [ [\"B\"], [\"K\"], [\"U\"], [\"4\"], [\"Z7S;T,1YY5:NU$39V!3W'W3X92U\"] ,\n   [\"019MV6N7VSO8X1TPV47PR22QX66VR7.7Z.T66Y,;\"],\n   [\"try again\",\"try again\",\"try again\", \"try again\", \";3F3C6C;AEZ4.AD54ONXVTZ6MDJ7?;J8C:DK.C9?P!J:AL',;G'; OH.\"]\n];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF > 3) { fail.s(\"You can get this done with fewer while loops\"); }\n    if (style.nFLAP > 3) { fail.s(\"You can get this done with fewer for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ","createdAt":{"$date":"2017-09-25T16:09:11.707Z"},"updatedAt":{"$date":"2018-01-05T18:59:04.546Z"}},{"_id":{"$oid":"59c92c12fb1ebbb40ccae273"},"num":3,"type":"diy","phase":1,"name":"Caesar Cipher plus","folder":"5902b4167bb0b09c0d2a6422","language":"javascript","testMode":true,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Write a program that will compute a slightly more complicated variant of the well-know Caesar cipher.\nDetails follow.\n</b></font>\n</p> \n<p>\nIn the previous Caesar cipher, we encoded alphabetic characters but left blanks unchanged.  We can make the cipher a touch harder to break by adding the \" \" blank into the character sequence, so that we cannot look at the cipher text and see word breaks and word lengths directly. For example, using the same left-shift-5 key, but adding the \" \" at the end we get this (I will use _ so the blank is visible in the alphabets):\n<pre>\n  plain:  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z _\n cypher:  F G H I J K L M N O P Q R S T U V W X Y Z _ A B C D E\n</pre>\nWith this altered cipher, we get this message encoding:\n<pre>\nGO TAR HEELS  --->  LTEYFWEMJJQX\nJUMP OVER THE VAN  --->  OZRUET JWEYMJE FS\n</pre>\nWe can similarly add other characters... punctuation, digits, etc.\n</p>\n<p>\nLet's implement this altered version. As before we will ask the user for the key, an integer between 1 and the length of the alphabet (minus 1).\nWe will validate this input using the re-ask strategy... we will alert \"try again\" and re-ask until the user gives a good integer value.\n\n</p>\n<p>\nOnce we have a good key, we will ask the user for a message to encode.  This will be a string composed of upper case alphabetic characters, digits, the \" \" blank,  the \".\" period character, and the \",\" comma.\nUse this ordering:\n<pre>\n0 1 2 3 4 , 5 6 7 8 9 . A B C D E F G H I J K L M N _ O P Q R S T U V W X Y Z\n</pre>\nbut of course, your code you will use a real \" \" blank and not the underscore.\n</p>\n<p>\nFor output, print a single string which is ciphertext (the plaintext, encoded).  Use one alert statement.\n</p>\n<p>\n<b>Notes:</b>\nThe code for this version of the cipher is really very similar to the first version.  We do not have to explicitly look for blanks (to prevent encoding) as before, \nbut there are few other changes.\n</p>","value":{"correct":"9","style":"3"},"onSubmit":"var soln_inputs = [ [1,\"A\"], [10,\"A\"], [20,\"A\"], [6,\"Go tarheels win that game\"],\n   [13,\"Now is the time for all good programmers\"],\n   [0,-5,58,21,\"JavaScript gives excellent mental exercise\"]\n];\nvar soln_outputs = [ [\"B\"], [\"K\"], [\"T\"], [\"MUTZGXNKKQYT2 STZNGZTMGRK\"] ,\n   [\"Z180U,05TQ05UYQ0R140NXX0S11P0241S4NYYQ4,\"],\n   [\"try again\",\"try again\",\"try again\", \"3UEUBWA29C702EYB7YGWY,,Y6C75Y6CU,7YGYAW2BY\"]\n];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF > 3) { fail.s(\"You can get this done with fewer while loops\"); }\n    if (style.nFLAP > 3) { fail.s(\"You can get this done with fewer for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ","createdAt":{"$date":"2017-09-25T16:17:22.856Z"},"updatedAt":{"$date":"2018-01-05T18:59:04.544Z"}},{"_id":{"$oid":"59fddc4a433aec110b9e8a3e"},"num":0,"type":"twit","phase":1,"name":"Overview","folder":"599b1867f86460f32f01ffe6","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/parse.overview.mp4","text":"<p>\n<font color=firebrick>\n<b>Parsing: Decomposing text strings\n</b></font>\n</p> \n<p>\nIn this module we will learn a little about \"parsing\", which is breaking up text strings into pieces... into a collection of smaller strings, or components.\nParsing is part of many computing applications.  For example, in order to execute your JavaScript program, a compiler or interpreter must take the \nsingle text string that is your program and find all the important substring pieces... components like the keywords \"function\" and \"true\" and \"while\"... \nvariable names, and number constants... all parts within the one long program string.  \nWe will see how to do a simple form of this using some JavaScript built-in string functions.\n</p>\n<p>\nThe string type in JavaScript has some built-in methods (functions) that you can ask any string to execute.  \nThe one we will use to parse is the \"split\" function.  You should google \"JavaScript string split\" and read the\ndetails.  It takes a parameter, which is a single character; and it returns an array of strings.  The split functions will break the string that executes it into parts using \nthe character that is sent as parameter to define the boundaries between parts; the parts will be placed into successive locations in the array that is returned.\nFor example, consider this code:\n<pre>\nvar long = \"alpha beta gamma\";\nvar parts= long.split(\" \");\n</pre>\nThe second line causes the string \"long\" to be divided into 3 substrings using the blank as the separator.  This means the array \"parts\" has \"alpha\" in parts[0], \"beta\" in parts[1].\nand \"gamma\" stored in parts[2].  Try this code, and alert elements from the array \"parts\" to see how split works.\n</p>\n<p>\nThe split function can divide a string using any character as the break point, not just a blank. For example, if you want to get a string of data (from a database, perhaps) and it\nconsists of several numbers separates by commas, you can break the data string down this way:\n<pre>\nvar data = \"123,24.571,15,-37.2,0.01\" ;\nvar nums = data.split(\",\");\nalert(nums[0]);\nalert(nums[3]);\n</pre>\nIf you try this code, you will see the numbers \"123\" and \"-37\" printed out in separate alert boxes.\nNote that the elements in the array \"nums\" are still strings (that look like numbers). If you need real numeric data you still need to convert\nthe string data to number data (with the Number() function).\nTo see this, run the code above and add these lines at the end:\n<pre>\nalert(nums[0]+nums[1]);  // string concatenation\nalert(Number(nums[0]) + Number(nums[1]));  // numerical arithmetic\n</pre>\n</p>\n<p>\nTo complete this overview, type in the following program, execute it, then submit it for score.\n<pre>\n\"use strict\";\n\nfunction myMain() {\n  var text = \"see how parsing breaks up strings\";\n  var arr = text.split(\" \");\n  alert(arr[2]);\n  alert(arr[3]);\n  alert(arr[arr.length-1]);\n}\n\nmyMain();\n</pre>","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs = [ [\"see how parsing breaks up strings\"] ];\nvar soln_outputs = [ [\"parsing\",\"breaks\",\"strings\"] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    //if (style.nWLAP > 2) { fail.s(\"You can do this with only 2 while loops\"); }\n    //if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n    //if (style.nAFD < 3) { fail.s(\"need at least 3 specific functions in this program\"); }\n    //if (style.nDO < 1) { fail.s(\"need to declare and use 2 objects\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                 ","createdAt":{"$date":"2017-11-04T15:27:06.9Z"},"updatedAt":{"$date":"2018-03-27T22:54:58.768Z"}},{"_id":{"$oid":"59ff1f5e433aec110b9e8a53"},"num":1,"type":"twit","phase":1,"name":"Simple parsing","folder":"599b1867f86460f32f01ffe6","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/parse.single.mp4","text":"<p>\n<font color=firebrick>\n<b>Write a program that will ask the user for a string of text, and parse it into components separated by \":\" colons.\n</b></font>\n</p> \n<p>\nFor this program we will practice with the \"split\" method provided by the string type.\nWe will ask the user to type a string as input.  Then the program will break that input string into parts using the colon \":\" character\nas the separator between parts.  As noted in the overview, the split function will do this, and will return an array containing the smaller strings\nthat result from the split.\n</p>\n<p>\n<b>Output:</b>\nOnce parsing is done print out the first component and the last one from the array of parsed pieces.\nNote that we have a special case or two to worry about here.\nThere might not be two pieces.  If the input string contains on colon characters, then the split function will do no splitting.\nIn this case the entire input string is returned in the array slot 0.  So in such a case, there will be a first element to \nalert, but there will be no second element.\nSo remember to test the length of the results array to see if you can print that second component or not.\n</p>\n<p>\n<b>Sample executions</b>\n<pre>\nInput string?  the quick fox jumped the lazy dog\nthe quick fox jumped the lazy dog\n</pre>\n<pre>\nInput string? 12:24:36:48:60\n12\n60\n</pre>\n<pre>\nInput string? there are only:two parts in this string\nthere are only\ntwo parts in this string\n</pre>\n</p>\n","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs = [ [\"see:how:parsing:breaks:up:strings\"],\n                    [\"the quick:brown fox jumped:over the:lazy dog\"],\n                    [\"13:17:19:23:29:31\"], [\"there are no colon chars in this one\"]\n                  ];\nvar soln_outputs = [ [\"see\",\"strings\"],\n                     [\"the quick\",\"lazy dog\" ],\n                     [\"13\",\"31\"], \n                     [\"there are no colon chars in this one\"] \n                   ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    //if (style.nWLAP > 2) { fail.s(\"You can do this with only 2 while loops\"); }\n    //if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n    //if (style.nAFD < 3) { fail.s(\"need at least 3 specific functions in this program\"); }\n    //if (style.nDO < 1) { fail.s(\"need to declare and use 2 objects\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                 ","createdAt":{"$date":"2017-11-05T14:25:34.189Z"},"updatedAt":{"$date":"2018-03-27T22:55:05.417Z"}},{"_id":{"$oid":"59ff2332433aec110b9e8a58"},"num":2,"type":"twit","phase":1,"name":"Double parsing","folder":"599b1867f86460f32f01ffe6","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/parse.double.mp4","text":"<p>\n<font color=firebrick>\n<b>Write a program that will ask the user for a string of text, and parse it into components separated by \";\" semicolons.\nThen parse each component into parts again using \" \" blank as separator.\n</b></font>\n</p> \n<p>\nWhile this is still very simple compared to \"real\" parsing, it is more similar than the first program to how we break a program into text components.\nHere we will first breaking the entire string into \"statements\" where each ends in a semicolon.\nThen for each statement, we will break it into text pieces using blank as a separator.\nWe do this statement by statement (rather than breaking the single entire program string on blanks) because in something like a program,\neach statement has a different meaning (while loop, assignment, variable declaration) and has to be handled \ndifferently for execution.\n</p>\n<p>\n<b>Output:</b>\nThe first parse will produce an array of \"statement\" strings, the ones ending in \";\".\nFor each one, when it has been parsed into blank-separated components, print the number of components,\nthe first component, and the last component (if there is more than one)\nusing 3 separate alerts.\n</p>\n<p>\n<b>Sample executions:</b>\n<pre>\nInput string?  this is statement one;now we have the second\n4\nthis\none\n5\nnow\nsecond\n</pre>\n<pre>\nInput string? there is only one statement in this\n7\nthere\nthis\n</pre>\n<pre>\nInput string? var x = 5;var y = 12 + x;break\n4\nvar\n5\n6\nvar\nx\n1\nbreak\n</pre>\n<pre>\nInput string? alert(12+5)\n1\nalert(12+5)\n</pre>\n</p>","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs = [ [\"this is the first statement;this is the second\"],\n                    [\"a b c d e\"]        \n                  ];\nvar soln_outputs = [ [ 5,\"this\",\"statement\", 4,\"this\",\"second\" ],\n                     [5,\"a\",\"e\"]\n                   ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    //if (style.nWLAP > 2) { fail.s(\"You can do this with only 2 while loops\"); }\n    //if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n    //if (style.nAFD < 3) { fail.s(\"need at least 3 specific functions in this program\"); }\n    //if (style.nDO < 1) { fail.s(\"need to declare and use 2 objects\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                 ","createdAt":{"$date":"2017-11-05T14:41:54.42Z"},"updatedAt":{"$date":"2018-03-27T22:55:17.096Z"}},{"_id":{"$oid":"5a0104cf433aec110b9e8a70"},"num":3,"type":"twit","phase":1,"name":"Object parser: spam filter","folder":"599b1867f86460f32f01ffe6","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/parse.object.mp4","text":"<p>\n<font color=firebrick>\n<b>Write a program that will create an object that parses strings sent to it, and keeps track of how many of several specific \"tokens\" are found.\nDetails follow.\n</b></font>\n</p> \n<p>\nWe are going to now create an object that can parse for us.\nWe will send strings to it using a \"parse\" method in the object.  The parse method will identify\nseveral different components if they are present in the string, and will keep track of how many of these components are\nfound.  The object will also have several methods for reporting its findings when asked.\n</p>\n<p>\nLet's make our object look for occurrences of the string tokens \"login\", \"password\", and \"mortgage\".  It will be a very simple form of phishing\ndetector or spam detector.  We will send strings (like email text) to it, and it will look for various words in the text that tend to show up in\nspam or phishing emails.  The parsing method will break the string parameter into tokens by using blank \" \" as the separating character.\n</p>\n<p>\n<b>Object methods:</b>\nThe parser object will respond to these methods: parse ( string ), numLogin(), numPassword(), numMortgage(), reset().\nThe reset method will set all the counters to 0 so the object can begin new counts.  The other methods are fairly self explanatory.\n</p>\n<p>\n<b>myMain:</b>\nthe myMain function that drives this program will\nask the user for an input string repeatedly until the user types \"done\" as input.\nEach time the user gives input the string will be sent to the object for parsing using the \"parse\" method.\nWhen the user gives \"done\", the myMain function will do output and end.\n</p>\n<p>\n<b>Output:</b>\nUsing separate alerts, output the number of \"login\" tokens, the number of \"password\" tokens, and the number of \"mortgage\" tokens.\n</p>\n<p>\n<b>Sample executions:</b>\n<pre>\nInput string?  please login to your account\nInput string? You need a cheap mortgage now just login to get one\nInput string? Just login to the account with your password and verify your information\nInput string? Make plans now for your future\nInput string? done\n3\n1\n1\n</pre>\n<pre>\nInput string? done\n0\n0\n0\n</pre>\n<pre>\nInput string? Never has there been a better opportunity to profit\nInput string? done\n0\n0\n0\n</pre>\n<pre>\nInput string? password login mortgage password\nInput string? login login password hello never login new mortgage\nInput string? done\n4\n3\n2\n</pre>\n</p>","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs = [ [\"please login\",\"you need mortgage info\",\"type the password please\",\"done\"],\n                    [\"the login password is needed to get mortgage payments\",\"password yes password login danger\",\"done\"],\n                    [\"try different password combinations\",\"mortgage is easy\", \"done\"],\n                    [\"go tarheels beat dook\", \"done\"], [\"done\"]        \n                  ];\nvar soln_outputs = [ [1,1,1], [2,3,1], [0,1,1], [0,0,0], [0,0,0]\n                   ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    //if (style.nWLAP > 2) { fail.s(\"You can do this with only 2 while loops\"); }\n    //if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n    //if (style.nAFD < 3) { fail.s(\"need at least 3 specific functions in this program\"); }\n    //if (style.nDO < 1) { fail.s(\"need to declare and use 2 objects\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                 ","createdAt":{"$date":"2017-11-07T00:56:47.987Z"},"updatedAt":{"$date":"2018-03-27T22:55:38.353Z"}},{"_id":{"$oid":"5a01a8c4433aec110b9e8a73"},"num":4,"type":"diy","phase":1,"name":"<b>DIY:</b> Parse for pairs","folder":"599b1867f86460f32f01ffe6","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Write a program that will parse strings given as input by the user, looking for 3 different information patterns.  \nDetails follow.\n</b></font>\n</p> \n<p>\nThis program can be structured similarly to the VID brick \"Object parser: spam filter\", where you create an object to do the parsing. You can also do it with no objects\nif you would like to practice the parsing alone, like in \"Simple parsing\", but you will be creating parsing objects in the next DIY.   \nEither way, the differences between this program and the spam filter program will be in the string tokens and patterns being looked for after parsing.\nHere we will be looking not only for specific string tokens, but also a combination of two tokens consecutively.\n</p>\n<p>\nIn this program, when you parse a string look for (and count the number of occurrences of) 3 different tokens and token patterns.\nFirst, we want to know if the string contains the token \"while\".  Next we want to know if the string contains the token \"(true)\".\nFinally, we want to look for a pattern of consecutive tokens -- we want to know if \"(true)\" immediately follows \"while\".  We will call this a pair.\nFor example, this matches the pair pattern we are seeking:\n<pre>\n  while (true) { x = 5; } }\n</pre>\nIn this string, there is 1 \"while\", 1 \"(true)\", and 1 pair.\nHowever, the following string does not show the pair pattern we are matching:\n<pre>\n  Once in a while we use (true) as a boolean condition.\n</pre>\nIn this string we have 1 \"while\" and 1 \"(true)\", but 0 pairs.\nIt does not match the pair pattern because the token \"(true)\" does not immediately follow the \"while\".\nNote we are using blanks to define tokens so this is not a pair match either:\n<pre>\n  while(true) { inp = Number( prompt( 'input?' ) ); }\n</pre>\nIt doesn't  match because there is no blank after \"while\".  Parsing finds this as a single token: 'while(true)'.\nRemember, we said this form of parsing is very simple and only partly realistic. This is also not a match:\n<pre>\n  While (true) { x = Math.sqrt( y ); }\n</pre>\nbecause case matters... here the token \"While\" is not the same as token \"while\".  It does match 1 \"(true)\" however.\n</p>\n<p>\n<b>myMain:</b>\nThe myMain function driving this program will repeatedly ask the user to input a text string.  If the user gives the string \".\" (a single period) then input is done and the\nprogram should alert \"done\" and end.  If the user gives any other string, then your program will parse that\nstring (using \" \" as separator) and examine the array of tokens that parsing produces.  Count and print out 3 things for that string: \nhow many times does the string contain the \"while\" token,\nhow many times does it contain the \"(true)\" token, and finally... how many times does it contain the \"while\" token immediately followed by the \"(true)\" token.\nOutput will be done with 3 separate alerts, and will be produced for each input string. These <b>Sample executions</b> show the format:\n</p>\n<p>\n<b>Sample executions:</b>\n<pre>\nInput string?  we waited while you fixed your car.\n1 while\n0 (true)\n0 pairs\nInput string? while (true) { while (false) { x = 5; } }\n2 while\n1 (true) \n1 pairs\nInput string? .\ndone\n</pre>\n<pre>\nInput string? done\n0 while\n0 (true)\n0 pairs\nInput string? .\ndone\n</pre>\n<pre>\nInput string? (true) while (true) while (while (true) );\n2 while\n3 (true)\n1 pairs\nInput string? (true) while (true) while ( while (true) );\n3 while\n3 (true)\n2 pairs\nInput string? .\ndone\n</pre>\n</p>","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs = [ [\".\"],\n                    [\"done\",\".\"],\n                    [\"(true) while (true) while (while (true) );\", \"(true) while (true) while ( while (true) );\", \".\"], \n                    [\"we waited while you fixed your car.\", \"while (true) { while (false) { x = 5; } }\", \".\"],\n                    [\"((((true)))) (while) ((( (true) while )))\", \".\"]        \n                  ];\nvar soln_outputs = [ [\"done\"], \n                     [\"0 while\", \"0 (true)\", \"0 pairs\", \"done\"], \n                     [\"2 while\", \"3 (true)\", \"1 pairs\", \"3 while\", \"3 (true)\", \"2 pairs\", \"done\"], \n                     [\"1 while\", \"0 (true)\", \"0 pairs\", \"2 while\", \"1 (true)\", \"1 pairs\", \"done\"],\n                     [\"1 while\", \"1 (true)\", \"0 pairs\", \"done\"]\n                   ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLAP < 1) { fail.s(\"You should use a while loop for the re-ask validation strategy\"); }\n    //if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n    //if (style.nAFD < 2) { fail.s(\"need at least 2 specific functions in this program\"); }\n    //if (style.nDO < 1) { fail.s(\"need to declare and use an object\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                 ","createdAt":{"$date":"2017-11-07T12:36:20.265Z"},"updatedAt":{"$date":"2018-03-27T22:55:50.479Z"}},{"_id":{"$oid":"5a01be88433aec110b9e8a75"},"num":5,"type":"diy","phase":1,"name":"<b>DIY:</b> SpamPhish filters","folder":"599b1867f86460f32f01ffe6","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Write a program that will parse input strings and perform parsing for signs of phishing and for spam.\nThese two things are evidenced by different tokens and patterns of tokens, so we will use two objects: one to detect phishing, and the other\nto detect spam.  \nDetails follow.\n</b></font>\n</p> \n<p>\nWe will write at least 3 functions: myMain, makePhishFilter, and makeSpamFilter.  You may certainly write more if you wish.\nDetails of each function are below.\n</p>\n<p>\n<b>myMain:</b>\nThe myMain function driving this program will first create two objects: one a spam filter, and one a phishing filter.\nThese objects are created by calling the two object constructor function (defined below) and saving the objects they return.\nThen it will repeatedly ask the user to input a text string.  If the user gives the string \"end\"  then input is finished, so the\nprogram should alert \"done\" and end.  If the user gives any other string, then your program will parse that\nstring twice by sending it to the spam filter object, and also sending it to the phishing filter object.  We send a string to the filter objects by calling\nthe \"parse\" method in each and passing the string as a parameter.  First parse the string with the spam filter, and then after that parse it with the phishing filter.\nOrder will matter (for this program) since each filter will be doing some output (if it detects something to report).\n</p>\n<p>\n<b>makeSpamFilter:</b> This constructor will take no parameters, and will return an object that can detect spam (a simple filter).\nIt will have these methods:\n<ul>\n<li>\n<b>parse ( string )</b> : this method take one parameter (a string) and will return a boolean.  It will return true is it detects the spam patterns it looks for, and return false otherwise.\nIt will also increment a spam counter in the object if it detects the spam patterns.  It increments a total strings analyzed counter no matter what it finds.\n</li>\n<li>\n<b>reportTotal( )</b> : this method will return an integer that is how many messages the object has parsed (how many times the parse method was called).\n</li>\n<li>\n<b>reportHits( )</b> : this method returns an integer, which tells how many times the parse method was called AND returned a true (i.e. found spam in the message that\nwas parsed).\n</li>\n<li>\n<b>reportPercentage( )</b> : this method returns a number between 0 and 100 that tells the percentage of messages parsed that were phishing (it returns hits divided by total, \nthen multiplied by 100 to make is a percentage).  Note: watch for divide by zero... if the number of hits is 0, you will have to return 0 directly as the percentage rather\nthan trying to compute it with a zero divide.\n</li>\n</ul>\n</p>\n<p>\n<b>makePhishFilter:</b> This constructor will take no parameters, and will return an object that can detect phishing (a simple filter).\nIt will have these methods:\n<ul>\n<li>\n<b>parse ( string )</b> : this method take one parameter (a string) and will return a boolean.  It will return true is it detects the spam patterns it looks for, and return false otherwise.\nIt will also increment a spam counter in the object if it detects the spam patterns.  It increments a total strings analyzed counter no matter what it finds.\n</li>\n<li>\n<b>reportTotal( )</b> : this method will return an integer that is how many messages the object has parsed (how many times the parse method was called).\n</li>\n<li>\n<b>reportHits( )</b> : this method returns an integer, which tells how many times the parse method was called AND returned a true (i.e. found phishing patterns in the message that\nwas parsed).\n</li>\n<li>\n<b>reportPercentage( )</b> : this method returns a number between 0 and 100 that tells the percentage of messages parsed that were spam (it returns hits divided by total, \nthen multiplied by 100 to make is a percentage). Note: watch for divide by zero... if the number of hits is 0, you will have to return 0 directly as the percentage rather\nthan trying to compute it with a zero divide.\n</li>\n</ul>\n</p>\n<p>\nNote that the two objects are almost identical in structure... each has methods with the same name and type signatures.\nThe differences between the two objects are in the patterns that are being looked for during parsing.  This means the \"parse\" \nmethod will be different inside each object.\n</p>\n<p>\n<b>Output:</b>\nThere are three times in your code that output will (or might) be done.\nFirst, for each string input by the user, if it parses out with spam patterns (if the spam filter object returns \"true\" from the parse method) then\nalert \"spam\".  \nThen, if that same string parses out with phishing patterns (if the phishing filter object returns \"true\" from the parse method) then\nalert \"phish\" in a separate alert statement. \nThus each text string given by the user might cause one, two, or zero alert boxes.\nFinally, after the user give \"end\"  to signal no more input strings, there should be two more alerts done.  The first tells the percentage of input strings\nthat were spam.  The second tells the percentage of input strings that were phishing.  Remember that any one input string might trigger both filters, so \nthe percentages wont necessarily add up as you might think they should.\n</p>\n<p>\n<b>What is spam?</b>\nHere is how the spam filter will parse... the patterns to look for.\nFirst, break the text into tokens by splitting on \" \" blanks.  Then check to see if there are any of these strings in the\ntoken array: \"meds\",  \"mortgage\", \"loan\".\nThen check for some pairs (like we did in the previous DIY): declare the text to be spam if there is the token \"interest\" followed immediately by token \"rate\".\nAlso, declare it spam if the token \"credit\" is followed by token \"card\".\n</p>\n<p>\n<b>What is phishing?</b>\nHere is how the phish filter will parse... the patterns to look for.\nFirst break the text into chunks separated by \"#\" hashtags.\nThen within each chunk, further break it into tokens by \" \" blank as separator. Examine those tokens\nand declare the original text a phishing attempt if tokens any are these strings: \"login\", \"password\", \"verify\"\n</p>\n<p>\n<b>Sample executions:</b>\n<pre>\nInput string?  #welcome to our homepage#please login#you can get a lower interest rate just give your password\nspam\nphish\nInput string? go tarheels fight win beat dook\nInput string? Need a low cost mortgage then call us\nspam\nInput string? #email header cs.unc.edu #reply-to: postmaster@cs.unc.edu #no reply no forward\nInput string? end\n50% spam\n25% phish\n</pre>\n<pre>\nInput string? end\n0% spam\n0% phish\n</pre>\n<pre>\nInput string? header#login field followed#easy term credit card low interest rate for 6 months\nspam\nphish\nInput string? We can get you easy credit at reduced interest\nInput string? Please type password#we need to verify your account#meds\nphish\nInput string? #meds#mortgage#loan\nInput string? end\n25% spam\n50% phish\n</pre>\n</p>\n<p>\n<b>Notes:</b>\nThis program is a good challenge to write. We are going to be doing more like this in the last month.\nAs you work on this one do not worry about the length.  This one will seem long but remember that there are two object constructors,\nand one is nearly the same as the other.  One plan is to write one object constructor, get it working (test it locally!), and then\ncopy it to start the second constructor function.  Make the needed changes to the \"parse\" method in the second constructor.\n</p>","value":{"correct":"4","style":"1"},"onSubmit":"var soln_inputs = [ \n   [\"get cheap mortgage now\",\"end\"], [\"cheap money and interest rate\",\"end\"],\n   [\"cheap mortgage and#interest rate login\",\"end\"],\n   [\"cheap credit and#interest rate #password card\", \"meds and feds\", \"go heels win\", \"save#big money\", \"end\"],\n   [\"here login is#some good news#get password easy no fuss\",\"end\"],\n   [\"verify#password credit# interest rate#cheap credit card\",\"credit card\",\"please meds and#login#verify\",\"go#heels go\",\"end\"],\n   [\"end\"]       \n];\nvar soln_outputs = [ \n   [\"spam\", \"100% spam\",\"0% phish\"], [\"spam\", \"100% spam\",\"0% phish\"], \n   [\"spam\", \"phish\", \"100% spam\", \"100% phish\"],\n   [\"phish\", \"spam\", \"25% spam\", \"25% phish\"],  \n   [\"phish\", \"0% spam\", \"100% phish\"],\n   [\"spam\",\"phish\",\"spam\",\"spam\",\"phish\",\"75% spam\",\"50% phish\"],\n   [\"0% spam\",\"0% phish\"]\n];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    //if (style.nWLAP > 2) { fail.s(\"You can do this with only 2 while loops\"); }\n    //if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n    if (style.nAFD < 3) { fail.s(\"need at least 3 specific functions in this program\"); }\n    if (style.nDO < 1) { fail.s(\"need to declare and use 2 objects\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                 ","createdAt":{"$date":"2017-11-07T14:09:12.463Z"},"updatedAt":{"$date":"2018-03-27T22:56:01.195Z"}},{"_id":{"$oid":"5a04a5ef433aec110b9e8ad9"},"num":5,"type":"diy","phase":1,"name":"Rotating Caesar Cipher plus","folder":"5902b4167bb0b09c0d2a6422","language":"javascript","testMode":true,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Write a program that will parameterize the rotating Caesar cipher.  We will now allow the user to give a starting key, \nthe number of characters to encode before incrementing the key, and how much to increase the key each increment.\nDetails follow.\n</b></font>\n</p> \n<p>\nIn the previous rotating Caesar cipher, we incremented the starting key by one every time we had encoded 5 characters.\nIn this version, we will ask the user to specify how many characters should pass before altering the key, and how much we should\nincrement the key by each time we alter it.\nLet's call these quantities \"numChars\" and \"keyInc\".  Each time we have encoded \"numChars\" characters, we will increase the key value by \"keyInc\".\nWe still need to check that when we alter the key, we properly make sure it goes \"end around\" and stays withing the range 1 to length of the char set minus 1.\n</p>\n<p>\n<b>Input:</b> As before we will ask the user for the starting key, an integer between 1 and the length of the character set minus 1.\nWe will validate this input using the re-ask strategy... if the input is bad, we will alert \"try again\" and re-ask until the user gives a good integer value.\nNext, we will ask the user for a key increment amount (keyInc) and also validate that to make sure it is an integer in the same range as the starting key.\nThirdly, we will ask the user for the character block size (numChars) and we will validate it make sure it is an integer that is 1 or greater.\nFinally, we ask for a plain text string. We will not validate this string, but will rather assume the user properly gives only characters in the valid alphabet.  \nWe will upper case the string as well to make lower case input characters ok.\nFor all validations, if the input is unacceptable we will print \"try again\" and re-ask the user.\n<p>\nThe plain text message will be a string composed of upper case alphabetic characters, digits, the \" \" blank,  \nthe \".\" period character, and the \",\" comma.\nUse this ordering:\n<pre>\n0 1 2 3 4 5 6 7 8 9 . , ; : ? ! ' $ _ A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n</pre>\nbut of course, your code you will use a real \" \" blank and not the underscore.  Lower case alphabetic characters are ok as well,\nsince we will convert the plain text to upper case before encoding it.\n</p>\n<p>\nFor output, print a single string which is ciphertext (the plaintext, encoded).  Use one alert statement.\n</p>\n<p>\n<b>Notes:</b>\nYour code will be very similar to the previous versions.  For the rotating cipher the main changes will be in determining when the\nkey should change, and making the proper change. Remember... the key cant get larger than the length of the character set, so\nas the key is incremented there must be some modular arithmetic done to keep it in range.\n</p>\n<p>\nOne thing to watch for when rotating the key.  When the key get to the end of the alphabet... like 25 (for a 26 character set), we are using modular arithmetic to make sure\nwe stay in range.  So (for this example) when the key is incremented (to 26) and we mod it by 26, then we get a new key of 0.\nWe have said we wont do any 0 shifts (since the unaltered text is readable... even if only a short piece).  So we have to further check and when the new\nkey is 0, we have to bump it up to 1 before we keep encoding.\n</p>","value":{"correct":"9","style":"3"},"onSubmit":"var soln_inputs = [ [1,1,5,\"A\"], [10,1,5,\"A\"], [20,1,5,\"A\"], [30,1,5,\"A\"], \n   [1,1,1,\"AAAAA\"], [1,2,1,\"AAAAA\"], [1,1,2,\"AAAAAA\"],\n   [19,1,5,\"Go Tarheels, win that game!\"],\n   [13,1,5,\"Now is the time for all good programmers\"],\n   [0,-5,73,\"help\",29,1,5,\"JavaScript: for $10.75, you get mental exercise and FUN!\"],\n   [7,\"hello\",0,3,-5,11,\"For only $19.95, you can have a brand new (YES!!) one of these: Fluffy Pillow\"],\n   [3,11,7,\"Is there any better way to spend a day than fishing? No; or boating, in general.\"],\n   [5,2,6,\"!!WOW!! it's hard to believe, isn't it?\"],\n   [1,1,1,\"Now this is a 64 thousand dollar question, for sure\"],\n];\nvar soln_outputs = [ [\"B\"], [\"K\"], [\"U\"], [\"4\"], \n   [\"BCDEF\"], [\"BDFHJ\"], [\"BBCCDD\"],\n   [\"Z7S;T,1YY5:NU$39V!3W'W3X92U\"] ,\n   [\"019MV6N7VSO8X1TPV47PR22QX66VR7.7Z.T66Y,;\"],\n   [\"try again\",\"try again\",\"try again\",\"try again\", \";3F3C6C;AEZ4.AD54ONXVTZ6MDJ7?;J8C:DK.C9?P!J:AL',;G'; OH.\"],\n   [\"try again\",\"try again\",\"try again\",\"MVYGVUS5GF8ABA!CJ8Y4JMN0MUN8RMNMO7Q3TP3U;P?X,PPS76XS71V!30?0QV17A44EY?7..:C\"],\n   [\"LVCWKHUSNO1;NP3  3'YC.P9KF9JRGPFBCBQN,M6UN,X36'56D!48DE2APSACPB5UZSELU.W31.1?8AZ\"],\n   [\"BB1T1BDGP0EZIQJ0MI4ZKMPWVR8RFMX72M8OZ.M\"],\n   [\"OQZDYNP0IS3LNNCBQ,08!?X,2Z4'?!5E6FK?KMCJJ8'EPTCWZXL\"]\n];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF > 5) { fail.s(\"You can get this done with fewer while loops\"); }\n    if (style.nFLAP > 4) { fail.s(\"You can get this done with fewer for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ","createdAt":{"$date":"2017-11-09T19:01:03.06Z"},"updatedAt":{"$date":"2018-01-05T18:59:04.547Z"}},{"_id":{"$oid":"5a04d5aa433aec110b9e8ae0"},"num":6,"type":"diy","phase":1,"name":"RCCP Encoder Object","folder":"5902b4167bb0b09c0d2a6422","language":"javascript","testMode":true,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Write a program that will take the parameterized rotating Caesar cipher, and encapsulate it in an encoder object.\nUse this encoder object to repeatedly encode messages.\nDetails follow. (This is NOT completely described).\n</b></font>\n</p> \n<p>\nIn the previous rotating Caesar cipher, we incremented the starting key by one every time we had encoded 5 characters.\nIn this version, we will ask the user to specify how many characters should pass before altering the key, and how much we should\nincrement the key by each time we alter it.\nLet's call these quantities \"numChars\" and \"keyInc\".  Each time we have encoded \"numChars\" characters, we will increase the key value by \"keyInc\".\nWe still need to check that when we alter the key, we properly make sure it goes \"end around\" and stays withing the range 1 to length of the char set minus 1.\n</p>\n<p>\n<b>Input:</b> As before we will ask the user for the starting key, an integer between 1 and the length of the character set minus 1.\nWe will validate this input using the re-ask strategy... if the input is bad, we will alert \"try again\" and re-ask until the user gives a good integer value.\nNext, we will ask the user for a key increment amount (keyInc) and also validate that to make sure it is an integer in the same range as the starting key.\nThirdly, we will ask the user for the character block size (numChars) and we will validate it make sure it is an integer that is 1 or greater.\nFinally, we ask for a plain text string. We will not validate this string, but will rather assume the user properly gives only characters in the valid alphabet.  \nWe will upper case the string as well to make lower case input characters ok.\nFor all validations, if the input is unacceptable we will print \"try again\" and re-ask the user.\n<p>\nThe plain text message will be a string composed of upper case alphabetic characters, digits, the \" \" blank,  \nthe \".\" period character, and the \",\" comma.\nUse this ordering:\n<pre>\n0 1 2 3 4 5 6 7 8 9 . , ; : ? ! ' $ _ A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n</pre>\nbut of course, your code you will use a real \" \" blank and not the underscore.  Lower case alphabetic characters are ok as well,\nsince we will convert the plain text to upper case before encoding it.\n</p>\n<p>\nFor output, print a single string which is ciphertext (the plaintext, encoded).  Use one alert statement.\n</p>\n<p>\n<b>Notes:</b>\nYour code will be very similar to the previous versions.  For the rotating cipher the main changes will be in determining when the\nkey should change, and making the proper change. Remember... the key cant get larger than the length of the character set, so\nas the key is incremented there must be some modular arithmetic done to keep it in range.\n</p>\n<p>\nOne thing to watch for when rotating the key.  When the key get to the end of the alphabet... like 25 (for a 26 character set), we are using modular arithmetic to make sure\nwe stay in range.  So (for this example) when the key is incremented (to 26) and we mod it by 26, then we get a new key of 0.\nWe have said we wont do any 0 shifts (since the unaltered text is readable... even if only a short piece).  So we have to further check and when the new\nkey is 0, we have to bump it up to 1 before we keep encoding.\n</p>","value":{"correct":"9","style":"3"},"onSubmit":"var soln_inputs = [ [1,1,5,\"A\"], [10,1,5,\"A\"], [20,1,5,\"A\"], [30,1,5,\"A\"], \n   [1,1,1,\"AAAAA\"], [1,2,1,\"AAAAA\"], [1,1,2,\"AAAAAA\"],\n   [19,1,5,\"Go Tarheels, win that game!\"],\n   [13,1,5,\"Now is the time for all good programmers\"],\n   [0,-5,73,\"help\",29,1,5,\"JavaScript: for $10.75, you get mental exercise and FUN!\"],\n   [7,\"hello\",0,3,-5,11,\"For only $19.95, you can have a brand new (YES!!) one of these: Fluffy Pillow\"],\n   [3,11,7,\"Is there any better way to spend a day than fishing? No; or boating, in general.\"],\n   [5,2,6,\"!!WOW!! it's hard to believe, isn't it?\"],\n   [1,1,1,\"Now this is a 64 thousand dollar question, for sure\"],\n];\nvar soln_outputs = [ [\"B\"], [\"K\"], [\"U\"], [\"4\"], \n   [\"BCDEF\"], [\"BDFHJ\"], [\"BBCCDD\"],\n   [\"Z7S;T,1YY5:NU$39V!3W'W3X92U\"] ,\n   [\"019MV6N7VSO8X1TPV47PR22QX66VR7.7Z.T66Y,;\"],\n   [\"try again\",\"try again\",\"try again\",\"try again\", \";3F3C6C;AEZ4.AD54ONXVTZ6MDJ7?;J8C:DK.C9?P!J:AL',;G'; OH.\"],\n   [\"try again\",\"try again\",\"try again\",\"MVYGVUS5GF8ABA!CJ8Y4JMN0MUN8RMNMO7Q3TP3U;P?X,PPS76XS71V!30?0QV17A44EY?7..:C\"],\n   [\"LVCWKHUSNO1;NP3  3'YC.P9KF9JRGPFBCBQN,M6UN,X36'56D!48DE2APSACPB5UZSELU.W31.1?8AZ\"],\n   [\"BB1T1BDGP0EZIQJ0MI4ZKMPWVR8RFMX72M8OZ.M\"],\n   [\"OQZDYNP0IS3LNNCBQ,08!?X,2Z4'?!5E6FK?KMCJJ8'EPTCWZXL\"]\n];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF > 5) { fail.s(\"You can get this done with fewer while loops\"); }\n    if (style.nFLAP > 4) { fail.s(\"You can get this done with fewer for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ","createdAt":{"$date":"2017-11-09T22:24:42.001Z"},"updatedAt":{"$date":"2018-01-05T18:59:04.55Z"}},{"_id":{"$oid":"5a0b521a433aec110b9e8b91"},"num":30,"type":"twit","phase":1,"name":"{ PARSING INPUT STRINGS COPY }","folder":"5902b4167bb0b09c0d2a6422","language":"javascript","testMode":true,"maxSubmissions":"","vidURL":"","text":"In this program we will take a (long) input string and break it apart into several substrings.\nWe call this parsing.  \n<br/><br/>\nWrite a program that will ask the user for an input string (format shown below).\nThen parse the string into substrings using the character \" \" (blank) as the separator.\nPut each substring into a slot in an array.\nPrint out the first substring and the last\n<br/><br/>\nTo parse a string into substrings we will use the \"split\" methods (function) that is supplied with JavaScript strings.\nThe split function is passed as a parameter the character to use as separator.\nIt returns an array of strings.  The separator character is not put into any substring; it is effectively taken out and \nthe characters after the separator (up to the next separator or end) comprise the substring.\n<br/><br/>\nThe input from the user will be a standard English sentence, with words separated by blanks.  For example:\n<pre>\nTime flies like an arrow\n</pre>\nWhen this is parsed using the \" \" as separator, you get this array of substrings:\n<pre>\narr[0]: Time\narr[1]: flies\narr[2]: like\narr[3]: an\narr[4]: arrow\n</pre>\nYour program would then print \"TIme\" and \"arrow\" as the first and last substrings","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs = [  [\"Time flies like an arrow\"], \n                     [\"Over the river and through the woods\"]\n                  ];\nvar soln_outputs = [ [\"Time flies like an arrow\", \"Time\",\"arrow\"],\n                     [\"Over the river and through the woods\", \"Over\", \"woods\"]\n                   ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 0) { fail.s(\"use no for loops\"); }\n    if (style.nAFD != 1) { fail.s(\"need only 1 function declared\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}  \n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                       ","createdAt":{"$date":"2017-11-14T20:29:14.915Z"},"updatedAt":{"$date":"2018-01-05T18:59:04.587Z"}},{"_id":{"$oid":"5a0b6c8c433aec110b9e8ba9"},"num":31,"type":"twit","phase":1,"name":"{ PARSING INPUT STRINGS 2 COPY }","folder":"5902b4167bb0b09c0d2a6422","language":"javascript","testMode":true,"maxSubmissions":"","vidURL":"","text":"Let's take one step beyond the last parsing program.\nIn this one, we first parse the user's input string as we did (using \" \" as the separator).\nThis gives us an array of substrings.\n<br/><br/>\nNow we will parse each substring, further dividing the input into parts.\nUse the \"-\" hyphen character as separator this time.\nThis will give you an array of the strings between the hyphen.\n<br/><br/>\nFor each of the top level parsed strings (the ones separated by blanks)\nprint the first and last hyphen-separated substrings.\n<br/><br/>\nExample of the input:\n<pre>\nyesterday-is-history tomorrow-is-a-mystery today-is-a-gift\n</pre>\nThis will give this array:\n<pre>\narr[0]: yesterday-is-history\narr[1]: tomorrow-is-a-mystery\narr[2]: today-is-a-gift\n</pre>\nWhen we parse the first line we get this array:\n<pre>\nbrr[0]: yesterday\nbrr[1]: is\nbrr[2]: history\n</pre>\nWe print \"yesterday\" and \"history\" as the first and last, and go on to parse arr[1], etc.","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs = [[\"Time-flies-like-an-arrow go-heels-beat-Duke we-love-that-JavaScript\"],\n                   [\"yesterday-is-history tomorrow-is-a-mystery today-is-a-gift\"]\n                  ];\nvar soln_outputs = [ [\"Time-flies-like-an-arrow go-heels-beat-Duke we-love-that-JavaScript\", \"Time\",\"arrow\",\"go\",\"Duke\",\"we\",\"JavaScript\"],\n                     [\"yesterday-is-history tomorrow-is-a-mystery today-is-a-gift\", \"yesterday\",\"history\",\"tomorrow\",\"mystery\",\"today\",\"gift\"]\n                   ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL != 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 1) { fail.s(\"use 1 for loop\"); }\n    if (style.nAFD != 1) { fail.s(\"need only 1 function declared\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}  \n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                       ","createdAt":{"$date":"2017-11-14T22:22:04.914Z"},"updatedAt":{"$date":"2018-01-05T18:59:04.589Z"}},{"_id":{"$oid":"5a0b6d25433aec110b9e8bac"},"num":32,"type":"wall","phase":1,"name":"{ <B>W.CLASS (30 PTS):</B> PUTTING IT ALL TOGETHER COPY }","folder":"5902b4167bb0b09c0d2a6422","language":"javascript","testMode":true,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>You will write a program that will compute some statistics for a sports team.  Details follow.\n</b></font>\n</p> \n<p>\nWe will be using objects to represent the athletes on a team, and store the \nathlete objects in an array to represent the entire team.\nWe will also be using more complicated input than we have before.  The input will be a long\nencoded text string, and your program will \"parse\" the string --  it will \nbreak the string into smaller data components for use.\n<br/><br/>\nSee this\n<a href=\"http://www.cs.unc.edu/~stotts/COMP110-f15/assn/w.sports.html\" target=\"_blank\" >\ndetailed description.\n</a>","value":{"correct":"25","style":"5"},"onSubmit":"var soln_inputs = [[\"8!1#John Smith#8#43#21#17#8!2#Adam Jones#6#20#9#13#4!3#Bill Miller#7#57#39#28#21!4#Tom Webber#5#12#5#7#6!5#Sam Andrews#8#31#27#74#69\", 4, \"done\"],\n[\"6!10#Jenny Jones#5#23#17#14#9!22#Sue Andrews#6#43#19#24#16!34#Amy Smith#4#11#9#14#8!15#Terri Williams#3#37#29#19#15!5#April Collins#1#5#3#2#2!44#Sondra Taylor#5#71#44#25#18!30#Bernice Miller#6#54#37#43#28\", 17, 22, \"done\"],\n[\"12!3#Batman#11#101#65#78#54!13#Robin#9#65#34#58#41!33#Batgirl#6#23#17#11#7!10#Wolverine#8#67#24#19#17!38#Storm#12#132#81#66#41!22#Hulk#5#0#0#1#1!43#Spiderman#12#143#67#63#48!23#Wonderwoman#10#89#54#61#47!53#Superman#7#45#17#18#11\", 43, 22, 23, \"done\"]\n                  ];\nvar soln_outputs = [ [\"team ppg: 38.75\", \"high total: Sam Andrews, 123\", \"high ppg: Sam Andrews, 15.37\", \"(4) Tom Webber: 7 fta, 6 ftm, 85.71%\"],\n[\"team ppg: 68.66\", \"high total: Sondra Taylor, 106\", \"high ppg: Terri Williams, 24.33\", \"none\", \"(22) Sue Andrews: 24 fta, 16 ftm, 66.66%\"],\n[\"team ppg: 82.08\", \"high total: Storm, 203\", \"high ppg: Storm, 16.91\", \"(43) Spiderman: 63 fta, 48 ftm, 76.19%\", \"(22) Hulk: 1 fta, 1 ftm, 100%\", \"(23) Wonderwoman: 61 fta, 47 ftm, 77.04%\"]   \n                   ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\", (2/5)); }\n    if (style.nAFL > 5 ) { fail.s(\"We need 4 or fewer for loops\", (1/10) ); }\n    if (style.nAWL > 1) { fail.s(\"Use only one while loop\", (1/10) ); }\n    if (style.nTFD < 3) { fail.s(\"We need at least 3 functions declared and used\", (2/5) ); }\n  }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}  \n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                  ","createdAt":{"$date":"2017-11-14T22:24:37.509Z"},"updatedAt":{"$date":"2018-01-05T18:59:04.59Z"}},{"_id":{"$oid":"5a0cbd63433aec110b9e8bd7"},"num":0,"type":"diy","phase":1,"name":"<b>DIY:</b> DNA Sequence Analysis","folder":"5a0cbd22433aec110b9e8bd6","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Write a program that searches for occurrences of base pairs in a DNA sequence.  First ask the user to input a DNA sequence (as a string).  \nThen loop, asking the user for a base pair (as a string of 2 characters) and print the number of times that base pair occurs in the DNA sequence (using the output format below).\nDetails follow.\n</b></font>\n</p> \n<p>\nA DNA sequence representation is a string composed entirely of the capital letter \"A\", \"C\", \"T\", and \"G\".  For example, each of the following lines represents a DNA sequence:\n<pre>\nACATGAGACAGACAGACCCCCAGAGACAGACCCCTAGACACAGAGAGAG\nTATGCAGGACAGGGTTTTTGCCCAGGGTGGCAGTATG\nAGGATTGAGGTATGGGTATGTTCCCGATTGAGTAGCCAGTATGAGCCAG\nAGTTTTTTACAAGTATTTTTCCCAGTAGCCAGAGAGAGAGTCACCCAGT\n</pre>\nThe following are sample executions:\n<pre>\nWhat DNA sequence? ACATCCTGAGACAGACAGACCCCCAGA\nWhat base pair?  CA\nThe base pair 'CA' occurs 4 times in the DNA sequence 'ACATCCTGAGACAGACAGACCCCCAGA'\nWhat base pair? TG\nBase pair 'TG' occurs 1 times in DNA sequence 'ACATCCTGAGACAGACAGACCCCCAGA'\nWhat base pair? CC\nBase pair 'CC' occurs 5 times in DNA sequence 'ACATCCTGAGACAGACAGACCCCCAGA'\nWhat base pair? done\n</pre>\n</p>\nNote how we are counting occurrences.  In this string\n<pre>\nCCCC\n</pre>\nwe are saying that \"CC\" occurs 3 times (not 2).  We do not count the first two characters as a match, and then move on to the 3rd character.  Rather we start with the first \"C and notice that there is a \"C\" following it, for the first match.  We move on to the 2nd character, which is a \"C\" and we note a \"C\" following it (for the 2nd match).  We move on to the 3rd character, which is a \"C\", and we note a \"C\" following it (for the 3rd match).  I am not sure if this is how biologists count these things, but that is how we will do it here for this program.  We call it a \"sliding window\"\nthat is sliding one character at a time.  For fun, you can try\nwriting your own program where the string \"CCCC\" would produce 2 matches... a sliding window that slides to the end of any match it finds to keep going.\n<p>\n</p>\n<p>\n<B>String functions:</b>\nThere are a couple string functions you may find useful.\nFirst, the function \" <b>split </b>\" will take a string and produce (return) an array of individual characters, one character from the string stored in each slot location in the array.\nA string value in JavaScript is an object, and \"split\" is a method that can be called on the object.  For example consider this code:\n<pre>\nvar str = \"go heels!\";\nchars = str.split(\"\");\nalert(chars[0]);  // will print \"g\"\nalert(chars[1]);  // will print \"o\"\nalert(chars[2]);  // will print \" \"  a blank character\nalert(chars[3]);  // will print \"h\"\nalert(chars[str.length - 1]);   // will print \"!\"\n</pre>\nHere, using the parameter \"\" in the call to the split method causes the string to be burst apart into individual characters.  The split method can be used to split strings into\nother chunks based on other characters; google it up for more information.\n</p>\n<p>\nAnother possibly useful string method is \"<b> charAt </b>\".  This string method will produce (return) a single character, the one found at a specific position in the \nstring. Character positions in a string start at 0 and go up to one less than the length of the string.  For example consider this code:\n<pre>\n var bp = \"AG\" ;\n var first = bp.charAt(0);\n var second = bp.charAt(1);\n var last = bp.charAt(bp.length - 1);\n alert(first);    // prints \"A\"\n alert(second);  // prints \"G\"\n alert(last);    // prints \"G\"\n</pre>\n</p>\n<b>Other challenges:</b> As further practice, you can alter how searching is done and try coding different versions of this program (for practice, not for score).\nFor example, only count a base pair if it occurs within 10 (or 20, or some limit) characters of some other base pair.  Or dont count a base pair if it immediately follows an \noccurrence of itself.  Or count base pair pairs... if the base pair is AT for example, then look for ATAT and count that.  Make up your own search pattern and code it up.\n</p>","value":{"correct":"0","style":"0"},"onSubmit":"var soln_inputs = [ [\"ACTGACATGTAG\",\"AT\",\"AC\",\"done\"] ];\nvar soln_outputs = [ [\"Base pair 'AT' occurs 1 times in DNA sequence 'ACTGACATGTAG'\", \n                      \"Base pair 'AC' occurs 2 times in DNA sequence 'ACTGACATGTAG'\"] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF > 3) { fail.s(\"You can get this done with fewer while loops\"); }\n    if (style.nFLAP > 3) { fail.s(\"You can get this done with fewer for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ","createdAt":{"$date":"2017-11-15T22:19:15.011Z"},"updatedAt":{"$date":"2018-04-03T01:34:31.73Z"}},{"_id":{"$oid":"5a0cbd99433aec110b9e8bd8"},"num":1,"type":"diy","phase":1,"name":"<b>DIY:</b> Simple Caesar Cipher","folder":"5a0cbd22433aec110b9e8bd6","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Write a program that will compute a simple form of the well-know Caesar cipher, using details given following.\nDetails follow.\n</b></font>\n</p> \n<p>\nLet's delve a little into the world of cryptography.  Cryptography is the study of how we can make messages (text) unreadable without special knowledge (which we presume\nthe recipient of the message has, and others dont have).  A \"cipher\" is an algorithm for encoding (and decoding) a message.  We call the original message the \"plain text\" \nand we call the encoded message the \"cipher text\".  We call the secret knowledge needed to encode and decode messages the \"key\" (or keys).\nWe want a cipher to be efficient when encoding and decoding messages (if we have the key), and impossible (or computationally impractical) to \"break\". \nBreaking a cipher is figuring out how to read a message without having the key... or by guessing the key.\n</p>\n<p>\nA <b>Caesar cipher</b> is a simple substitution cipher that most of us probably learned to do as children.  \nIt was reputedly for used by Julius Caesar to secure his communications during his military and political activities.\nIn a substitution cipher, the cipher text is produced\nfrom the plain text by substituting each character with a new character.\nThe new character is obtained from the alphabet shifted some fixed number of places.  For simplicity, our examples will show \nonly upper case characters.  Consider a left-shift-5 cipher, where we have these alphabets:\n<pre>\n  plain:  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n cipher:  F G H I J K L M N O P Q R S T U V W X Y Z A B C D E\n</pre>\nThe shift amount is called the \"key\", which is 5 in this example.  I will call it a left-shift because we take the alphabet and shift it to the left, moving A,,B,C etc around to the Z end.  Thus the 6th letter in the unshifted alphabet (\"F\") becomes the first letter after we shift left 5 times.\nWith this done, we can encode messages by seeing what character corresponds to each character in the plain text (by position in the sequence).\nIf the plain text has an \"A\" character, we put a \"F\" character into the cipher text.  We see in the shifted alphabet table above \nthat \"F\" is below \"A\".  When we find a blank in the plain text, we put a blank into the cipher text.  Here is a full example:\n<pre>\nGO TAR HEELS   ---> LT YFW MJJQX\n</pre>\n</p>\n<p>\nNotice we encoded only the non-blank characters, leaving the blanks unchanged.  This gives a decoder some advantage, since the word boundaries are known in\nthe ciphertext.\nWe can make the cipher a touch harder to break by adding the \" \" blank into the character sequence, so that we cannot look at the cipher text and see word breaks and word lengths directly.  We will explore this idea in the next problem.\n</p>\n<p>\nSo let's first implement this simple Caesar cipher (with unchanged blanks).  \nFor input, first ask the user for a key.  This will be the shift amount (and implicitly, the direction). \nThe key should be an integer between 1 and 25.  We will disallow a 0 shift (for obvious reasons) and we also\ncannot have a shift larger than 25  (since shifting 26 is like shifting 0, shifting 27 is like shifting 1, etc.).  \nWe will consider all shifts to be left (as shown above); if we wanted to shift right, we can find a left shift key that would give the same encoding (for example, left-shift-5 is the same as right-shift-20).  Validate this input to make sure it is an integer in the allowed range; use the re-ask strategy... we will alert\n\"try again\" and re-ask until the user gives a good integer value.\n</p>\n<p>\nOnce we have a good key, we will ask the user for a text message to encode.  For simplicity we will limit ourselves to working with upper case\ncharacters A to Z, and the blank character \" \".  We will not have any digits or punctuation characters in the message.  \nUse this ordering for the alphabet characters:\n<pre>\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n</pre>\nWe will assume the user gives us text that has no digits or punctuation.  We can make things a bit easier on the user by converting the input string \nto all upper case in our code; this will allow the user to type with upper and lower case, but we can still work with only upper case.  \nTo convert a string to all upper case, use the \"toUpperCase()\" string methods, as follows:\n<pre>\n  var msg = \"Hello Tarheels lets beat Duke\";\n  msg = msg.toUpperCase();\n  // at this point the variable msg contains the string \"HELLO TARHEELS LETS BEAT DUKE\"\n</pre>\n</p>\n<p>\nApply the cipher (using the key) to the plain text to produce a cipher text.  For output, print the single string which is the cipher text.  Use one alert statement to do this.\n</p>\n<p>\n<b>Applying the cipher:</b>\n</p>\n<p>\n<b>Notes:</b>\nThere are several string methods you will find helpful. Particularly, we have methods that will take a string and create an array of individual characters.\nWe also have a method that will take an array of characters and produce a single string composed of those characters. \nWe studied the \"split\" method earlier. If you call the split method on a string and pass\nan empty character as parameter, the split will burst the string into an array of individual characters:\n<pre>\n  var msg = \"one two three\";\n  var arr = msg.split(\"\");\n  // now arr[0] is \"o\", arr[1] is \"n\", arr[2] is \"e\", arr[3] is \" \", etc.\n\n  msg = arr.join( \"\" );  // this puts the empty string \"\" between the elements in the arrary \"arr\" and makes a single string\n  // now msg is un-burst, and made back into a single string\n</pre>\nOur strategy will be to burst apart the plaintext string into an array (with \"split\" on string), change the individual characters in the resulting array, \nthen \"string-ify\" the changed array of characters back  into a single string (with \"join\" on the array) to get the final cipher text.\n</p>\n<p>\n<b>Breaking the Caesar Cipher:</b>\nHow could be break this simple cipher?  If we intercept an encoded message, we do not know just by looking at it that a Caesar cipher was used to encode it.\nIt will just look like gibberish.  If we *did* know it was a Caesar cipher, breaking it is simple... we just try each possible key 1 up to 25 and see which one\nproduces a readable plain text.  So we see here one weakness: there are so few possible keys that we can do an exhaustive trial of all of them.\nAlso, trying each key is computationally cheap.  So stronger ciphers must defend against exhaustive search attacks by have an impractically huge number of\npossible keys.\n</p>\n<p>\nGuessing that our intercepted message was encoded with a Caesar cipher is a different problem.\n</p>","value":{"correct":"0","style":"0"},"onSubmit":"var soln_inputs = [ [1,\"A\"], [10,\"A\"], [6,\"Go tarheels win that game\"],\n   [13,\"Now is the time for all good programmers\"],\n   [0,-5,28,21,\"JavaScript gives excellent mental exercise\"]\n];\nvar soln_outputs = [ [\"B\"], [\"K\"], [\"MU ZGXNKKRY COT ZNGZ MGSK\"] ,\n   [\"ABJ VF GUR GVZR SBE NYY TBBQ CEBTENZZREF\"],\n   [\"try again\",\"try again\",\"try again\", \"EVQVNXMDKO BDQZN ZSXZGGZIO HZIOVG ZSZMXDNZ\"]\n];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF > 3) { fail.s(\"You can get this done with fewer while loops\"); }\n    if (style.nFLAP > 3) { fail.s(\"You can get this done with fewer for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ","createdAt":{"$date":"2017-11-15T22:20:09.393Z"},"updatedAt":{"$date":"2018-04-03T01:36:25.443Z"}},{"_id":{"$oid":"5a0cbdc3433aec110b9e8bd9"},"num":2,"type":"diy","phase":1,"name":"<b>DIY:</b> Caesar Cipher plus","folder":"5a0cbd22433aec110b9e8bd6","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Write a program that will compute a slightly more complicated variant of the well-know Caesar cipher.\nDetails follow.\n</b></font>\n</p> \n<p>\nIn the previous Caesar cipher, we encoded alphabetic characters but left blanks unchanged.  We can make the cipher a touch harder to break by adding the \" \" blank into the character sequence, so that we cannot look at the cipher text and see word breaks and word lengths directly. For example, using the same left-shift-5 key, but adding the \" \" at the end we get this (I will use _ so the blank is visible in the alphabets):\n<pre>\n  plain:  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z _\n cypher:  F G H I J K L M N O P Q R S T U V W X Y Z _ A B C D E\n</pre>\nWith this altered cipher, we get this message encoding:\n<pre>\nGO TAR HEELS  --->  LTEYFWEMJJQX\nJUMP OVER THE VAN  --->  OZRUET JWEYMJE FS\n</pre>\nWe can similarly add other characters... punctuation, digits, etc.\n</p>\n<p>\nLet's implement this altered version. As before we will ask the user for the key, an integer between 1 and the length of the alphabet (minus 1).\nWe will validate this input using the re-ask strategy... we will alert \"try again\" and re-ask until the user gives a good integer value.\n\n</p>\n<p>\nOnce we have a good key, we will ask the user for a message to encode.  This will be a string composed of upper case alphabetic characters, digits, the \" \" blank,  the \".\" period character, and the \",\" comma.\nUse this ordering:\n<pre>\n0 1 2 3 4 , 5 6 7 8 9 . A B C D E F G H I J K L M N _ O P Q R S T U V W X Y Z\n</pre>\nbut of course, your code you will use a real \" \" blank and not the underscore.\n</p>\n<p>\nFor output, print a single string which is ciphertext (the plaintext, encoded).  Use one alert statement.\n</p>\n<p>\n<b>Notes:</b>\nThe code for this version of the cipher is really very similar to the first version.  We do not have to explicitly look for blanks (to prevent encoding) as before, \nbut there are few other changes.\n</p>","value":{"correct":"0","style":"0"},"onSubmit":"var soln_inputs = [ [1,\"A\"], [10,\"A\"], [20,\"A\"], [6,\"Go tarheels win that game\"],\n   [13,\"Now is the time for all good programmers\"],\n   [0,-5,58,21,\"JavaScript gives excellent mental exercise\"]\n];\nvar soln_outputs = [ [\"B\"], [\"K\"], [\"T\"], [\"MUTZGXNKKQYT2 STZNGZTMGRK\"] ,\n   [\"Z180U,05TQ05UYQ0R140NXX0S11P0241S4NYYQ4,\"],\n   [\"try again\",\"try again\",\"try again\", \"3UEUBWA29C702EYB7YGWY,,Y6C75Y6CU,7YGYAW2BY\"]\n];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF > 3) { fail.s(\"You can get this done with fewer while loops\"); }\n    if (style.nFLAP > 3) { fail.s(\"You can get this done with fewer for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ","createdAt":{"$date":"2017-11-15T22:20:51.031Z"},"updatedAt":{"$date":"2018-04-03T01:38:00.103Z"}},{"_id":{"$oid":"5a0cbde5433aec110b9e8bda"},"num":3,"type":"diy","phase":1,"name":"<b>DIY:</b> Rotating Caesar Cipher","folder":"5a0cbd22433aec110b9e8bd6","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Write a program that will compute a more complicated variant of the well-know Caesar cipher. In this one we will \n\"rotate\" -- or change -- the key periodically.\nDetails follow.\n</b></font>\n</p> \n<p>\nIn the previous Caesar cipher, we encoded alphabetic characters but also encoded blanks, as well as allowing some punctuation into the character list for the cipher.\nIn this modification we will add key changes into the mix, which makes this cipher more difficult to break.\nWe will have the same inputs as before (a key, and then a plain text to encode), but for this cipher the key is a starting key.\nThe key will change periodically as we go through the plain text character by character.  We will do what is called a \"key rotation\", meaning we will\nincrease the key value, and that increase will happen every so many characters.  For this variant, we will fix this period at 5 characters, and we will\nincrement the key value by one.  In a later version we can add more input parameters and allow the user to specify how much to increment the key,\nafter how many characters go by.\n</p>\n<p>\n<b>So let's implement this</b> rotating key cipher. As before we will ask the user for the key, an integer between 1 and the length of the character set minus 1.\nWe will validate this input using the re-ask strategy... if the input is bad, we will alert \"try again\" and re-ask until the user gives a good integer value.\n</p>\n<p>\nOnce we have a good key, we will ask the user for a message to encode.  This will be a string composed of upper case alphabetic characters, digits, the \" \" blank,  \nthe \".\" period character, and the \",\" comma.\nUse this ordering:\n<pre>\n0 1 2 3 4 5 6 7 8 9 . , ; : ? ! ' $ _ A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n</pre>\nbut of course, your code you will use a real \" \" blank and not the underscore.\n</p>\n<p>\nFor output, print a single string which is ciphertext (the plaintext, encoded).  Use one alert statement.\n</p>\n<p>\n<b>Notes:</b>\nYour code will be very similar to the previous versions.  For the rotating cipher the main changes will be in determining when the\nkey should change, and making the proper change. Remember... the key cant get larger than the length of the character set, so\nas the key is incremented there must be some modular arithmetic done to keep it in range.\n</p>\n<p>\nOne thing to watch for when rotating the key.  When the key get to the end of the alphabet... like 25 (for a 26 character set), we are using modular arithmetic to make sure\nwe stay in range.  So (for this example) when the key is incremented (to 26) and we mod it by 26, then we get a new key of 0.\nWe have said we wont do any 0 shifts (since the unaltered text is readable... even if only a short piece).  So we have to further check and when the new\nkey is 0, we have to bump it up to 1 before we keep encoding.\n</p>","value":{"correct":"0","style":"0"},"onSubmit":"var soln_inputs = [ [1,\"A\"], [10,\"A\"], [20,\"A\"], [30,\"A\"], [19,\"Go Tarheels, win that game!\"],\n   [13,\"Now is the time for all good programmers\"],\n   [0,-5,73,\"help\",29,\"JavaScript: for $10.75, you get mental exercise and FUN!\"]\n];\nvar soln_outputs = [ [\"B\"], [\"K\"], [\"U\"], [\"4\"], [\"Z7S;T,1YY5:NU$39V!3W'W3X92U\"] ,\n   [\"019MV6N7VSO8X1TPV47PR22QX66VR7.7Z.T66Y,;\"],\n   [\"try again\",\"try again\",\"try again\", \"try again\", \";3F3C6C;AEZ4.AD54ONXVTZ6MDJ7?;J8C:DK.C9?P!J:AL',;G'; OH.\"]\n];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF > 3) { fail.s(\"You can get this done with fewer while loops\"); }\n    if (style.nFLAP > 3) { fail.s(\"You can get this done with fewer for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ","createdAt":{"$date":"2017-11-15T22:21:25.428Z"},"updatedAt":{"$date":"2018-04-03T01:40:16.657Z"}},{"_id":{"$oid":"5a0cbe05433aec110b9e8bdb"},"num":4,"type":"diy","phase":1,"name":"<b>DIY:</b> Rotating Caesar Cipher plus","folder":"5a0cbd22433aec110b9e8bd6","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Write a program that will parameterize the rotating Caesar cipher.  We will now allow the user to give a starting key, \nthe number of characters to encode before incrementing the key, and how much to increase the key each increment.\nDetails follow.\n</b></font>\n</p> \n<p>\nIn the previous rotating Caesar cipher, we incremented the starting key by one every time we had encoded 5 characters.\nIn this version, we will ask the user to specify how many characters should pass before altering the key, and how much we should\nincrement the key by each time we alter it.\nLet's call these quantities \"numChars\" and \"keyInc\".  Each time we have encoded \"numChars\" characters, we will increase the key value by \"keyInc\".\nWe still need to check that when we alter the key, we properly make sure it goes \"end around\" and stays withing the range 1 to length of the char set minus 1.\n</p>\n<p>\n<b>Input:</b> As before we will ask the user for the starting key, an integer between 1 and the length of the character set minus 1.\nWe will validate this input using the re-ask strategy... if the input is bad, we will alert \"try again\" and re-ask until the user gives a good integer value.\nNext, we will ask the user for a key increment amount (keyInc) and also validate that to make sure it is an integer in the same range as the starting key.\nThirdly, we will ask the user for the character block size (numChars) and we will validate it make sure it is an integer that is 1 or greater.\nFinally, we ask for a plain text string. We will not validate this string, but will rather assume the user properly gives only characters in the valid alphabet.  \nWe will upper case the string as well to make lower case input characters ok.\nFor all validations, if the input is unacceptable we will print \"try again\" and re-ask the user.\n<p>\nThe plain text message will be a string composed of upper case alphabetic characters, digits, the \" \" blank,  \nthe \".\" period character, and the \",\" comma.\nUse this ordering:\n<pre>\n0 1 2 3 4 5 6 7 8 9 . , ; : ? ! ' $ _ A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n</pre>\nbut of course, your code you will use a real \" \" blank and not the underscore.  Lower case alphabetic characters are ok as well,\nsince we will convert the plain text to upper case before encoding it.\n</p>\n<p>\nFor output, print a single string which is ciphertext (the plaintext, encoded).  Use one alert statement.\n</p>\n<p>\n<b>Notes:</b>\nYour code will be very similar to the previous versions.  For the rotating cipher the main changes will be in determining when the\nkey should change, and making the proper change. Remember... the key cant get larger than the length of the character set, so\nas the key is incremented there must be some modular arithmetic done to keep it in range.\n</p>\n<p>\nOne thing to watch for when rotating the key.  When the key get to the end of the alphabet... like 25 (for a 26 character set), we are using modular arithmetic to make sure\nwe stay in range.  So (for this example) when the key is incremented (to 26) and we mod it by 26, then we get a new key of 0.\nWe have said we wont do any 0 shifts (since the unaltered text is readable... even if only a short piece).  So we have to further check and when the new\nkey is 0, we have to bump it up to 1 before we keep encoding.\n</p>","value":{"correct":"0","style":"0"},"onSubmit":"var soln_inputs = [ [1,1,5,\"A\"], [10,1,5,\"A\"], [20,1,5,\"A\"], [30,1,5,\"A\"], \n   [1,1,1,\"AAAAA\"], [1,2,1,\"AAAAA\"], [1,1,2,\"AAAAAA\"],\n   [19,1,5,\"Go Tarheels, win that game!\"],\n   [13,1,5,\"Now is the time for all good programmers\"],\n   [0,-5,73,\"help\",29,1,5,\"JavaScript: for $10.75, you get mental exercise and FUN!\"],\n   [7,\"hello\",0,3,-5,11,\"For only $19.95, you can have a brand new (YES!!) one of these: Fluffy Pillow\"],\n   [3,11,7,\"Is there any better way to spend a day than fishing? No; or boating, in general.\"],\n   [5,2,6,\"!!WOW!! it's hard to believe, isn't it?\"],\n   [1,1,1,\"Now this is a 64 thousand dollar question, for sure\"],\n];\nvar soln_outputs = [ [\"B\"], [\"K\"], [\"U\"], [\"4\"], \n   [\"BCDEF\"], [\"BDFHJ\"], [\"BBCCDD\"],\n   [\"Z7S;T,1YY5:NU$39V!3W'W3X92U\"] ,\n   [\"019MV6N7VSO8X1TPV47PR22QX66VR7.7Z.T66Y,;\"],\n   [\"try again\",\"try again\",\"try again\",\"try again\", \";3F3C6C;AEZ4.AD54ONXVTZ6MDJ7?;J8C:DK.C9?P!J:AL',;G'; OH.\"],\n   [\"try again\",\"try again\",\"try again\",\"MVYGVUS5GF8ABA!CJ8Y4JMN0MUN8RMNMO7Q3TP3U;P?X,PPS76XS71V!30?0QV17A44EY?7..:C\"],\n   [\"LVCWKHUSNO1;NP3  3'YC.P9KF9JRGPFBCBQN,M6UN,X36'56D!48DE2APSACPB5UZSELU.W31.1?8AZ\"],\n   [\"BB1T1BDGP0EZIQJ0MI4ZKMPWVR8RFMX72M8OZ.M\"],\n   [\"OQZDYNP0IS3LNNCBQ,08!?X,2Z4'?!5E6FK?KMCJJ8'EPTCWZXL\"]\n];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF > 5) { fail.s(\"You can get this done with fewer while loops\"); }\n    if (style.nFLAP > 4) { fail.s(\"You can get this done with fewer for loops\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ","createdAt":{"$date":"2017-11-15T22:21:57.659Z"},"updatedAt":{"$date":"2018-04-03T01:42:23.58Z"}},{"_id":{"$oid":"5a2c5f6b87a9e54509f776d1"},"num":0,"type":"exam","phase":1,"name":"<b>EXAM</b>: Basic Program","folder":"599a4ae4f86460f32f01ffe3","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Basic program (no arrays, no objects)\n</b></font>\n</p> \n\n<p>\nThis is the kind of program you could do at midterm, and you should be able to program it\nfairly rapidly by now.\n</p>\n<p>\nFull description is here: \n<a href=\"http://www.cs.unc.edu/~stotts/COMP110-f15/samples/finalProgBasic.html\" target=\"Blank\"> finalProgBasic.html </a>\n</p>","value":{"correct":"8","style":"2"},"onSubmit":"var soln_inputs = [ [22,55,-99,204,-12,-13,-1],\n                    [111,76,50,300,500,-513,-200,-1],\n                    [-4,-10,-11,-12,-13,-1],\n                    [1,7,13,-1],\n                    [64.3,3,5,-1],\n                    [1,3,\"goheels\"], [\"JS rules\"],\n                    [-1]\n                  ];\nvar soln_outputs = [ [3,148], [6,248], [0,-22], [0,0], [1,8], [\"error\"], [\"error\"],\n                     [0,0]\n                   ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLAP > 1) { fail.s(\"use no more than 1 while loops\"); }\n    if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n    if (style.nAFD < 2) { fail.s(\"need at least 2 functions declared\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                 ","createdAt":{"$date":"2017-12-09T22:10:51.939Z"},"updatedAt":{"$date":"2018-04-30T04:37:19.819Z"}},{"_id":{"$oid":"5a2c5f9587a9e54509f776d2"},"num":1,"type":"exam","phase":1,"name":"<b>EXAM</b>: Array Program","folder":"599a4ae4f86460f32f01ffe3","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Array program (no objects)\n</b></font>\n</p> \n\n<p>\nThis program demonstrates your knowledge of arrays. It uses material learned since midterm.\n</p>\n<p>\nFull description is here: \n<a href=\"http://www.cs.unc.edu/~stotts/COMP110-f15/samples/finalProgArray.html\" target=\"Blank\"> finalProgArray.html </a>\n</p>","value":{"correct":"8","style":"2"},"onSubmit":"var soln_inputs = [ [ 3,  1,3,5,   2,4,6 ], \n                    [ 5,  3,6,12,5,21,    17.6,11.3,101.1,34.4,20 ],\n                    [ 4,  1,2,3,4,   0,3,4,5  ],\n                    [ 3, 2,4,6, -2 ],\n                    [ 6, 2, 8, \"unc\"],\n                    [ 2, 1,3,  -5 ],\n                    [ 2, 1,3,  4,\"unc\"],\n                    [ -2 ], \n                    [ 0 ],\n                    [ 5.3 ], [\"goheels\"]\n                  ];\nvar soln_outputs = [ [ 1.414, 2, 2.449 ], \n                     [ 4.195, 3.361, 10.054, 5.865, 4.582 ],\n                     [ 1, 1.732, 2, 2.236 ],\n                     [\"error\"], [\"error\"],\n                     [\"error\"], [\"error\"], [\"error\"], [\"error\"], [\"error\"], [\"error\"]\n                   ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLAP > 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP > 4) { fail.s(\"use no more than 4 for loops\"); }\n    if (style.nAFD < 3) { fail.s(\"need at least 3 functions declared\"); }\n    if (style.nDA < 1) { fail.s(\"need to declare and use 3 arrays\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                 ","createdAt":{"$date":"2017-12-09T22:11:33.221Z"},"updatedAt":{"$date":"2018-04-30T04:37:30.2Z"}},{"_id":{"$oid":"5a2c5fb487a9e54509f776d3"},"num":2,"type":"exam","phase":1,"name":"<b>EXAM</b>: Object Program","folder":"599a4ae4f86460f32f01ffe3","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Object program\n</b></font>\n</p> \n\n<p>\nThis program shows knowledge of objects and methods in objects.  This is material learned since the midterm.\n</p>\n<p>\nFull description is here: \n<a href=\"http://www.cs.unc.edu/~stotts/COMP110-f15/samples/finalProgObject.html\" target=\"Blank\"> finalProgObject.html </a>\n</p>","value":{"correct":"8","style":"2"},"onSubmit":"var soln_inputs = [ [1,2,3,4,-1,-2,-3,-4,0], [1,3,8,0], [0], [-5,-3,-7,0], [1.1,-8.8,0],\n                    [\"hi\",\"lo\",0]\n                  ];\nvar soln_outputs = [ [2.5,-2.5], [4,0], [0,0], [0,-5], [1.1,-8.8],\n                     [\"error\",\"error\",0,0]\n                   ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLAP > 2) { fail.s(\"use only two while loops\"); }\n    if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n    if (style.nAFD < 3) { fail.s(\"need at least 3 specific functions in this program\"); }\n    if (style.nDO < 1) { fail.s(\"need to declare and use 2 objects\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                 ","createdAt":{"$date":"2017-12-09T22:12:04.589Z"},"updatedAt":{"$date":"2018-04-30T04:37:42.19Z"}},{"_id":{"$oid":"5a3aab38acfdba6414c866ff"},"num":0,"type":"wall","phase":1,"name":"<B>W1 </B> Stacking some basic bricks","folder":"5a3aa9cbacfdba6414c866fe","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Stacking some basic bricks</b>\n</font>\n</p> \n<p>\nLet's do a bit larger problem using what we have learned (up through simple functions).  \nGet 5 numbers from the user.  Compute and print (in this order) these things (each a separate alert statement):\n<ul>\n<li>the sum of the 5 numbers</li>\n<li>the average of the 5 numbers</li>\n<li>the largest of the 5 numbers</li>\n<li>the smallest of the 5 numbers</li>\n<li>the largest number divided by the smallest, truncated to 2 decimal places <b><i>(USE Math.floor. Do not use Math.trunc)</i></b></li>\n</ul>\nTo do this before we have learned conditional statements you will need the Math.max() function.\nIf you call Math.max(a,b) it will return the larger value.  Math.max() can take many arguments; for example, Math.max(a,b,c) will return the largest of the three values stored in variables a, b, and c.  Math.min() will accept many parameters as well, for when you find the smallest value.\n</p>\n<p>\n<b>Output format:</b> Let's say the user gives these numbers: 6, 3, 11, 17, 4. Then the output should look this way (Each line is an alert, and pay attention to blanks etc.):\n<pre>\nsum: 41\naverage: 8.2\nmax: 17\nmin: 3\nratio: 5.66\n</pre>\n<b>Remember</b> Remember to put this program into the myMain function format.\nRemember the other style items we have discussed.\nRemember that it is good style to put the semicolon (;) on the end of each statement.  Remember that if you don't convert the user input to number form \nthat strange things might happen. This problem is meant to be done with only the basics.  \nNo loops or conditionals, or language features we have not yet come to (if you are reading ahead in the text).  \n</p>","value":{"correct":"8","style":"2"},"onSubmit":"var soln_inputs = [ \n   [1, 2, 3, 4, 5], \n   [7, 10, 8, 101, 18], \n   [3, 4, 6, 11, 17] \n];\nvar soln_outputs = [ \n   [\"sum: 15\",  \"average: 3\",    \"max: 5\",   \"min: 1\", \"ratio: 5\" ], \n   [\"sum: 144\", \"average: 28.8\", \"max: 101\", \"min: 7\", \"ratio: 14.42\" ],\n   [\"sum: 41\",  \"average: 8.2\",  \"max: 17\",  \"min: 3\", \"ratio: 5.66\" ] \n];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); } \n  else {\n     for(var i=0; i<truVec.length; i++) { truVec[i] || fail.f(\"failed functional correctness\"); }\n  }\n  // check for all fn format\n  if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n  if (style.nAFL>0 || style.nAWL>0) { fail.s(\"use no loops in this problem\"); }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);","createdAt":{"$date":"2017-12-20T18:26:00.006Z"},"updatedAt":{"$date":"2018-01-24T15:50:33.563Z"}},{"_id":{"$oid":"5a3aabdaacfdba6414c86700"},"num":1,"type":"wall","phase":1,"name":"<B>W2</B> Looper: Stack, stack, stack basic bricks","folder":"5a3aa9cbacfdba6414c866fe","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Stack more basic Bricks</b>\n</font>\n</p> \n<p>\nLet's build this program using Wall 1 as a base.  We want to do the same statistics computations we did before, but now we want to do it \nmore than once.  The number of times we will repeat the Wall 1 stats solver will be told to us by the user (as the first input).\n</p>\n<p>\nSo, first ask the user to input a non-negative integer (zero or larger, and can assume the user gives us a good integer in the proper range... we will not worry about validating input in this program).  The user's number tells us how many times we need to repeat the stats solver.  This means 0 or more times\nwe will repeat this procedure (which you have Wall 1 code to do already):\n<pre>\n  -- ask for 5 numbers\n  -- compute sum, avg, min, max, ratio \n  -- print out the results\n</pre>\nAfter asking the user for that first number (the repeat count), you should identify each repetition by printing this before running the Wall 1 code:\n<pre>\nStats Solver execution 1 ====================\n</pre>\nThe 1 will be replaced each time it is run with the proper iteration count.  Since computers can be picky, there are no leading blanks before Stats, and the number of \"=\" characters is 20.  There is no blank after the last \"=\" character. \nWhen all requested repeats have been done, print a single line that looks like this:\n<pre>\ndone ====================\n</pre>\nIt also has 20 \"=\" characters, no leading blanks before \"done\", and no blanks after the last \"=\" character.\nNote that if the user gives a 0 as the repeat number, your program should print nothing but the done line, and simply end.\n</p>\n<p>\nHere is some sample execution data.  The prompt strings are in red, and it is not critical what your program prints as prompts; only the alert statements \nare important to get accurate, since alert is output.\n<pre>\n<font color=red>How many times to repeat? </font> 2\nStats Solver execution 1 ====================\n<font color=red>give a number </font> 10.10203\n<font color=red>give a number </font> 20\n<font color=red>give a number </font> 30\n<font color=red>give a number </font> 40\n<font color=red>give a number </font> 50\nsum: 150.10203\naverage: 30.020406\nmax: 50\nmin: 10.10203\nratio: 4.94\nStats Solver execution 2 ====================\n<font color=red>give a number </font> 3.21\n<font color=red>give a number </font> 2.1\n<font color=red>give a number </font> 1\n<font color=red>give a number </font> 5.4321\n<font color=red>give a number </font> 4.321\nsum: 16.0631\naverage: 3.21262\nmax: 5.4321\nmin: 1\nratio: 5.43\ndone ====================\n</pre>\n<pre>\n<font color=red>How many times to repeat? </font> 0\ndone ====================\n</pre>\n</p>\n<p>\n<b>Style:</b>\nUse for loops to do this.  Use no while loops (we havn't learned them yet).\nMake sure you use the proper myMain format, and make sure you pay close attention to the output format requested.\n</p>\n<p>\nYou also are required to write <b><i>2 (or more) top level functions</i></b>.  This means myMain and one other function.\nThis to to emphasize to you that writing and using functions is a good way to organize your code AND to make use of code you already have.\nIn this case, you have the solution to Wall 1 that does the stats solver.  You have to run that code several times (based on user input).\nThe way to organize this is to write your Wall 1 code as a function.\nThen in myMain for Wall 2, you put some user input (how many times to execute), and a for loop, and in the body of the loop\nto call the function that does the Wall 1 stats solver.  The various output decorations can also go in the looping code for myMain.\nThe code for the Wall 1 solver does not have to be changed... just wrapped in a function definition so it can be called.\n</p>","value":{"correct":"8","style":"2"},"onSubmit":"var soln_inputs = [ \n   [2,10.10203,20,30,40,50,3.21,2.1,1,5.4321,4.321],\n   [0],\n   [1,2.34,-34.456,45.6789,-5.0001,-77.7]\n];\nvar soln_outputs = [ \n   [\"Stats Solver execution 1 ====================\",\n    \"sum: 150.10203\", \"average: 30.020406\", \"max: 50\", \"min: 10.10203\", \"ratio: 4.94\",\n    \"Stats Solver execution 2 ====================\",\n    \"sum: 16.0631\", \"average: 3.21262\", \"max: 5.4321\", \"min: 1\", \"ratio: 5.43\",\n    \"done ====================\"],\n   [\"done ====================\"],\n   [\"Stats Solver execution 1 ====================\",\n    \"sum: -69.1372\", \"average: -13.827440000000001\", \"max: 45.6789\", \"min: -77.7\", \"ratio: -0.59\",\n    \"done ====================\"],\n\n];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF >0 ) { fail.s(\"use no while loops\"); }\n    if (style.nAFL > 1) { fail.s(\"you need only one for loop\"); }\n    if (style.nTFD < 2) { fail.s(\"should have at least 2 top level function declarations\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);","createdAt":{"$date":"2017-12-20T18:28:42.086Z"},"updatedAt":{"$date":"2018-02-05T20:47:14.53Z"}},{"_id":{"$oid":"5a3aac23acfdba6414c86701"},"num":2,"type":"wall","phase":1,"name":"<B>W3</B> Basic 7-operation calculator ","folder":"5a3aa9cbacfdba6414c866fe","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Basic 7-Operation Calculator</b>\n</font>\n</p> \n<p>\nWe will write a program that will perform repeated addition, subtraction, multiplication, division, square roots, squaring, and truncation at the direction of user input.\nHere is how it will work.\n</p>\n<p>\nThe calculator will have one variable that contains the current \"answer\".  When you first run your program this will start with 0 in it.\nPrint this answer and begin the main loop. The main loop will ask the user for an operation (and perhaps a number, depending on\nthe operation requested), and will perform that operation using the current answer (and the users number) and report the new answer.  \nSo the calculator will be keeping a running total, so to speak.\n</p>\n<p>\nIn the main loop, first ask the user for an operation to perform.  \nThe user will type \"a\", \"s\", \"m\", \"d\", \"rt\", \"tr\", \"sq\", or \"q\" to indicate add, subtract, multiply, divide, square root, truncate, square, or quit.\nIf the user gives a \"q\" end the loop, print \"done\", and end the program.  Otherwise perform the requested operation.\nFor some operations, this requires asking the user for a number  (for a, s, m, d ).\nDo whatever operation the user has requested  to the current  \"answer\" \nwith the number given by the user.  Print the current answer.  \nThen loop back and ask the user for another operation (and perhaps another number).\n</p>\n<p>\nFor \"rt\" square root, call Math.sqrt on the total (after checking to make sure the total is not negative... see errors below).\nFor \"tr\" truncate, use the function \"trunc\" that you wrote in module \"utility functions\".  \n</p>\n<p>\n<b>Input validation:</b> You must validate all inputs from the user.  For the operation if the user gives anything other than one of the 8 acceptable strings,\nprint \"bad op\" and end the program.  For a number, if the user gives something that is not a number print \"bad num\" and end\nexecution.  \n</p>\n<p>\nThen there are a couple of other errors that might happen.  These will not end the program, but instead will cause the calculator to\nsimply ignore the bad value and loop back to the \"get an operation\" part of the code.\nFirst, watch for zero-divide.  If the user asks for the divide operation, then make sure the number given is not a 0 (mathematically,\ndivide by 0 is not defined).  If the user gives a 0 after asking for divide, then print the message \"zero div\" and simply don't do the division into the answer \n(in other words, leave the answer unchanged).  Print the answer just like you would after the other operations, and keep on going.\n<b>Just to be clear:</b> Catching a divide-by-zero error does not end the program, it simply makes you tell the user, and skip doing the\noperation.\n</p>\n<p>\nNext, if the user asks for \"rt\" square root, you must check to make sure the current running total is non-negative.\nIf the current total is negative, print \"neg total\" and don't do anything to the answer. Like with zero divide, simply print the total (unchanged) and\nget the next operation.  As with zero divide, do not end the program.\n</p>\n<p>\nHere are some sample executions to see how the program should work:\n<pre>\n0\nwhat operation? a\nwhat number? 12\n12\nwhat operation? m\nwhat number? 2\n24\nwhat operation? s\nwhat number? 3.5\n20.5\nwhat operation? d\nwhat number? 4\n5.125\nwhat operation? d\nwhat number? 0\nzero div\n5.125\nwhat operation? a\nwhat number? 3.875\n9\nwhat operation? rt\n3\nwhat operation? s\nwhat number? 7\n-4\nwhat operation? rt\nneg total\n-4\nwhat operation? sq\n16\nwhat operation? rt\n4\nwhat operation? q\ndone\n</pre>\n<pre>\n0\nwhat operation? a\nwhat number? 34.5678\n34.5678\nwhat operation? d\nwhat number? 10\n3.4567799999999997\nwhat operation? tr\n3\nwhat operation? q\ndone\n</pre>\n</p>\n<p>\n<b>Style:</b>\nAs always make sure you use the myMain function format.\nThis program should be written with one loop, and make it is the right form of loop\n(for loop or while loop, you decide) for the situation (we have an indefinite situation... we are looping until the user says \"q\"\nand we don't know when that will be).\n</p>\n<p>\nRemember to convert input to number when needed. You may write functions other than myMain if you wish.\nIn fact, you will have at least 2 top level functions (myMain, and trunc).\n</p>\n<p>\n<b>Software engineering suggestions:</b>\n<br/>\n<b>1)</b> As we have noted before, do not write a ton of lines and then test... and hope for the best.\nWrite a few lines, and test... see if it is doing what you think it should.  Then add more lines.\nWrite your smaller functions first, and then test them separately.\nAlso you can try writing your main program without validation... just assume the user (you) will give proper input.  Then you can check the main\nlogic with good inputs.  Once that is working, you can then go back and add validation code and make the program more robust.\n<br/>\n<b>2)</b> Write the calculator part... the part the handles the operations... by putting in one or two operations and getting it to work.  Maybe get \"a\" and \"s\" \nto work, and test it well.  The go back and add in another operation... then another. \n<br/>\n<b>Think of yourself as building the program, not writing it</b>.  Build it one little piece at a time, and test as you go to make sure\nthe pieces you add work as you think they should.\n</p>","value":{"correct":"17","style":"3"},"onSubmit":"var soln_inputs = [ [\"a\",12,\"m\",2,\"s\",3.5,\"d\",4,\"q\"], [\"q\"], [\"a\",12,\"m\",\"hi\"], [\"hi\",5], \n                    [\"d\",1,\"d\",0,\"a\",1,\"m\",1,\"q\"], [\"a\",0,\"m\",0,\"s\",0,\"d\",0,\"q\"],\n                    [\"a\",144,\"rt\",\"a\",2.345,\"tr\",\"q\"]\n                  ];\nvar soln_outputs = [ [0,12,24,20.5,5.125,\"done\"], [0,\"done\"], [0,12,\"bad num\"], [0, \"bad op\"], \n                     [0,0,\"zero div\",0,1,1,\"done\"], [0,0,0,0,\"zero div\",0,\"done\"],\n                     [0,144,12,14.345,14,\"done\"]\n                   ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false; // tells if functional fail happens\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF >2) { fail.s(\"you dont need more than 2 while loops\"); }\n    if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nTFD < 2) { fail.s(\"should have at least 2 top level function declarations\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ","createdAt":{"$date":"2017-12-20T18:29:55.146Z"},"updatedAt":{"$date":"2018-03-10T02:37:30.906Z"}},{"_id":{"$oid":"5a3aac96acfdba6414c86702"},"num":3,"type":"wall","phase":1,"name":"<B>W4</B> Sieve of Eratosthenes","folder":"5a3aa9cbacfdba6414c866fe","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Write a program that will find all prime numbers between 1 and some upper limit N, using the famous Sieve of Eratosthenes.  Then use your solution to find\ntwin primes in that range. Details follow.\n</b></font>\n</p> \n<p>\nThis program is an implementation of a famous algorithm called the Sieve of Eratosthenes. \nIt is a method for generating all prime numbers from 1 (well, 2 is the first prime) up to some upper limit N.  \nThe algorithm was known to the ancient Greeks.  While it is not the most efficient way to generate primes, but it is not too bad.\n</p>\n<p>\nFull problem description is \n<a href=\"http://www.cs.unc.edu/~stotts/COMP110-f15/assn/w.sieve.html\"  target=\"_blank\"><b>found here</b></a>.\n</p>\n<p>\n<b>Computer Science note.</b>\nGenerating primes is one side of an important computer science area.  The other side is the problem\ncalled <i>primality testing</i>, or answering this question: <i>is this number prime?</i>\n</p>\n<p>\nPrimality testing is hard, and it gets harder very rapidly as the number we want to test gets larger.  \n</p>\n<p>\nThe difficulty of primality testing is what makes the area of cryptography useful.  We can make codes\nthat cannot easily be broken by computer.  This allows safe transmission of messages over the internet (for example) without\nthem being succeptible to interception and de-coding.  Messages like the password to your bank\naccount when you do online banking.\n</p>\n<p>\n<b>Can't we primality test with our Sieve?</b>\n</p>\n<p>\nTheoretically we can.  If we want to test a number like (say) 1,001,317,234,144,788,210,001 for primality we could simply \ngenerate the sieve to get ALL primes between 1 and 1,001,317,234,144,788,210,001, and of course then do a quick check to see if\n1,001,317,234,144,788,210,001 in in our sieve.  \n</p>\n<p>\nBut theory slams into practice, as it did with our number guessing game.  The amount of time and space (the array) it would take to compute \nthe sieve for such a large number  is hugely prohibitive... making it impossible in a practical sense.  The number shown above is about 10^20, or\nabout a billion trillions.  It would take an array that was the size of the total amount of main memory in hundreds of billions of laptops.  It would take an\narray that is the size of a 16 billion 1-terabyte disk drives (if numbers take 16 bytes to represent ).\n</p>","value":{"correct":"25","style":"5"},"onSubmit":"var soln_inputs = [ \n[15], \n[43], \n[500], \n[5000], \n[\"goheels\",75], \n[4.5,15], \n[-5,45], \n[-3.33, 10.234,\"what up\",299],\n[10000],\n//[100000],\n//[3456789]\n];\nvar soln_outputs = [ \n                      [\"twin prime: 11, 13\", \"twin prime: 5, 7\", \"number of twin primes: 3\"],\n                      [\"twin prime: 41, 43\", \"twin prime: 29, 31\", \"number of twin primes: 6\"],\n                      [\"twin prime: 461, 463\", \"twin prime: 431, 433\", \"number of twin primes: 24\"],\n                      [\"twin prime: 4967, 4969\", \"twin prime: 4931, 4933\", \"number of twin primes: 126\"], \n                      [\"error\", \"twin prime: 71, 73\", \"twin prime: 59, 61\", \"number of twin primes: 8\"],\n                      [\"error\", \"twin prime: 11, 13\", \"twin prime: 5, 7\", \"number of twin primes: 3\"],\n                      [\"error\", \"twin prime: 41, 43\", \"twin prime: 29, 31\", \"number of twin primes: 6\"],\n                      [\"error\", \"error\", \"error\", \"twin prime: 281, 283\", \"twin prime: 269, 271\", \"number of twin primes: 19\"],\n                      [\"twin prime: 9929, 9931\", \"twin prime: 9857, 9859\", \"number of twin primes: 205\"],\n                      //[\"twin prime: 999959, 999961\", \"twin prime: 999611, 999613\", \"number of twin primes: 8169\"],\n                      //[\"twin prime: 3456569, 3456571\", \"twin prime: 3456377, 3456379\", \"number of twin primes: 23672\"]\n                   ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     var funcPtsPer = 1/truVec.length;\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", funcPtsPer ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if ((style.nWLF + style.nFLAP) > 8) { fail.s(\"it can be done with fewer loops\"); }\n    if (style.nFLAP > 6) { fail.s(\"it can be done with fewer for loops\"); }\n    if (style.nTFD < 4) { fail.s(\"must have at least 4 top level function declarations\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                ","createdAt":{"$date":"2017-12-20T18:31:50.636Z"},"updatedAt":{"$date":"2018-03-20T13:15:22.068Z"}},{"_id":{"$oid":"5a3aacd1acfdba6414c86703"},"num":4,"type":"wall","phase":1,"name":"<B>W5</B> Sports statistics","folder":"5a3aa9cbacfdba6414c866fe","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Write a program that will compute some statistics for a sports team.\nWe will be using objects to represent the athletes on a team, and store the \nathlete objects in an array to represent the entire team. Details follow.\n</b></font>\n</p> \n<p>\nWe will also be using more complicated input than we have before.  The input will be a long\nencoded text string, and your program will \"parse\" the string --  it will \nbreak the string into smaller data components for use.  We learned how this is done in the past week's module on parsing.\n</p>\n<p>\nWhen it is time to locally test your program, you will not want to type in all the input.  It is lengthy, and the format is exacting.\nInstead, there are sample executions with sample input data in the detailed program description.\nHighlight and cut the input data, and paste it into the prompt box when your program executes.  Your program will see it as one long text string\n(even though it looks like several lines in the program description), and it will parse it into parts with the string \"split\" method.\n</p>\n<p>\nSee this\n<a href=\"http://www.cs.unc.edu/~stotts/COMP110-f15/assn/w.sports.html\" target=\"_blank\" >\ndetailed description.\n</a>\n</p>","value":{"correct":"25","style":"5"},"onSubmit":"var soln_inputs = [[\"8!1#John Smith#8#43#21#17#8!2#Adam Jones#6#20#9#13#4!3#Bill Miller#7#57#39#28#21!4#Tom Webber#5#12#5#7#6!5#Sam Andrews#8#31#27#74#69\", 4, \"done\"],\n[\"6!10#Jenny Jones#5#23#17#14#9!22#Sue Andrews#6#43#19#24#16!34#Amy Smith#4#11#9#14#8!15#Terri Williams#3#37#29#19#15!5#April Collins#1#5#3#2#2!44#Sondra Taylor#5#71#44#25#18!30#Bernice Miller#6#54#37#43#28\", 17, 22, \"done\"],\n[\"12!3#Batman#11#101#65#78#54!13#Robin#9#65#34#58#41!33#Batgirl#6#23#17#11#7!10#Wolverine#8#67#24#19#17!38#Storm#12#132#81#66#41!22#Hulk#5#0#0#1#1!43#Spiderman#12#143#67#63#48!23#Wonderwoman#10#89#54#61#47!53#Superman#7#45#17#18#11\", 43, 22, 23, \"done\"]\n                  ];\nvar soln_outputs = [ [\"team ppg: 38.75\", \"high total: Sam Andrews, 123\", \"high ppg: Sam Andrews, 15.37\", \"(4) Tom Webber: 7 fta, 6 ftm, 85.71%\"],\n[\"team ppg: 68.66\", \"high total: Sondra Taylor, 106\", \"high ppg: Terri Williams, 24.33\", \"none\", \"(22) Sue Andrews: 24 fta, 16 ftm, 66.66%\"],\n[\"team ppg: 82.08\", \"high total: Storm, 203\", \"high ppg: Storm, 16.91\", \"(43) Spiderman: 63 fta, 48 ftm, 76.19%\", \"(22) Hulk: 1 fta, 1 ftm, 100%\", \"(23) Wonderwoman: 61 fta, 47 ftm, 77.04%\"]   \n                   ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\", (2/5)); }\n    if (style.nAFL > 5 ) { fail.s(\"We need 4 or fewer for loops\", (1/10) ); }\n    if (style.nAWL > 1) { fail.s(\"Use only one while loop\", (1/10) ); }\n    if (style.nTFD < 3) { fail.s(\"We need at least 3 functions declared and used\", (2/5) ); }\n    if (style.nDO < 1) { fail.s(\"need to declare and use objects\"); }\n  }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}  \n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                  ","createdAt":{"$date":"2017-12-20T18:32:49.736Z"},"updatedAt":{"$date":"2018-04-03T01:50:44.221Z"}},{"_id":{"$oid":"5a3aba1e41b9976116069c45"},"num":5,"type":"diy","phase":1,"name":"<B>DIY:</B> Guessing game (binary search)","folder":"5a0cbd22433aec110b9e8bd6","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Number Guessing Game</b>\n</font>\n</p> \n<p>\n<font color=firebrick>\n<b>This program is not required of you for class, but it is offered as extra practice to self-test your skills.\n</b></font>\n</p> \n<p>\nIn this program we will create a guessing game that will illustrate the power of powers of 2.  \nWe will be implementing a form of <i>binary search</i>.  We will solve a large problem by cutting the size\nof the problem in half each step; in this way a huge problem becomes a small one in only a relatively few\nsteps.\n</p>\n<p>\nDetails of the program to write <a href=\"http://www.cs.unc.edu/~stotts/COMP110-f15/assn/w.guess.html\" target=\"_blank\">\ncan be found here</a>.\n</p>","value":{"correct":"0","style":"0"},"onSubmit":"var soln_inputs = [ \n   [\"yes\"], \n   [\"higher\",\"yes\"],\n   [\"lower\",\"yes\"],\n   [\"lower\",\"lower\",\"lower\",\"lower\",\"lower\",\"lower\",\"lower\",\n    \"lower\",\"lower\",\"lower\",\"lower\",\"lower\",\"lower\",\"lower\",\"yes\"],\n   [12,24,\"goheels\",\"yes\"],\n   [\"lower\",\"cool\",\"what?\",\"lower\",\"lower\",\"higher\",\"bingo\",\"yes\"]\n];\nvar soln_outputs = [ \n   [16384,\"Got it in 1 guesses\"],\n   [16384,24576,\"Got it in 2 guesses\"], \n   [16384,8192,\"Got it in 2 guesses\"], \n   [16384,8192,4096,2048,1024,512,256,128,64,32,16,8,4,2,1,\"Got it in 15 guesses\"],\n   [16384,\"error\",\"error\",\"error\",\"Got it in 1 guesses\"],\n   [16384,8192,\"error\",\"error\",4096,2048,3072,\"error\",\"Got it in 5 guesses\"]\n];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLF >3 ) { fail.s(\"it can be done with fewer while loops\"); }\n    if (style.nFLAP > 0) { fail.s(\"use no for loop\"); }\n    if (style.nTFD < 3) { fail.s(\"must have at least 3 top level function declarations\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);","createdAt":{"$date":"2017-12-20T19:29:34.152Z"},"updatedAt":{"$date":"2018-04-03T01:45:31.268Z"}},{"_id":{"$oid":"5a3b397a41b9976116069c4c"},"num":2,"type":"twit","phase":1,"name":"<B>MAP:</B> Expressions, variables, assignment","folder":"53f29f9a41b3137f58803191","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/chalkTalk-1-M.mp4","text":"In this chalk-talk video, we learn about how variables are laid out in memory inside your computer, and how expressions and assignment\nchange variable values as the program executes.\n<pre>\n  \"use strict\";\n  function myMain() {\n     var num;\n     var foo = 5;\n     num = foo * 2;\n     foo = foo - 1;\n     num = num + (foo * 2);\n     alert(num); \n  }\n\n  myMain();\n</pre>\nTo complete this problem, type in the program discussed in the video, and execute it to verify the \nresult computed in the chalk-talk.  Then submit it for score.\n","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs = [[] ];\nvar soln_outputs = [[18] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  //if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  //else {\n //   if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n //   if (style.nWLF != 1) { fail.s(\"use one while loop\"); }\n //   if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n // }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ","createdAt":{"$date":"2017-12-21T04:32:58.664Z"},"updatedAt":{"$date":"2018-01-16T19:53:41.736Z"}},{"_id":{"$oid":"5a3b398741b9976116069c4d"},"num":3,"type":"twit","phase":1,"name":"<B>MAP:</B> More complicated expressions","folder":"53f29f9a41b3137f58803191","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/chalkTalk-2-M.mp4","text":"In this chalk-talk video, we learn about how variables are laid out in memory inside your computer, how more complicated expressions are evaluated,\nand how assignment is used to change variable values as the program executes.\n<pre>\n  function myMain() {\n     var nT, nC, nK, nTpK, nTpC;\n     nC=12; nTpC = 4;\n     nK=3;  nTpK = 6;\n     nT = nC * (nTpC + 1);   // car has a spare\n     nT = nT + ( nK * (nTpK + 2));  // truck has 2 spares\n     alert(nT); \n  }\n\n  myMain();\n</pre>\nTo complete this problem, type in the program discussed in the video, and execute it to verify the \nresult computed in the chalk-talk.  Then submit it for score.","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs = [[] ];\nvar soln_outputs = [[84] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  //if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  //else {\n //   if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n //   if (style.nWLF != 1) { fail.s(\"use one while loop\"); }\n //   if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n // }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ","createdAt":{"$date":"2017-12-21T04:33:11.958Z"},"updatedAt":{"$date":"2018-01-16T19:53:46.627Z"}},{"_id":{"$oid":"5a3b3bae41b9976116069c52"},"num":12,"type":"twit","phase":1,"name":"<B>MAP:</B> For loop execution","folder":"53cef2744fae0fbd7f731236","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/chalkTalk-3-M.mp4","text":"In this chalk-talk video, we learn more about how variables are laid out in memory inside your computer, and how a <b>for</b> loop creates systematic\nrepetition of a block of code statements.\n<pre>\nfunction myMain() {\n   var sum = 0;\n   var n=4;\n   for (var i=1; i<=n; i++) {\n      sum = sum + i;\n   }\n   alert(sum);\n}\n\nmyMain();\n</pre>\nTo complete this problem, type in the program discussed in the video, and execute it to verify the \nresult computed in the chalk-talk.  Then submit it for score.","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs = [[]];\nvar soln_outputs = [[10] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  /*\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF > 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 1) { fail.s(\"use one for loop\"); }\n  }\n  */\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ","createdAt":{"$date":"2017-12-21T04:42:22.688Z"},"updatedAt":{"$date":"2018-01-24T15:50:20.644Z"}},{"_id":{"$oid":"5a3bbc0841b9976116069c54"},"num":9,"type":"twit","phase":1,"name":"<B>MAP:</B> While loop execution","folder":"53cef2c54fae0fbd7f731238","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/chalkTalk-4-M.mp4","text":"In this chalk-talk video, we learn more about how variables are laid out in memory inside your computer, and how a <b>while</b> loop creates systematic\nrepetition of a block of code statements.\n<pre>\n  function myMain() {\n     var k, ev;\n     k = 4;\n     ev = k/2;\n     var prod = 1;\n     var end = 6;\n     while (k <= end) {\n        prod = prod * ev;\n        ev = ev + 2;\n        k++;\n     }\n     alert(prod);\n  }\n\n  myMain();\n</pre>\n\nTo complete this problem, type in the program discussed in the video, and execute it to verify the \nresult computed in the chalk-talk.  Then submit it for score.","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs = [[]];\nvar soln_outputs = [[48] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  /*\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF > 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 1) { fail.s(\"use one for loop\"); }\n  }\n  */\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ","createdAt":{"$date":"2017-12-21T13:50:00.85Z"},"updatedAt":{"$date":"2018-02-06T15:22:53.794Z"}},{"_id":{"$oid":"5a3bbcd941b9976116069c56"},"num":9,"type":"twit","phase":1,"name":"<B>MAP:</B> Internals of call and return","folder":"54179a21f4c3c15867b3c1fe","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/chalkTalk-5-M.mp4","text":"In this chalk-talk video, we learn more about how variables are laid out in memory inside your computer when an executing function (like myMain)\ncalls another function to help get the work done.  We learn about having multiple memory maps active; we learn about how information is\npassed from the calling memory map to the called one (passing parameters); we learn how information is passed from the called memory map\nback to the calling code (on a return).\n<pre>\n  function myMain() {\n     var MAX  = 4;\n     var result = fact( MAX );\n     alert(result);\n  }\n\n  function fact ( N ) {\n     var i;\n     var prod = 1;\n     i = 1;\n     while (i<=N) {\n        prod = prod * i;\n        i++;\n     }\n     return prod;\n  }\n\n  myMain();\n</pre>\n\nTo complete this problem, type in the program discussed in the video, and execute it to verify the \nresult computed in the chalk-talk.  Then submit it for score.","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs = [[] ];\nvar soln_outputs = [[24] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  /*\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF != 1) { fail.s(\"use one while loop\"); }\n    if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n  }\n  */\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ","createdAt":{"$date":"2017-12-21T13:53:29.09Z"},"updatedAt":{"$date":"2018-02-13T15:54:11.68Z"}},{"_id":{"$oid":"5a3bbdc041b9976116069c58"},"num":8,"type":"twit","phase":1,"name":"<B>MAP:</B> Basic objects","folder":"53cef3104fae0fbd7f73123d","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/chalkTalk-basic-obj-M.mp4","text":"In this chalk-talk video, we learn more about how objects are laid out in memory inside your computer, and how space is allocated and accessed\nwhen referencing the data fields inside an object.\n\n<pre>\n\"use strict\";\n\nfunction myMain() {\n  var x=5;\n  var obb = makeObj(x);\n  alert(obb.one);\n  alert(obb.two);\n  obb.three = obb.one + obb.two;\n  alert(obb.three);\n}\n\nmyMain();\n\nfunction makeObj (k) {\n  var obj = {\n    one: k,\n    two: k*2\n  };\n  return obj;\n}\n</pre>\nTo complete this problem, type in the program above, discussed in the video, and execute it to verify the \nresult computed in the chalk-talk.  Then submit it for score.","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs = [[]];\nvar soln_outputs = [ [5,10,15] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  /*\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF > 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 1) { fail.s(\"use one for loop\"); }\n  }\n  */\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ","createdAt":{"$date":"2017-12-21T13:57:20.548Z"},"updatedAt":{"$date":"2018-02-19T13:25:46.831Z"}},{"_id":{"$oid":"5a3bbe4c41b9976116069c5a"},"num":8,"type":"twit","phase":1,"name":"<B>MAP:</B> Arrays in memory","folder":"53cef2e24fae0fbd7f73123a","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/chalkTalk-arrays-M.mp4","text":"In this chalk-talk video, we learn more about how variables are laid out in memory inside your computer, and how space is allocated and accessed\nwhen using an array in your program.\n<pre>\n\"use strict\";\n\nmyMain();\n\nfunction myMain() {\n  var n = 5;\n  var arr = [];\n  for (var i=0; i<=n; i++) {\n    arr[i] = i*i;\n  }\n  arr[4] = -3.14;\n  arr[2] = \"unc\";\n  alert(arr);\n  alert(arr[3]);\n}\n</pre>\nTo complete this problem, type in the program above, discussed in the video, and execute it to verify the \nresult computed in the chalk-talk.  Then submit it for score.\n</p>","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs = [[]];\nvar soln_outputs = [ [[0,1,\"unc\",9,-3.14,25], 9] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     //for(var i=0; i<truVec.length; i++) { \n     //   if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     //}\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  /*\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF > 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 1) { fail.s(\"use one for loop\"); }\n  }\n  */\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ","createdAt":{"$date":"2017-12-21T13:59:40.065Z"},"updatedAt":{"$date":"2018-03-01T21:04:30.525Z"}},{"_id":{"$oid":"5a3bbfbd41b9976116069c5d"},"num":8,"type":"twit","phase":1,"name":"<B>MAP:</B> Object method execution","folder":"5a3bbf6841b9976116069c5c","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/chalkTalk-obj-methods-M.mp4","text":"In this chalk-talk video, we learn more about how objects are laid out in memory inside your computer, including how methods (functions) can be created inside\nobjects.  We also see how to call a method inside an object.  \n\n<pre>\n\"use strict\";\n\nfunction myMain() {\n  var x=5;\n  var emp = makePerson(\"bob\",35,40,15.00);\n  alert(\"pay is $\" + emp.pay() );\n}\n\nmyMain();\n\nfunction makePerson (n,a,h,r) {\n  var pObj = {\n    name: n,\n    age: a,\n    hours: h,\n    rate: r,\n    pay: function() {\n      var cash;\n      cash = this.rate * this.hours;\n      return cash;\n    }\n  };\n  return pObj;\n}\n</pre>\nTo complete this problem, type in the program above, discussed in the video, and execute it to verify the \nresult computed in the chalk-talk.  Then submit it for score.","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs = [[]];\nvar soln_outputs = [ [\"pay is $600\"] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  /*\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF > 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP != 1) { fail.s(\"use one for loop\"); }\n  }\n  */\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ","createdAt":{"$date":"2017-12-21T14:05:49.519Z"},"updatedAt":{"$date":"2018-03-20T13:12:12.474Z"}},{"_id":{"$oid":"5a3bc09b41b9976116069c5f"},"num":5,"type":"twit","phase":1,"name":"<B>MAP:</B> Recursive call and return","folder":"53cef35d4fae0fbd7f73123f","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/chalkTalk-6-M.mp4","text":"In this chalk-talk video, we learn about how variables are laid out in memory inside your computer when several functions are involved.\nWe see how parameters are transmitted to a called function, and how return values are sent back to the calling code.\nWe complicate earlier examples of this by having one of the function a \"recursive\" function... meaning the definition of the function\ncontains a call to itself.  We illustrate multiple memory maps being active for different calls to the same recursive function,\nand we reinforce the idea that function calls execute returns in the reverse of the order in which they are called.\n<pre>\n  function myMain() {\n     var MAX = 4;\n     var result = fact( MAX );\n     alert(result);\n  }\n\n  function fact ( n ) {\n     if ( n===1 ) { return 1; }\n     var res;\n     res = n * fact( n-1 );\n     return res;\n  }\n\n  myMain();\n</pre>\nTo complete this problem, type in the program discussed in the video, and execute it to verify the \nresult computed in the chalk-talk.  Then submit it for score.","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs = [[] ];\nvar soln_outputs = [[24] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  /*\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.nWLF != 1) { fail.s(\"use one while loop\"); }\n    if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n  }\n  */\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                    ","createdAt":{"$date":"2017-12-21T14:09:31.474Z"},"updatedAt":{"$date":"2018-04-03T01:31:51.391Z"}},{"_id":{"$oid":"5a3bc40041b9976116069c61"},"num":0,"type":"twit","phase":1,"name":"Overview","folder":"5a3bbf6841b9976116069c5c","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/advObj.overview.mp4","text":"<p>\n<font color=firebrick>\n<b>Methods: Functions inside objects\n</b></font>\n</p> \n<p>\nObjects are the capstone item in the list of the Great 8 concepts we find in all object-oriented programming languages.\nUp to now, we have seen that an object is a way of binding data values (\"fields\") together so that they remain\nassociated for a common purpose... such as representing different pieces of information about a person\n(name, age, address, pay rate, hours worked, etc.).\nNow we will see that functions can also be fields in an object.   We call a function inside an object a \"method\" of that object.\n</p>\n<p>\nThus, an object binds together data fields, and functions (methods)\nthat operate on those data fields.  This makes an object an abstraction of a program in general.\nWe can think of our \"programs\" as collections of objects that call each others' methods in order to get work done.\n</p>\n<p>\nThe methods inside an object will allow us to think of an object as being able to do work for us.\nIn previous programs, we had an object constructor \"makePersonObject\" that would create an object that\nrepresented a worker at a company.  The object had a field that told how many hours that person worked, and a field that\ntold the pay rate the person earned per hour. To compute the amount of pay the person earned, we directly accessed the hours field and the payrate field in \nthe object, retrieved their values, and multiplied those values together.  We did this in the problem \"Construct person object\"   in module \"Basic Objects\" if you would like\nto refer back to the code.\n</p>\nNow, we will be able to add a method (function) to the person object so that the person object can do that computation internally, where the hours and payrate fields are kept \n(we will do this in one of the following problems).  We can then\nhave a person object do that work for us, and simply report the total pay in response to our code elsewhere calling a function (a method) in the object.\nIn essence, we will contact the object and get it to do what we were doing in our code before, but now we do not have to remember the details\nof what the internal data fields are named.  We let the object worry about that in the \"pay\" function, and we simple call that function and wait for the results.\nWe will not look inside the object at its data fields.  The syntax for this will be:\n<pre>\n  var persObj = makePersonObject();\n  var totalPay = personObj.pay();\n</pre>\n</p>\n<p>\nTo do this, we will alter the  \"makePersonObject\"  constructor to add the method to each objects it creates.  Let's name that method \"pay\".  \nThis method takes no arguments, and when called, it returns the total\npay earned by the person the object represents.  \nThis is computed by multiplying the person's pay rate by the person's hours worked.\n</p>\n<p>\n<b>To get credit for this overview:</b>\nLet's take the \"makePersonObject\" code we had before and alter to put a very simple function into each object it makes.\nThis function will report back the name of the person when it is called. Here is the new constructor code (and a myMain to exercise the constructor):\n<pre>\n\"use strict\";\n\nfunction myMain () {\n  var emp = makePersonObject();  // this makes a person object \"emp\"\n  alert( emp.getName() ); // this is a method call on the object \"emp\"\n}\n\nfunction makePersonObject ( ) {\n  var perObj = {\n    id: Number(prompt(\"person ID number?\")),\n    name: prompt(\"person name?\"),\n    hours: Number(prompt(\"hours worked?\")),\n    payrate: Number(prompt(\"pay rate?\")),\n\n    // this is how we put a function into an object\n    // we make an anonymous function and bind it to a field name\n    getName: function ( ) { return this.name; } \n\n  };\n  return perObj;\n}\n\nmyMain();\n</pre>\nHere we create a person object in myMain, and then call the \"getName\" in that object. We then print out the string returned by that method.  In this way, the\nobject is \"telling us\" the name it contains.\nPut this code in your editor window, test it locally, and then submit it for score.\n</p>\n<p>\n<b>Software Engineering lesson.</b>\nNot looking inside an object at its data fields... letting the object itself worry about manipulating the data fields... getting information from an\nobject by calling methods and letting the object send us data... this is called \"information hiding\".  We think of an object as being a\n\"black box\" and we don't see it internals.  We do see it's public interface... it's methods and how to call them (the arguments the methods need when called).\nIf we want information, we ask the object to supply it rather that reaching inside and taking it.  In this way, complicated manipulations can be written once\nand put into the object as methods.  This is an example of the DRY principle at work. We do not repeat complicated manipulations of object data fields all\nover our code; rather we put them into the objects, as methods, each defined once.  Then we call the functions when we need the information,\n</p>\n<p>\nSome programming disciplines go as far as making data field invisible.. unable to be read outside the object.  Then to get something simple \n(like the value of the name field in our person object) we would put a method like \"getName()\" in the person object.  Maybe we put in a \"setName(s)\" method \nas well, in case we need to change the name stored in the object.  We would not be allowed to do something direct like persObj.name = \"Smith\" from outside the\nobject.  Information hiding helps keep the data in the object consistent, since it cannot be changed by any code that it not a methods in the object.\n</p>\n<p>\nThese simple methods that produce, or update, the values of the data fields are called \"getters\" and \"setters\".  The \"getName()\" methods we wrote in this overview code\nis an example of a \"getter\" method.\n</p>","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs = [ [123,\"smith\",10,20] ];\nvar soln_outputs = [ [\"smith\"] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL > 2) { fail.s(\"use no more than 2 while loops\"); }\n    if (style.nFLAP > 2) { fail.s(\"use no more than 2 for loops\"); }\n    if (style.nAFD < 2) { fail.s(\"need at least 2 functions declared\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                          ","createdAt":{"$date":"2017-12-21T14:24:00.715Z"},"updatedAt":{"$date":"2018-03-20T13:08:57.379Z"}},{"_id":{"$oid":"5a3beb0f41b9976116069c63"},"num":1,"type":"twit","phase":1,"name":"Array of objects","folder":"5a3bbf6841b9976116069c5c","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/advObj.arrayOfObjs.mp4","text":"<p>\n<font color=firebrick>\n<b>Write a program that will generate several objects (using a constructor function) and store those objects in an array for later use.\n</b></font>\n</p> \n<p>\nWe will start with the code from \"Construct person object\" from the \"Basic Objects\" folder.\nThis gives us the myMain function as well as a constructor function \"makePersonObject\" that\nmanufactures and returns objects after populating them with user input.\n</p>\n<p>\nIn myMain before we created 3 separate variables to store 3 objects.  This means the code works for exactly 3 persons, and if the user\nhas more (or fewer) to work with, then the code must be re-written (a little bit) to alter the number (and names) of the variables used to store\nthe person objects.\n</p>\n<p>\nIn this new program we will make a loop and keep constructing objects until the user says we\nare done.  Each new object made and returned by the constructor will be stored in an array slot\n(in much the same way we created and used an array to store number input from the user in other programs).\nIn the loop, first call makePersonObject to manufacture a person object; store the object\nthat is returned in the next open array slot.  Then ask the user if another object needs to be made.\nIf the reply is \"no\" then we will break to end the input loop.  Any other reply will cause the \nloop to repeat and make another object.\n</p>\n<p>\nOnce the input loop is done and the array if filled with objects, we will use the objects to\ncompute some information. First, print the length of the array (which is the number of objects stored in the array).\nNext, compute the total payroll. To do this, go through the array and sum up all the amounts\npaid to each worker.  Print this out with this format: \"total payroll: 1234.56\"\n</p>\n<p>\nThen go through the array and find the name of the person with the highest hourly pay rate.\nPrint out the name in this format: \"high rate: smith\".\n</p>","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs = [ [ 123,\"smith\",10,20,\n                      \"yes\",234,\"jones\",20,30,\n                      \"yes\",345,\"miller\",20,25,\"no\" ] ];\nvar soln_outputs = [ [3, \"total payroll: 1300\", \"high rate: jones\"] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL < 1) { fail.s(\"use at least one while loop\"); }\n    if (style.nFLAP < 2) { fail.s(\"use 2 for loops\"); }\n    if (style.nAFD < 2) { fail.s(\"need at least 2 functions declared\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                        ","createdAt":{"$date":"2017-12-21T17:10:39.936Z"},"updatedAt":{"$date":"2018-03-20T13:09:08.831Z"}},{"_id":{"$oid":"5a3bec2041b9976116069c65"},"num":2,"type":"twit","phase":1,"name":"Method (function) in an object","folder":"5a3bbf6841b9976116069c5c","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/advObj.methodInObj.mp4","text":"<p>\n<font color=firebrick>\n<b>Write a program that illustrates putting a method into an object and calls that method.\n</b></font>\n</p> \n<p>\nLet's start with the code from \"Array of objects\".\n</p>\n<p>\nAdd a method to \"makePersonObject\" called \"pay\".  This method takes no arguments, and returns the total\npay earned by the person.  This is computed by multiplying the person's pay rate by the person's hours worked.\n</p>\n<p>\nIn myMain, adjust your code to call this \"pay\" method instead of using the individual data fields in the person object.\nThis program should print the same output as the one we stated with. Tests it, and submit for score.\n</p>\n<b>Getter methods.</b>\nNow we are going to alter the object constructor more.  Finding the person with the highest pay rate was done before by reading the \"name\" and \"payrate\" fields in\nthe person object directly.  We will increase the information hiding in this program by adding two more methods to the person object, both \"getter\" methods.\nWe will add \"getName\", a methods that will return the string stored in the \"name\" field.  We will also add \"getRate\", a method that will return the number stored\nin the \"payrate\" field.  After adding these getter methods we will alter the code in myMain to use them rather than reading the object fields directly.\n</p>\n<p>\nOnce all this is done, test the new code and then submit it for score.  You will see that the functional behavior is the same.\n</p>","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs = [ [ 123,\"smith\",10,20,\n                      \"yes\",234,\"jones\",20,30,\n                      \"yes\",345,\"miller\",20,25,\"no\" ] ];\nvar soln_outputs = [ [3, \"total payroll: 1300\",\"high rate: jones\"] ];\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL > 2) { fail.s(\"use no more than 2 while loops\"); }\n    if (style.nFLAP > 2) { fail.s(\"use no more than 2 for loops\"); }\n    if (style.nAFD < 2) { fail.s(\"need at least 2 functions declared\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                             ","createdAt":{"$date":"2017-12-21T17:15:12.547Z"},"updatedAt":{"$date":"2018-03-20T13:09:14.865Z"}},{"_id":{"$oid":"5a3beca641b9976116069c67"},"num":3,"type":"twit","phase":1,"name":"Object containing an array","folder":"5a3bbf6841b9976116069c5c","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/advObj.arrayInObj.mp4","text":"<p>\n<font color=firebrick>\n<b>Write a program that constructs objects with an array inside each object, and will demonstrate using such an object.\n</b></font>\n</p> \n<p>\nWrite a program that will create and use an object that represents a student.\nIn addition to myMain, write a constructor function \"makeStuObject\" that takes no parameters.\nInside makeStuObject you will prompt the user for data values to put into the object fields.\nA student object will have a name field (text), an id field (number), and a grades field (array of numbers).\nIt will also have a method (function) called \"gradeAvg\" that takes no arguments and returns the average of all the grades\nin the array of grades.\n</p>\n<p>\nIn the constructor function prompt the user for the name and id.\nFor grades, first ask the user how many grades there will be, then prompt for each grade and put it into the grades array.\n</p>\n<p>\nIn myMain simply make one student object and print out the grade average.\n</p>","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs = [ [12345,\"smith\",5,60,65,75,80,91.52],\n                    [45678,\"jones\", 3, 90, 70, 83]\n                  ];\nvar soln_outputs = [ [74.304], [81] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL > 2) { fail.s(\"use no more than 2 while loops\"); }\n    if (style.nFLAP > 2) { fail.s(\"use no more than 2 for loops\"); }\n    if (style.nAFD < 2) { fail.s(\"need at least 2 functions declared\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);   ","createdAt":{"$date":"2017-12-21T17:17:26.336Z"},"updatedAt":{"$date":"2018-03-20T13:09:23.511Z"}},{"_id":{"$oid":"5a3bee0041b9976116069c6b"},"num":4,"type":"twit","phase":1,"name":"Array in object: Method to add element","folder":"5a3bbf6841b9976116069c5c","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/advObj.methodAddElt.mp4","text":"<p>\n<font color=firebrick>\n<b>Write a program that constructs objects with an array inside each object, and also has a methods to fill and manipulate that array.\n</b></font>\n</p> \n<p>\nIn this program we will modify the previous one (Object containing an array).\nInstead of loading up the array in the constructor, we will make the constructor create the object with an empty array.\nThen we will add a method to the object called \"addGrade\".  This method will take one argument (a number, a grade) and it will insert \nthat argument into the next open slot in the grade array.\n</p>\n<p>\nIn myMain make one student object.  Then put in the user interaction code you took out of the constructor.  \nAsk the user how many grades there are for the student.  Then go through a loop once for each grade.\nIn the loop ask the user for the grade and call addGrade to store that grade into the object grade array.\nOnce all grades are entered, ask the object for the grade average and print it.\n</p>","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs = [ [12345,\"smith\",4,60,65,75,80],\n                    [23456,\"jones\",3,10,20,60],\n                    [34567,\"miller\",0]\n                  ];\nvar soln_outputs = [ [70],[30],[0] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL > 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP > 2) { fail.s(\"use no more than 2 for loops\"); }\n    if (style.nAFD < 2) { fail.s(\"need at least 2 functions declared\"); }\n  }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                 ","createdAt":{"$date":"2017-12-21T17:23:12.612Z"},"updatedAt":{"$date":"2018-03-20T13:09:29.473Z"}},{"_id":{"$oid":"5a3beeb941b9976116069c6d"},"num":5,"type":"twit","phase":1,"name":"Silent constructor","folder":"5a3bbf6841b9976116069c5c","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/advObj.silentConst.mp4","text":"<p>\n<font color=firebrick>\n<b>Write a program that uses a \"silent constructor\" to build objects, and uses those objects.\n</b></font>\n</p> \n<p>\nIn this program we will modify a previous one (Method in an object). In this program, we have a constructor for objects that model (represent) people.\nIn the object constructor, interact with the user to get various pieces of data to put into the new object... data value like a name, an id, etc.\nNow we want to move the user interaction out of the constructor, and have that interaction done elsewhere in the program (like in myMain).\nThis makes the constructor \"slient\" meaning it does not communicate with the user.  Rather, the information needed by the constructor will\nbe passed in as arguments when the constructor is called to make an object.\n</p>\n<p>\nThe code changes we need to make are detailed, so just follow along in order\n</p>\n<p>\nKeep the constructor makePersonObject. In myMain clear out almost all the code, leaving a single call to makePersonObject to make\none person object. Move the user input code from the constructor into myMain (before the call to the constructor).\nThe values input will need to be stored in local variables in myMain, and then those variables will be passed in to the\nconstructor as parameters.  \n</p>\n<p>\nIn makePersonObject we will need to create an argument list in the definition header, and we will need to\nassign the passed argument values to the appropriate object fields.  Test to make \nsure it is functioning as expected.\n</p>\n<p>\nFinally, back in myMain, simply call the pay method on the object that the constructor returns, and print out the value that method returns.\n</p>\n","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs = [ [12345, \"smith\", 20, 30]   ];\nvar soln_outputs = [ [600] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL > 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP > 2) { fail.s(\"use no more than 2 for loops\"); }\n    if (style.nAFD < 2) { fail.s(\"need at least 2 functions declared\"); }\n  }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                 ","createdAt":{"$date":"2017-12-21T17:26:17.507Z"},"updatedAt":{"$date":"2018-03-20T13:09:40.204Z"}},{"_id":{"$oid":"5a3bef7241b9976116069c6f"},"num":6,"type":"twit","phase":1,"name":"This vs. constructor local","folder":"5a3bbf6841b9976116069c5c","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"http://www.cs.unc.edu/Courses/cco-comp110/bricksVids/advObj.thisVsLocal2.mp4","text":"<p>\n<font color=firebrick>\n<b>Write a program that better illustrates the purpose of the \"this\" keyword in object methods, and illustrates the difference between object-creation time (when a constructor is called) and object-use time (when an object method is called).\n</b></font>\n</p> \n<p>\nIn this program we will modify a previous one (Silent constructor).  Load that code into the editor window.\n</p>\n<p>\nThe instructional point is to make clear the reason to use the \"this\" reference in an object,\nas well as to clarify the distinctions between a method (function) and a data field.  The \"this\" object reference gives dynamic capabilities,\nallowing an object to compute information from what happens to be stored in the object fields <b>at the time of method call</b>.  Referencing\nvariables and parameters in the object constructor when the object is made will capture values that are static... maintain the values\nthat existed <b>at the time of object creation</b> and will not change dynamically.\n</p>\n<p>\nThe code changes we need to make are detailed, so just follow along in order\n</p>\n<p>\nIn function makePersonObject let's now make a few more changes.  First, rename the \"pay\" function to be called \"payFunc\".\nLet's also add a new field called \"payData\" that simple takes the hours and payrate parameters and multiplies them (not using the \"this\"\nobject reference).\n</p>\n<p>\nIn myMain take the single person object that the constructor return, and alert the payData field.  \nThen alert a call to the payFunc method.  Run the program and see that both outputs are the same.\n</p>\n<p>\nNow, after those alerts in myMain, add a line that doubles the hours field in the person object ( something like emp.hours *= 2; ).  We have just doubled the hours\nthat person worked, and we should see a doubling in the total pay.  Repeat the two different alerts and see what happens.\n</p>\n<p>\nThe reason we now see a difference is because the payFunc method computes using whatever happens to be stored in the rate and hours fields at the time the\nmethod is called (the \"this\" keyword says to use the fields dynamically).  \nSo if we change the values stored in those fields during computation, the result returned by the methods call will change accordingly.\nHowever, the payData field is static; it's value is created and stored when the object is made, using values from local variables (parameters) in the constructor memory map.\nThose values are fixed at construction time and do not change as computation progresses.\n</p>","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs = [ [12345, \"smith\", 20, 30]   ];\nvar soln_outputs = [ [600,600,600,1200] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL > 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP > 2) { fail.s(\"use no more than 2 for loops\"); }\n    if (style.nAFD < 2) { fail.s(\"need at least 2 functions declared\"); }\n  }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                 ","createdAt":{"$date":"2017-12-21T17:29:22.051Z"},"updatedAt":{"$date":"2018-03-20T13:11:38.368Z"}},{"_id":{"$oid":"5a3bf03641b9976116069c71"},"num":7,"type":"diy","phase":1,"name":"<b>DIY:</b> Silence a constructor","folder":"5a3bbf6841b9976116069c5c","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Silence the object constructor in a previous program, and add a method to the object that is constructed. Details follow.\n</b></font>\n</p> \n<p>\nIn this program you will modify a previous one that has a noisy constructor (&nbsp<i>Array in object: method to add element</i>&nbsp).\nInstead of interacting with the user in the object constructor, you will move all user input into myMain and create parameters for passing\nthe user input into the constructor when you call it.\n</p>\n<p>\nAll input prompting will now happen in myMain.\nAsk the user for the input information in the same order it appears in with the original code: first the id number, then the name, and then those can\nbe passed to the makeStuObject constructor.  Once the object is sent back, the user is asked (in myMain) the number of\ngrades, then each grade is input and added to the object by calling it's \"addGrade\" method (as the original code already does).\n</p>\n<p>\n<b>Methods to add:</b>\nAdd three new methods to the object by altering the constructor code.\n<ul>\n<li>\nThe object should have a \"<b>numGrades</b>\" method (that takes no arguments), which will return an integer 0 or greater \ntelling how many grades have been stored in the grade array.</li>\n<li>\nThe object should also have a \"<b>maxGrade</b>\" method (that takes no arguments), which will find and return the largest grade stored in the array.</li>\n<li>\nThe object should also have a \"<b>biasedAvg</b>\" method (that takes one argument \"g\"), which computes the average of the grades that are larger than g.\nOn \"biasedAvg\" there are a couple things to make sure you do correctly.  First, make sure that if there are no grades at all (like the special case in\n\"gradeAvg\") return a 0.  Next, if there are grades, but none are larger than the argument g, do not divide by 0; instead, if no grades are larger than\nthe argument \"g\" simply return a 0. </li>\n</ul>\n</p>\n<p>\n<b>Output:</b> Using four separate alerts, print out these things:\n<ul>\n<li>the average of the grades (by calling the gradeAvg method we already have in the object) </li>\n<li> the number of grades (by calling the new numGrades method)</li>\n<li>the largest grade (by calling the new maxGrade method)</li>\n<li>the number of grades larger than 70 (by calling the new biasedAvg method and passing it 70 as a parameter value)</li>\n</ul>\n</p>\n<p>\n<b>Example executions:</b>\n<pre>\nID number?  12345\nname? smith\nhow many grades? 4\ngrade? 60\ngrade? 65\ngrade? 74\ngrade? 80\n69.75             // average of all grades\n4                // number of grades\n80               // highest grade\n77               // biased average of grades over 70\n</pre>\n<pre>\nID number? 2345\nname? jones\nnumber of grades? 3\ngrade? 60\ngrade? 50\ngrade? 70\n60\n3\n70\n0\n</pre>\n<pre>\nID number? 776655\nname? miller\nnumber of grades? 0\n0\n0\n0\n0\n</pre>\n</p>","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs = [ [12345,\"smith\",4,60,65,74,80], [887766,\"arvind\",6,40,50,60,70,80,90],\n                    [23456,\"jones\",3,10,20,60],\n                    [34567,\"miller\",0]\n                  ];\nvar soln_outputs = [ [69.75,4,80,77], [65,6,90,85], [30,3,60,0], [0,0,0,0] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nAWL > 0) { fail.s(\"use no while loops\"); }\n    if (style.nFLAP > 2) { fail.s(\"use no more than 2 for loops\"); }\n    if (style.nAFD < 2) { fail.s(\"need at least 2 functions declared\"); }\n  }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                 ","createdAt":{"$date":"2017-12-21T17:32:38.792Z"},"updatedAt":{"$date":"2018-03-20T13:11:58.815Z"}},{"_id":{"$oid":"5a3bf36341b9976116069c74"},"num":6,"type":"diy","phase":1,"name":"<B>DIY:</B> Data averaging with objects","folder":"599b1867f86460f32f01ffe6","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Write a program that creates two objects to collect some data about user input.  Details follow.\n</b></font>\n</p> \n<p>\nObjects are abstractions of programs as a whole.  An object is a collection of data, and functions (methods) that\noperate on the data in the object.  One way to think of an object, then, is as a little data base... or a fat \"variable\".\nIn this program we will use two objects to collect and keep track of some information about input a user gives as the\nprogram runs.\n</p>\n<p>\n<b>Structural Requirements:</b> For this program, define a \"myMain\" function and call it to make the whole thing begin execution (as always is our style).\nYou will also write a function called \"makeNewAvgObj\" as described. \nYou will also write a function called \"getGoodNum\" as described. \nFeel free to write and use as many functions as you wish, but at least write these three.\n</p>\n<p>\nWrite a program to do these things:\n<ul>\n<li>\n<b>myMain</b> : Create two \"averager\" objects (call function makeNewAvgObj to create an averager object). \nWe will use one of them to average positive user input numbers, and use the other one to average negative input numbers.\nAn averager object will be given numbers (by calling its \"add\" method) and will keep track of the running sum of all the numbers added to it.\nIt will also keep a count of how many numbers have been given to it, so that it can report the average of those numbers at any given time.\n</li>\n<br/>\n<li>\nIn a loop, get a good input number from the user; you will make one of the two averager objects deal with each input number (base of whether the number is positive or negative);\nKeep looping until the user gives a \"0\" as input.  You will use the function \"getGoodInput\" to do all the necessary validating (see details following)\n</li>\n<br/>\n<li>\nAs noted, each time \"getGoodInput\" returns a valid input number, first see if it is a 0; if so stop the input loop and go to the output section.\nIf the input number is not 0, then check to see if it is positive or negative. \nIf positive, call the \"add\" method on your positive averager object; if negative, call the \"add\" method on the other averager object.\n</li>\n<br/>\n<li>\nWhen the input part is done (user gives a 0), call the \"avg\" method on the positive averager object and print the result it returns. Then call the \"avg\" method on the negative averager object and print the result it returns. This mean your program will have two separate alert statements.  Use the output format show below in the sample executions.\n</li>\n<br/>\n<li>\n<b>MakeNewAvgObj</b> : To assist you, write and use a function named \"makeNewAvgObj\" (with no parameters) that will make and return an Averager object. \nThis object will have a data field \"sum\"; a data field \"count\"; a function field \"add\"; and a function field \"avg\". \nThe \"sum\" field will hold the accumulated sum of all the numbers passed to the object (when its \"add\" method is called). \nThe \"count\" field will keep track of how many times the \"add\" method is called (in other words, it will count how many numbers got added into the sum). \nThe method \"add\" will take one parameter -- a number; it will add that number into the \"sum\" field, then increment the \"count\" field, and then it returns nothing. \nThe \"avg\" method takes no parameters; it will return the average of the numbers that have been sent to the object. It will divide the \"sum\" field by the \"count\" field and \nreturn the resulting number. \nBe careful to not divide by 0, which might happen if \"avg\" is called before any numbers have been added in. In this case, simply return a 0 as the average without \ndoing any division.\n</li>\n<br/>\n<li>\n<b>getGoodNum</b> : To assist you, write and use a function named \"getGoodNum\". This function will interact with the user when a number is needed, \nand will implement the \"re=ask the user\" strategy for validating input. The user will be asked for a number and if the input is invalid \n(any number is valid) it will alert \"error\" and ask again for a number. When a valid number is received, that number is returned by the function.\n</ul>\n</p>\n<b>Sample executions</b>\n<pre>\nUser input: 1, -7, 3, -11, 5, -9, 0\nOutput:   3    <--- avg of positives\n         -9    <--- avg of negatives\n</pre>\n<pre>\nUser input: 2, 3, 4, 5, 7, 0  \nOutput:   4.2  \n          0    \n</pre>\n<pre>\nUser input: 0\nOutput:   0 \n          0    \n</pre>\n<pre>\nUser input: hello, 2, 3, -2, -3, 0\nOutput:   error\n          2.5\n          -2.5  \n</pre>\n<pre>\nUser input: -1, 3, stop, -2, 4, help, 0\nOutput:   error\n          error\n          3.5\n          -1.5\n</pre>\n<pre> \nUser input: hello, ten, help, -1, 0\nOutput:   error\n          error\n          error\n          0\n          -1        \n</pre>\n\n</p>\n<p>\n<b>Style notes.</b> Remember that we are not declaring functions inside other functions.  All your functions should be top level (global functions).\nRemember to use the proper types of loops for the problems you are solving.\nUse good mnemonic variable names.  Indent your code for readability.\nAlways put curly braces (\"{\" and \"}\") around loop bodies and the \"then\" and \"else\" blocks in conditional statements.\n</p>","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs = [ [1,2,3,4,-1,-2,-3,-4,0], [1,3,8,0], [0], [-5,-3,-7,0], [1.1,-8.8,0],\n                    [\"hi\",\"lo\",0]\n                  ];\nvar soln_outputs = [ [2.5,-2.5], [4,0], [0,0], [0,-5], [1.1,-8.8],\n                     [\"error\",\"error\",0,0]\n                   ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"failed test case\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    if (style.nWLAP > 2) { fail.s(\"Yo can do this with only 2 while loops\"); }\n    if (style.nFLAP > 0) { fail.s(\"use no for loops\"); }\n    if (style.nAFD < 3) { fail.s(\"need at least 3 specific functions in this program\"); }\n    if (style.nDO < 1) { fail.s(\"need to declare and use 2 objects\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                 ","createdAt":{"$date":"2017-12-21T17:46:11.765Z"},"updatedAt":{"$date":"2018-03-27T22:56:12.58Z"}},{"_id":{"$oid":"5a40579441b9976116069c93"},"num":0,"type":"twit","phase":1,"name":"Canvas and basic drawing","folder":"5a4055f941b9976116069c92","language":"javascript","testMode":true,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Write a program that will draw some very basic figures on a web page. Use HTML 5 graphics to do this. Details follow.\n</b></font>\n</p> \n<p>\nWe will write a program that will use the graphics features in HTML5 to make a simple drawing.\nHTML5 has a canvas tag that will set apart a rectangular space on a page.\n</p>\n<p>\nCut and paste the following JavaScript right after the \"use strict\"; line in your program:\n<pre>\n\n//=== supplied canvas stuff ==================================================\nvar tab = window.open();\nvar webPage = makeHTMLCanvas();  // alert(webPage);\nvar PIC = getCanvasContext();    // the canvas context... draw to this global var\n\nfunction makeHTMLCanvas() {\n  var htmlStr=\"\";\n  htmlStr += \"&lthtml>&lthead>&lt/head>&ltbody>\";\n  htmlStr += \"&lth1>Draw a Picture!!&lt/h1>\";\n  htmlStr += \"&ltcanvas id='myCanvas' width=800 height=600 \";\n  htmlStr += \"style='border:1px solid #000600;'>&lt/canvas>\";\n  htmlStr += \"&lt/body>&lt/html>\";\n  tab.document.write(htmlStr);\n  return htmlStr;\n}\n\nfunction getCanvasContext() {\n  var c = tab.document.getElementById(\"myCanvas\");\n  var context = c.getContext(\"2d\");\n  return context;\n}\n\n//=== end supplied canvas stuff ==================================================\n\n</pre>\n<br/>\nAfter this pre-supplied code, then write the code for your program.\n<br/><br/>\nYou may find this <a href=\"http://www.html5canvastutorials.com/\" target=\"_blank\">HTML5 Canvas tutorial </a> helpful.","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs = [ [] ];\nvar soln_outputs = [ [] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error in your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    //if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\", (2/5)); }\n    //if (style.nAFL > 5 ) { fail.s(\"We need 4 or fewer for loops\", (1/10) ); }\n    //if (style.nAWL > 1) { fail.s(\"Use no more than 5 while loop\", (1/10) ); }\n    if (style.nTFD < 3) { fail.s(\"We need at least 3 functions declared and used\", (2/5) ); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}  \n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                         ","createdAt":{"$date":"2017-12-25T01:42:44.639Z"},"updatedAt":{"$date":"2018-01-07T05:20:45.781Z"}},{"_id":{"$oid":"5a40580b41b9976116069c94"},"num":1,"type":"diy","phase":1,"name":"<b>DIY:</b> Parameterize drawCircle","folder":"5a4055f941b9976116069c92","language":"javascript","testMode":true,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Write a program that will draw ... Use HTML 5 graphics to do this. Details follow.\n</b></font>\n</p> \n<p>\nStart with the code we wrote in class for \"Canvas and basic drawing.\nIn that code we wrote a function called \"drawCircle\" that took no parameters.\nWe also wrote a function called \"drawRectangle\" that did (eventually) get some parameters so we could\ncall it repeatedly and make rectangles get drawn at different places around the canvas.\n<br/><br/>\nWrite a version of \"drawCircle\" that is similarly parameterized.","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs = [ [] ];\nvar soln_outputs = [ [] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error in your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    //if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\", (2/5)); }\n    //if (style.nAFL > 5 ) { fail.s(\"We need 4 or fewer for loops\", (1/10) ); }\n    //if (style.nAWL > 1) { fail.s(\"Use no more than 5 while loop\", (1/10) ); }\n    if (style.nTFD < 3) { fail.s(\"We need at least 3 functions declared and used\", (2/5) ); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}  \n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                  ","createdAt":{"$date":"2017-12-25T01:44:43.097Z"},"updatedAt":{"$date":"2018-01-07T05:20:45.782Z"}},{"_id":{"$oid":"5a40586141b9976116069c95"},"num":2,"type":"diy","phase":1,"name":"<B>DIY:</B> Function drawTriangle","folder":"5a4055f941b9976116069c92","language":"javascript","testMode":true,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Write a program that will draw ... Use HTML 5 graphics to do this. Details follow.\n</b></font>\n</p> \n<p>\nWrite a function \"drawTriangle\" that will draw a triangle on the canvas.  Make it parameterized like drawRectangle so that we can\nrepeatedly call drawTriangle and put triangles of different sizes at different places around the canvas.\n<br/><br/>\nTo do this you will need to investigate how to draw lines on the canvas.","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs = [ [] ];\nvar soln_outputs = [ [] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error in your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    //if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\", (2/5)); }\n    //if (style.nAFL > 5 ) { fail.s(\"We need 4 or fewer for loops\", (1/10) ); }\n    //if (style.nAWL > 1) { fail.s(\"Use no more than 5 while loop\", (1/10) ); }\n    if (style.nTFD < 3) { fail.s(\"We need at least 3 functions declared and used\", (2/5) ); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}  \n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                  \n","createdAt":{"$date":"2017-12-25T01:46:09.052Z"},"updatedAt":{"$date":"2018-01-07T05:20:45.784Z"}},{"_id":{"$oid":"5a40645041b9976116069c9c"},"num":3,"type":"twit","phase":1,"name":"Point fractal 1: wallpaper","folder":"5a4055f941b9976116069c92","language":"javascript","testMode":true,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Write a program that will draw some point pictures on a web page. Use HTML 5 graphics to do this. Details follow.\n</b></font>\n</p> \n<p>\nWe will write a program that will use the graphics features in HTML5 to make a simple drawing.\nHTML5 has a canvas tag that will set apart a rectangular space on a page.\n</p>\n<p>\nCut and paste the following JavaScript right after the \"use strict\"; line in your program:\n<pre>\n\n//=== supplied canvas stuff ==================================================\nvar tab = window.open();\nvar webPage = makeHTMLCanvas();  // alert(webPage);\nvar PIC = getCanvasContext();    // the canvas context... draw to this global var\n\nfunction makeHTMLCanvas() {\n  var htmlStr=\"\";\n  htmlStr += \"&lthtml>&lthead>&lt/head>&ltbody>\";\n  htmlStr += \"&lth1>Draw a Picture!!&lt/h1>\";\n  htmlStr += \"&ltcanvas id='myCanvas' width=800 height=600 \";\n  htmlStr += \"style='border:1px solid #000600;'>&lt/canvas>\";\n  htmlStr += \"&lt/body>&lt/html>\";\n  tab.document.write(htmlStr);\n  return htmlStr;\n}\n\nfunction getCanvasContext() {\n  var c = tab.document.getElementById(\"myCanvas\");\n  var context = c.getContext(\"2d\");\n  return context;\n}\n\n//=== end supplied canvas stuff ==================================================\n\n</pre>\n<br/>\nAfter this pre-supplied code, then write the code for your program.\n<br/><br/>\nYou may find this <a href=\"http://www.html5canvastutorials.com/\" target=\"_blank\">HTML5 Canvas tutorial </a> helpful.","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs = [ [] ];\nvar soln_outputs = [ [] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error in your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    //if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\", (2/5)); }\n    //if (style.nAFL > 5 ) { fail.s(\"We need 4 or fewer for loops\", (1/10) ); }\n    //if (style.nAWL > 1) { fail.s(\"Use no more than 5 while loop\", (1/10) ); }\n    if (style.nTFD < 3) { fail.s(\"We need at least 3 functions declared and used\", (2/5) ); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}  \n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                         ","createdAt":{"$date":"2017-12-25T02:37:04.862Z"},"updatedAt":{"$date":"2018-01-07T05:20:45.785Z"}},{"_id":{"$oid":"5a4527e841b9976116069ca3"},"num":4,"type":"twit","phase":1,"name":"Point fractal 2: doily","folder":"5a4055f941b9976116069c92","language":"javascript","testMode":true,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Write a program that will draw some point pictures on a web page. Use HTML 5 graphics to do this. Details follow.\n</b></font>\n</p> \n<p>\nWe will write a program that will use the graphics features in HTML5 to make a simple drawing.\nHTML5 has a canvas tag that will set apart a rectangular space on a page.\n</p>\n<p>\nCut and paste the following JavaScript right after the \"use strict\"; line in your program:\n<pre>\n\n//=== supplied canvas stuff ==================================================\nvar tab = window.open();\nvar webPage = makeHTMLCanvas();  // alert(webPage);\nvar PIC = getCanvasContext();    // the canvas context... draw to this global var\n\nfunction makeHTMLCanvas() {\n  var htmlStr=\"\";\n  htmlStr += \"&lthtml>&lthead>&lt/head>&ltbody>\";\n  htmlStr += \"&lth1>Draw a Picture!!&lt/h1>\";\n  htmlStr += \"&ltcanvas id='myCanvas' width=800 height=600 \";\n  htmlStr += \"style='border:1px solid #000600;'>&lt/canvas>\";\n  htmlStr += \"&lt/body>&lt/html>\";\n  tab.document.write(htmlStr);\n  return htmlStr;\n}\n\nfunction getCanvasContext() {\n  var c = tab.document.getElementById(\"myCanvas\");\n  var context = c.getContext(\"2d\");\n  return context;\n}\n\n//=== end supplied canvas stuff ==================================================\n\n</pre>\n<br/>\nAfter this pre-supplied code, then write the code for your program.\n<br/><br/>\nYou may find this <a href=\"http://www.html5canvastutorials.com/\" target=\"_blank\">HTML5 Canvas tutorial </a> helpful.","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs = [ [] ];\nvar soln_outputs = [ [] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error in your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    //if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\", (2/5)); }\n    //if (style.nAFL > 5 ) { fail.s(\"We need 4 or fewer for loops\", (1/10) ); }\n    //if (style.nAWL > 1) { fail.s(\"Use no more than 5 while loop\", (1/10) ); }\n    if (style.nTFD < 3) { fail.s(\"We need at least 3 functions declared and used\", (2/5) ); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}  \n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                         ","createdAt":{"$date":"2017-12-28T17:20:40.493Z"},"updatedAt":{"$date":"2018-01-07T05:20:45.786Z"}},{"_id":{"$oid":"5a45623341b9976116069ca9"},"num":5,"type":"twit","phase":1,"name":"Point fractal 3: PI","folder":"5a4055f941b9976116069c92","language":"javascript","testMode":true,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Write a program that will draw some point pictures on a web page. Use HTML 5 graphics to do this. Details follow.\n</b></font>\n</p> \n<p>\nWe will write a program that will use the graphics features in HTML5 to make a simple drawing.\nHTML5 has a canvas tag that will set apart a rectangular space on a page.\n</p>\n<p>\nCut and paste the following JavaScript right after the \"use strict\"; line in your program:\n<pre>\n\n//=== supplied canvas stuff ==================================================\nvar tab = window.open();\nvar webPage = makeHTMLCanvas();  // alert(webPage);\nvar PIC = getCanvasContext();    // the canvas context... draw to this global var\n\nfunction makeHTMLCanvas() {\n  var htmlStr=\"\";\n  htmlStr += \"&lthtml>&lthead>&lt/head>&ltbody>\";\n  htmlStr += \"&lth1>Draw a Picture!!&lt/h1>\";\n  htmlStr += \"&ltcanvas id='myCanvas' width=800 height=600 \";\n  htmlStr += \"style='border:1px solid #000600;'>&lt/canvas>\";\n  htmlStr += \"&lt/body>&lt/html>\";\n  tab.document.write(htmlStr);\n  return htmlStr;\n}\n\nfunction getCanvasContext() {\n  var c = tab.document.getElementById(\"myCanvas\");\n  var context = c.getContext(\"2d\");\n  return context;\n}\n\n//=== end supplied canvas stuff ==================================================\n\n</pre>\n<br/>\nAfter this pre-supplied code, then write the code for your program.\n<br/><br/>\nYou may find this <a href=\"http://www.html5canvastutorials.com/\" target=\"_blank\">HTML5 Canvas tutorial </a> helpful.","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs = [ [] ];\nvar soln_outputs = [ [] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error in your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    //if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\", (2/5)); }\n    //if (style.nAFL > 5 ) { fail.s(\"We need 4 or fewer for loops\", (1/10) ); }\n    //if (style.nAWL > 1) { fail.s(\"Use no more than 5 while loop\", (1/10) ); }\n    if (style.nTFD < 3) { fail.s(\"We need at least 3 functions declared and used\", (2/5) ); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}  \n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                         ","createdAt":{"$date":"2017-12-28T21:29:23.485Z"},"updatedAt":{"$date":"2018-01-07T05:20:45.787Z"}},{"_id":{"$oid":"5a456c4541b9976116069cab"},"num":6,"type":"twit","phase":1,"name":"Point fractal 4: Fredkin automata","folder":"5a4055f941b9976116069c92","language":"javascript","testMode":true,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Write a program that will draw some point pictures on a web page. Use HTML 5 graphics to do this. Details follow.\n</b></font>\n</p> \n<p>\nWe will write a program that will use the graphics features in HTML5 to make a simple drawing.\nHTML5 has a canvas tag that will set apart a rectangular space on a page.\n</p>\n<p>\nCut and paste the following JavaScript right after the \"use strict\"; line in your program:\n<pre>\n\n//=== supplied canvas stuff ==================================================\nvar tab = window.open();\nvar webPage = makeHTMLCanvas();  // alert(webPage);\nvar PIC = getCanvasContext();    // the canvas context... draw to this global var\n\nfunction makeHTMLCanvas() {\n  var htmlStr=\"\";\n  htmlStr += \"&lthtml>&lthead>&lt/head>&ltbody>\";\n  htmlStr += \"&lth1>Draw a Picture!!&lt/h1>\";\n  htmlStr += \"&ltcanvas id='myCanvas' width=800 height=600 \";\n  htmlStr += \"style='border:1px solid #000600;'>&lt/canvas>\";\n  htmlStr += \"&lt/body>&lt/html>\";\n  tab.document.write(htmlStr);\n  return htmlStr;\n}\n\nfunction getCanvasContext() {\n  var c = tab.document.getElementById(\"myCanvas\");\n  var context = c.getContext(\"2d\");\n  return context;\n}\n\n//=== end supplied canvas stuff ==================================================\n\n</pre>\n<br/>\nAfter this pre-supplied code, then write the code for your program.\n<br/><br/>\nYou may find this <a href=\"http://www.html5canvastutorials.com/\" target=\"_blank\">HTML5 Canvas tutorial </a> helpful.","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs = [ [] ];\nvar soln_outputs = [ [] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error in your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    //if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\", (2/5)); }\n    //if (style.nAFL > 5 ) { fail.s(\"We need 4 or fewer for loops\", (1/10) ); }\n    //if (style.nAWL > 1) { fail.s(\"Use no more than 5 while loop\", (1/10) ); }\n    if (style.nTFD < 3) { fail.s(\"We need at least 3 functions declared and used\", (2/5) ); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}  \n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                         ","createdAt":{"$date":"2017-12-28T22:12:21.039Z"},"updatedAt":{"$date":"2018-01-07T05:20:45.788Z"}},{"_id":{"$oid":"5a45bf5c41b9976116069cb0"},"num":7,"type":"twit","phase":1,"name":"Point fractal 5: Life","folder":"5a4055f941b9976116069c92","language":"javascript","testMode":true,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Write a program that will draw some point pictures on a web page. Use HTML 5 graphics to do this. Details follow.\n</b></font>\n</p> \n<p>\nWe will write a program that will use the graphics features in HTML5 to make a simple drawing.\nHTML5 has a canvas tag that will set apart a rectangular space on a page.\n</p>\n<p>\nCut and paste the following JavaScript right after the \"use strict\"; line in your program:\n<pre>\n\n//=== supplied canvas stuff ==================================================\nvar tab = window.open();\nvar webPage = makeHTMLCanvas();  // alert(webPage);\nvar PIC = getCanvasContext();    // the canvas context... draw to this global var\n\nfunction makeHTMLCanvas() {\n  var htmlStr=\"\";\n  htmlStr += \"&lthtml>&lthead>&lt/head>&ltbody>\";\n  htmlStr += \"&lth1>Draw a Picture!!&lt/h1>\";\n  htmlStr += \"&ltcanvas id='myCanvas' width=800 height=600 \";\n  htmlStr += \"style='border:1px solid #000600;'>&lt/canvas>\";\n  htmlStr += \"&lt/body>&lt/html>\";\n  tab.document.write(htmlStr);\n  return htmlStr;\n}\n\nfunction getCanvasContext() {\n  var c = tab.document.getElementById(\"myCanvas\");\n  var context = c.getContext(\"2d\");\n  return context;\n}\n\n//=== end supplied canvas stuff ==================================================\n\n</pre>\n<br/>\nAfter this pre-supplied code, then write the code for your program.\n<br/><br/>\nYou may find this <a href=\"http://www.html5canvastutorials.com/\" target=\"_blank\">HTML5 Canvas tutorial </a> helpful.","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs = [ [] ];\nvar soln_outputs = [ [] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error in your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    //if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\", (2/5)); }\n    //if (style.nAFL > 5 ) { fail.s(\"We need 4 or fewer for loops\", (1/10) ); }\n    //if (style.nAWL > 1) { fail.s(\"Use no more than 5 while loop\", (1/10) ); }\n    if (style.nTFD < 3) { fail.s(\"We need at least 3 functions declared and used\", (2/5) ); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}  \n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                         ","createdAt":{"$date":"2017-12-29T04:06:52.847Z"},"updatedAt":{"$date":"2018-01-07T05:20:45.789Z"}},{"_id":{"$oid":"5a4fcaf8f99ad366764a2010"},"num":33,"type":"diy","phase":1,"name":"{ <B>EC:</B> RANDOM ARRAY 3 COPY }","folder":"5902b4167bb0b09c0d2a6422","language":"javascript","testMode":true,"maxSubmissions":"","vidURL":"","text":"<b>To get scored: This one has to be manually scored.</b>\n<br/><br/>\n<b>I have set the grader to score it at 0 for functionality.</b>\nYou can receive some style points for the various aspects requested (functions written, no globals, \nmyMain format etc.).  I will then manually award the rest of the style points and the functionality points \nby examining and running your code. When you have tested the code and are ready for it to be scored, \nsubmit it and then click \"share\" on it so I will see that you wish me to take a look.  I will only grade it once\nmanually, so be sure you have tested it well before sharing it.\n<br/><br/>\n<b>The program</b>\n<br/>\nWrite a program that will create an array and put into it some integers randomly generated between 10 and 30 (including possibly each end point), making sure that all\nthe numbers in the array are unique (no duplicates). \nThe size of the array will be given by the user as the first thing; you will validate (see below).\nOnce the array is properly filled, print the entire array with one alert statement.\n<br/><br/>\nThis is a more complicated program than most previous bricks. Here are some specifics:\n<ul>\n<li>\nFirst, you will be validating the user input\n</li>\n<li>\nNext, you must make sure each new integer you store in the array is unique -- that is, make sure it is not already in the array before you store it.  \n</li>\n<li>Also, you must write 5 functions here... myMain, getGoodInput(), genRandomInt(low,hi), alreadyIn ( n, arr ), and genUniqueIntArray ( n, hi, lo )\n</li>\n</ul>\n\n<b>Function details</b>\n<br/><p>\n<b>getGoodInput() </b> For this function you will use the re-ask-the-user strategy; call this function and have all user interaction (prompts) inside it.\nAsk the user for an integer that is between 1 and 20 (inclusive), and make sure you get one; if the user gives anything else (meaning a string, a non-integer, \na value smaller than 1 or larger than 20) print \"error\" and re-ask for input.\n<br/><br/>\n<b>genRandomInt ( low, hi ) </b> For this function, call Math.random inside it  and then adjust tvalue so that the \ninteger returned lies within the range lo to hi... inclusive of each.  You did this in an earlier brick, so go back and find that code.  \nTest it carefully to make sure it will be able to generate both lo and hi, and nothing outside that range.\n<br/><br/>\n<b>alreadyIn ( n, arr )</b> For this function you check to see if parameter value \"n\" is in the array \"arr\". If it is, return a true; if it is not, return a false;\nYou will call this function after you generate a new random integer to see if the number should be added to your array or not.\n<br/><br/>\n<b>genUniqueIntArray ( n, lo, hi ) </b> For this function you will create and return an array with unique random integers in it, each integer \nbetween lo and hi (inclusive).\nThis function will call genRandomInt and will also call alreadyIn to decide if the new random integer is already in the array being built. \n If it is there, simple call genRandomInt again.. and again if necessary... until the number you get back is not in the array. \nAt that point you add it to the array and keep going until the array is full.  Once the array if filled, return the array.\n<br/><br/>\n<b> myMain </b> The myMain code is fairly simple.  First, call getGoodInput to ifind out from the user how many integers to generate into the array.\nThen call genUniqueIntArray and pass it the user's array size number, as well as the range (30 hi, 10 low).  Capture the array that is returned and save\nit in a variable. Then print out the entire array in one alert statement.\n</p>\n","value":{"correct":"5","style":"2"},"onSubmit":"var soln_inputs = [ [\"must fail functionality\"] ];  // this input and out assures failing functionality\nvar soln_outputs = [ [\"manual grading\"] ];          // unless they are magnificent guessers\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"to be manually graded\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); } \n\n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\" ); }\n  else if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\" ); }\n  else {\n    if (style.nWLAP > 2) { fail.s(\"use no more than 2 while loops\", (1/5) ); }\n    if (style.nFLAP > 2) { fail.s(\"use no more than 2 for loops\", (1/5) ); }\n    if (style.nAFD < 5) { fail.s(\"need at least 5 functions declared\", (1/5) ); }\n    if (true) { fail.s(\"some style points to be awarded manually\", (2/5) ); } \n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                  ","createdAt":{"$date":"2018-01-05T18:59:04.29Z"},"updatedAt":{"$date":"2018-01-05T18:59:20.414Z"}},{"_id":{"$oid":"5a51ad25f22114cd4ee40379"},"num":5,"type":"wall","phase":1,"name":"<B>W.GRAPHICS (35 PTS):</B> DRAW A CARDS PICTURE","folder":"546eb51f7f212f1d61e5c25c","language":"javascript","testMode":true,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Write a program that will draw ... bigger. Use HTML 5 graphics to do this. Details follow.\n</b></font>\n</p> \n<p>\n(30-5 pts) Due Sat. 12/5, 11:59 pm\n<br/><br/>\nYou will write a program that will use HTML5 graphics to draw a picture of your card deck and hands.\n<br/><br/>\nSee this\n<a href=\"http://www.cs.unc.edu/~stotts/COMP110-f15/assn/w.graphics.html\" target=\"_blank\" >\ndetailed description.\n</a>\n<br/><br/>\n<b>TO GET SCORED</b>\n<br/>\nThe auto-grader will score this a 0 for functionality and 0 for style.  It will be manually graded like a previous brick we did (last one in Arrays and Random).\n<br/><br/>\nWhen you are done and wish to have it manually scored, please submit it via the \"submit\" button and then click the \"share\" button on the resulting submission.\nI will see the share request and consider that a request for scoring.\nI will score this assignment one time.","value":{"correct":"20","style":"5"},"onSubmit":"var soln_inputs = [ [] ];\nvar soln_outputs = [ [\"not auto graded\"] ];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    //if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\", (2/5)); }\n    //if (style.nAFL > 5 ) { fail.s(\"We need 4 or fewer for loops\", (1/10) ); }\n    //if (style.nAWL > 3) { fail.s(\"Use only 3 or fewer while loops\", (1/10) ); }\n    if (style.nTFD < 4) { fail.s(\"We need at least 4 functions declared and used\", (2/5) ); }\n    fail.s(\"style will be manually graded\");\n  }\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}  \n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);                  \n ","createdAt":{"$date":"2018-01-07T05:16:21.534Z"},"updatedAt":{"$date":"2018-01-07T05:19:58.097Z"}},{"_id":{"$oid":"5a8ad4b7cce6d6673667e5ba"},"num":4,"type":"twit","phase":1,"name":"<b>DIY</b>: Power(b,e) fully abstracted validation","folder":"5428968fc8b4714e17ed8cc7","language":"javascript","testMode":false,"maxSubmissions":"","vidURL":"","text":"<p>\n<font color=firebrick>\n<b>Write a program that raises a base to an integer power, using fully abstracted validation.  Details follow.\n</b></font>\n</p> \n<p>\nWe will do the same basic computation that we did back in \"Function power (a,b)\" in module \"Utility functions\", but this time we will use fully abstracted validation to get good user input.\nThis means we will implement the \"re-ask the user\" strategy and keep trying for good input until the user gets it right.  Here is the code we can use for function power:\n<pre>\nfunction power ( b, e ) {\n  var pow = 1;\n  for (var i=1; i<=e; i++ ) { pow = pow*b; }\n  return pow;\n}\n</pre>\n</p>\n<p>\nWrite a \"myMain\" function that will ask the user for two numbers, a base and an exponent (ask for base first).  \nYou will need two validation functions: one will get a good integer input (like the previous problem), and the other will get good numeric\ninput (any real number is ok, including integers).  Let's call them \"getGood_NonNegInt_Input\" and \"getGood_Number_Input\".  You will use \n\"getGood_Number_Input\" to get the base, and use \"getGood_NonNegInt_Input\" to get the exponent.  \nOnce you have a good base and a good exponent from the user,\ncall function power on them and print out the number that is returned.\nUse the format shown below in sample execution.  It is more than just the number produced.  It has some explanatory text with the result of power.\n</p>\n<p>\nThe difference between the two validation functions is small,\nbut important.  We want the base to be any valid number (positive, negative, or 0).  We want the exponent to be a non-negative integer (raising to the 0 power is ok).\nBoth will re-ask the user when input is rejected.\nBoth functions will reject input that is non-numeric (text like \"goheels\");  when non-numeric input is given, print \"not num: try again\" and re-ask the user.\n\"getGood_Number_Input\" will accept and return any valid number the user types.\n</p>\n<p>\nFunction \"getGood_NonNegInt_Input\" will further reject any number that is not also a positive integer or 0.  \nIf a non-negative number is given, or a non-integer number, print \"need non-neg int: try again\" and reask the user.\n</p>\n<p>\nYou can base both these validation functions on \"getGoodInput\" from the previous VID problem, simply adjust the conditions that are checked in each and the error messages\nas appropriate.\nSo your program will have 2 fully abstracted input functions, a myMain function, and any supporting functions needed like isInt, isPos, etc.\n</p>\n<p>\nNote that 0 raised to the 0 power is undefined mathematically (look at the graph of x^y at the origin), but we are going to make our program produce 1 when we raise anything to the 0 power, (including raising 0 to the 0 power).  We also have 0 raised to any positive integer exponent is 0.\n<p>\n<b>Sample Execution</b>\n<pre>\nbase? goheels \nnot num: try again\nbase? -3\nexponent? 2\nbase -3 raised to power 2 is 9\n</pre>\n<pre>\nbase? 4.21 \nexponent? coding is cool\nnot num: try again\nexponent? -3\nneed non-neg int: try again\nexponent? 3\nbase 4.21 raised to power 3 is 74.618461\n</pre>\n<pre>\nbase? 5 \nexponent? -2\nneed non-neg int: try again\nexponent? 2.34\nneed non-neg int: try again\nexponent: 0\nbase 5 raised to power 0 is 1\n</pre>\n<pre>\nbase? 0 \nexponent? 4\nbase 0 raised to power 4 is 0\n</pre>\n<pre>\nbase? 0 \nexponent? 0\nbase 0 raised to power 0 is 1\n</pre>\n</p>","value":{"correct":"1","style":"1"},"onSubmit":"var soln_inputs = [ [\"goheels\",-3,2], [4.21,\"code cool\",-3,3], [5,-2,2.34,0], [0,0], [6.25,2], [-5,5], [\"a\",\"b\",-4,\"c\",\"d\",\"e\",-3,3] ];\nvar soln_outputs = [ \n  [\"not num: try again\", \"base -3 raised to power 2 is 9\"], \n  [\"not num: try again\", \"need non-neg int: try again\", \"base 4.21 raised to power 3 is 74.618461\"],\n  [\"need non-neg int: try again\",\"need non-neg int: try again\",\"base 5 raised to power 0 is 1\"],\n  [\"base 0 raised to power 0 is 1\"],\n  [\"base 6.25 raised to power 2 is 39.0625\"],\n  [\"base -5 raised to power 5 is -3125\"],\n  [\"not num: try again\",\"not num: try again\",\"not num: try again\",\"not num: try again\",\"not num: try again\",\"need non-neg int: try again\",\n   \"base -4 raised to power 3 is -64\"]\n];\n\n// call backs\nfunction totalChecker (err, user_outputs, truVec ) {\n  // check functional correctness\n  var ff = false;\n  if (err) { fail.f(\"There was an error is your code: \" + err.msg); ff = true; } \n  else {\n     for(var i=0; i<truVec.length; i++) { \n        if (!truVec[i]) { fail.f(\"incorrect output\", (1/truVec.length) ); ff = true; }\n     }\n  }  // if (ff) { fail.s(\"no style points since functional failed\"); }\n  \n  // check style\n  if (!style.hasUSF) { fail.s(\"first line must be: \\\"use strict\\\"; \"); }\n  else {\n    if (!style.isAFD1C) { fail.s(\"doesnt follow myMain function format\"); }\n    if (style.hasFIF) { fail.s(\"don't declare functions inside other functions\"); }\n    //if (style.nWLF != 2) { fail.s(\"use 2 while loops\"); }\n    if (style.nFLAP > 1) { fail.s(\"use no more than 1 for loop\"); }\n  }\n\n  // commit points if any\n  pass.f(\"passed functional correctness\");\n  pass.s(\"passed style correctness\");\n}\n\n// make it so\nbatch.exec ( code, soln_inputs, soln_outputs, totalChecker);       ","createdAt":{"$date":"2018-02-19T13:44:23.716Z"},"updatedAt":{"$date":"2018-02-20T15:51:47.835Z"}}]
